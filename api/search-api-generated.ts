/* tslint:disable */
/* eslint-disable */
/*
Trello

This document describes the REST API of Trello as published by Trello.com.
 - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>
 - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getSearchMembers()
         * @param {string} query a string with a length from 1 to 16384
         * @param {string} [limit] a number from 1 to 20
         * @param {string} [idBoard] An id, or null
         * @param {string} [idOrganization] An id, or null
         * @param {string} [onlyOrgMembers] A boolean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMembers: async (query: string, limit?: string, idBoard?: string, idOrganization?: string, onlyOrgMembers?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('findMembers', 'query', query)
            const localVarPath = `/search/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (idBoard !== undefined) {
                localVarQueryParameter['idBoard'] = idBoard;
            }

            if (idOrganization !== undefined) {
                localVarQueryParameter['idOrganization'] = idOrganization;
            }

            if (onlyOrgMembers !== undefined) {
                localVarQueryParameter['onlyOrgMembers'] = onlyOrgMembers;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/search/members',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSearch()
         * @param {string} query a string with a length from 1 to 16384
         * @param {string} idOrganizations A comma-separated list of objectIds, 24-character hex strings
         * @param {string} [idBoards] A comma-separated list of objectIds, 24-character hex strings
         * @param {string} [idCards] A comma-separated list of objectIds, 24-character hex strings
         * @param {string} [modelTypes] all or a comma-separated list of: actions, boards, cards, members or organizations
         * @param {string} [boardFields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {string} [boardsLimit] a number from 1 to 1000
         * @param {string} [cardFields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {string} [cardsLimit] a number from 1 to 1000
         * @param {string} [cardsPage] a number from 0 to 100
         * @param {string} [cardBoard]  true or false
         * @param {string} [cardList]  true or false
         * @param {string} [cardMembers]  true or false
         * @param {string} [cardStickers]  true or false
         * @param {string} [cardAttachments] A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments
         * @param {string} [organizationFields] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
         * @param {string} [organizationsLimit] a number from 1 to 1000
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [membersLimit] a number from 1 to 1000
         * @param {string} [partial]  true or false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResults: async (query: string, idOrganizations: string, idBoards?: string, idCards?: string, modelTypes?: string, boardFields?: string, boardsLimit?: string, cardFields?: string, cardsLimit?: string, cardsPage?: string, cardBoard?: string, cardList?: string, cardMembers?: string, cardStickers?: string, cardAttachments?: string, organizationFields?: string, organizationsLimit?: string, memberFields?: string, membersLimit?: string, partial?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getResults', 'query', query)
            // verify required parameter 'idOrganizations' is not null or undefined
            assertParamExists('getResults', 'idOrganizations', idOrganizations)
            const localVarPath = `/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (idBoards !== undefined) {
                localVarQueryParameter['idBoards'] = idBoards;
            }

            if (idOrganizations !== undefined) {
                localVarQueryParameter['idOrganizations'] = idOrganizations;
            }

            if (idCards !== undefined) {
                localVarQueryParameter['idCards'] = idCards;
            }

            if (modelTypes !== undefined) {
                localVarQueryParameter['modelTypes'] = modelTypes;
            }

            if (boardFields !== undefined) {
                localVarQueryParameter['board_fields'] = boardFields;
            }

            if (boardsLimit !== undefined) {
                localVarQueryParameter['boards_limit'] = boardsLimit;
            }

            if (cardFields !== undefined) {
                localVarQueryParameter['card_fields'] = cardFields;
            }

            if (cardsLimit !== undefined) {
                localVarQueryParameter['cards_limit'] = cardsLimit;
            }

            if (cardsPage !== undefined) {
                localVarQueryParameter['cards_page'] = cardsPage;
            }

            if (cardBoard !== undefined) {
                localVarQueryParameter['card_board'] = cardBoard;
            }

            if (cardList !== undefined) {
                localVarQueryParameter['card_list'] = cardList;
            }

            if (cardMembers !== undefined) {
                localVarQueryParameter['card_members'] = cardMembers;
            }

            if (cardStickers !== undefined) {
                localVarQueryParameter['card_stickers'] = cardStickers;
            }

            if (cardAttachments !== undefined) {
                localVarQueryParameter['card_attachments'] = cardAttachments;
            }

            if (organizationFields !== undefined) {
                localVarQueryParameter['organization_fields'] = organizationFields;
            }

            if (organizationsLimit !== undefined) {
                localVarQueryParameter['organizations_limit'] = organizationsLimit;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (membersLimit !== undefined) {
                localVarQueryParameter['members_limit'] = membersLimit;
            }

            if (partial !== undefined) {
                localVarQueryParameter['partial'] = partial;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/search',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary getSearchMembers()
         * @param {SearchApiFindMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findMembers(requestParameters: SearchApiFindMembersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findMembers(requestParameters.query, requestParameters.limit, requestParameters.idBoard, requestParameters.idOrganization, requestParameters.onlyOrgMembers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSearch()
         * @param {SearchApiGetResultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResults(requestParameters: SearchApiGetResultsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResults(requestParameters.query, requestParameters.idOrganizations, requestParameters.idBoards, requestParameters.idCards, requestParameters.modelTypes, requestParameters.boardFields, requestParameters.boardsLimit, requestParameters.cardFields, requestParameters.cardsLimit, requestParameters.cardsPage, requestParameters.cardBoard, requestParameters.cardList, requestParameters.cardMembers, requestParameters.cardStickers, requestParameters.cardAttachments, requestParameters.organizationFields, requestParameters.organizationsLimit, requestParameters.memberFields, requestParameters.membersLimit, requestParameters.partial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * 
         * @summary getSearchMembers()
         * @param {SearchApiFindMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMembers(requestParameters: SearchApiFindMembersRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findMembers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSearch()
         * @param {SearchApiGetResultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResults(requestParameters: SearchApiGetResultsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getResults(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for findMembers operation in SearchApi.
 * @export
 * @interface SearchApiFindMembersRequest
 */
export type SearchApiFindMembersRequest = {
    
    /**
    * a string with a length from 1 to 16384
    * @type {string}
    * @memberof SearchApiFindMembers
    */
    readonly query: string
    
    /**
    * a number from 1 to 20
    * @type {string}
    * @memberof SearchApiFindMembers
    */
    readonly limit?: string
    
    /**
    * An id, or null
    * @type {string}
    * @memberof SearchApiFindMembers
    */
    readonly idBoard?: string
    
    /**
    * An id, or null
    * @type {string}
    * @memberof SearchApiFindMembers
    */
    readonly idOrganization?: string
    
    /**
    * A boolean
    * @type {string}
    * @memberof SearchApiFindMembers
    */
    readonly onlyOrgMembers?: string
    
}

/**
 * Request parameters for getResults operation in SearchApi.
 * @export
 * @interface SearchApiGetResultsRequest
 */
export type SearchApiGetResultsRequest = {
    
    /**
    * a string with a length from 1 to 16384
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly query: string
    
    /**
    * A comma-separated list of objectIds, 24-character hex strings
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly idOrganizations: string
    
    /**
    * A comma-separated list of objectIds, 24-character hex strings
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly idBoards?: string
    
    /**
    * A comma-separated list of objectIds, 24-character hex strings
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly idCards?: string
    
    /**
    * all or a comma-separated list of: actions, boards, cards, members or organizations
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly modelTypes?: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly boardFields?: string
    
    /**
    * a number from 1 to 1000
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly boardsLimit?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly cardFields?: string
    
    /**
    * a number from 1 to 1000
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly cardsLimit?: string
    
    /**
    * a number from 0 to 100
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly cardsPage?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly cardBoard?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly cardList?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly cardMembers?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly cardStickers?: string
    
    /**
    * A boolean value or &quot;cover&quot; for only card cover attachments
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly cardAttachments?: string
    
    /**
    * all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly organizationFields?: string
    
    /**
    * a number from 1 to 1000
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly organizationsLimit?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly memberFields?: string
    
    /**
    * a number from 1 to 1000
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly membersLimit?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof SearchApiGetResults
    */
    readonly partial?: string
    
}

/**
 * SearchApiGenerated - object-oriented interface
 * @export
 * @class SearchApiGenerated
 * @extends {BaseAPI}
 */
export class SearchApiGenerated extends BaseAPI {
    /**
     * 
     * @summary getSearchMembers()
     * @param {SearchApiFindMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiGenerated
     */
    public findMembers(requestParameters: SearchApiFindMembersRequest, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).findMembers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSearch()
     * @param {SearchApiGetResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiGenerated
     */
    public getResults(requestParameters: SearchApiGetResultsRequest, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).getResults(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
