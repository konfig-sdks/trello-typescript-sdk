/* tslint:disable */
/* eslint-disable */
/*
Trello

This document describes the REST API of Trello as published by Trello.com.
 - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>
 - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Checklists } from '../models';
// @ts-ignore
import { ChecklistsCheckItems } from '../models';
// @ts-ignore
import { ChecklistsIdCard } from '../models';
// @ts-ignore
import { ChecklistsName } from '../models';
// @ts-ignore
import { ChecklistsPos } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ChecklistApi - axios parameter creator
 * @export
 */
export const ChecklistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addChecklistsCheckItemsByIdChecklist()
         * @param {string} idChecklist idChecklist
         * @param {ChecklistsCheckItems} checklistsCheckItems Attributes of \&quot;Checklists Check Items\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCheckItemsByIdChecklist: async (idChecklist: string, checklistsCheckItems: ChecklistsCheckItems, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('addCheckItemsByIdChecklist', 'idChecklist', idChecklist)
            // verify required parameter 'checklistsCheckItems' is not null or undefined
            assertParamExists('addCheckItemsByIdChecklist', 'checklistsCheckItems', checklistsCheckItems)
            const localVarPath = `/checklists/{idChecklist}/checkItems`
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checklistsCheckItems,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checklists/{idChecklist}/checkItems',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checklistsCheckItems, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addChecklists()
         * @param {Checklists} checklists Attributes of \&quot;Checklists\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (checklists: Checklists, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'checklists' is not null or undefined
            assertParamExists('create', 'checklists', checklists)
            const localVarPath = `/checklists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checklists,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checklists',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checklists, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getChecklistsBoardByIdChecklist()
         * @param {string} idChecklist idChecklist
         * @param {string} [fields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdChecklist: async (idChecklist: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('getBoardByIdChecklist', 'idChecklist', idChecklist)
            const localVarPath = `/checklists/{idChecklist}/board`
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checklists/{idChecklist}/board',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getChecklistsBoardByIdChecklistByField()
         * @param {string} idChecklist idChecklist
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdChecklistByField: async (idChecklist: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('getBoardByIdChecklistByField', 'idChecklist', idChecklist)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getBoardByIdChecklistByField', 'field', field)
            const localVarPath = `/checklists/{idChecklist}/board/{field}`
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checklists/{idChecklist}/board/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getChecklistsByIdChecklist()
         * @param {string} idChecklist idChecklist
         * @param {string} [cards] One of: all, closed, none, open or visible
         * @param {string} [cardFields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {string} [checkItems] One of: all or none
         * @param {string} [checkItemFields] all or a comma-separated list of: name, nameData, pos, state or type
         * @param {string} [fields] all or a comma-separated list of: idBoard, idCard, name or pos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (idChecklist: string, cards?: string, cardFields?: string, checkItems?: string, checkItemFields?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('getById', 'idChecklist', idChecklist)
            const localVarPath = `/checklists/{idChecklist}`
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (cards !== undefined) {
                localVarQueryParameter['cards'] = cards;
            }

            if (cardFields !== undefined) {
                localVarQueryParameter['card_fields'] = cardFields;
            }

            if (checkItems !== undefined) {
                localVarQueryParameter['checkItems'] = checkItems;
            }

            if (checkItemFields !== undefined) {
                localVarQueryParameter['checkItem_fields'] = checkItemFields;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checklists/{idChecklist}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getChecklistsByIdChecklistByField()
         * @param {string} idChecklist idChecklist
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdField: async (idChecklist: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('getByIdField', 'idChecklist', idChecklist)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getByIdField', 'field', field)
            const localVarPath = `/checklists/{idChecklist}/{field}`
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checklists/{idChecklist}/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getChecklistsCardsByIdChecklistByFilter()
         * @param {string} idChecklist idChecklist
         * @param {string} filter filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByFilter: async (idChecklist: string, filter: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('getCardsByFilter', 'idChecklist', idChecklist)
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('getCardsByFilter', 'filter', filter)
            const localVarPath = `/checklists/{idChecklist}/cards/{filter}`
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)))
                .replace(`{${"filter"}}`, encodeURIComponent(String(filter !== undefined ? filter : `-filter-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checklists/{idChecklist}/cards/{filter}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getChecklistsCheckItemsByIdChecklist()
         * @param {string} idChecklist idChecklist
         * @param {string} [filter] One of: all or none
         * @param {string} [fields] all or a comma-separated list of: name, nameData, pos, state or type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckItemsByIdChecklist: async (idChecklist: string, filter?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('getCheckItemsByIdChecklist', 'idChecklist', idChecklist)
            const localVarPath = `/checklists/{idChecklist}/checkItems`
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checklists/{idChecklist}/checkItems',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getChecklistsCheckItemsByIdChecklistByIdCheckItem()
         * @param {string} idChecklist idChecklist
         * @param {string} idCheckItem idCheckItem
         * @param {string} [fields] all or a comma-separated list of: name, nameData, pos, state or type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckItemsByIdChecklistByIdCheckItem: async (idChecklist: string, idCheckItem: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('getCheckItemsByIdChecklistByIdCheckItem', 'idChecklist', idChecklist)
            // verify required parameter 'idCheckItem' is not null or undefined
            assertParamExists('getCheckItemsByIdChecklistByIdCheckItem', 'idCheckItem', idCheckItem)
            const localVarPath = `/checklists/{idChecklist}/checkItems/{idCheckItem}`
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)))
                .replace(`{${"idCheckItem"}}`, encodeURIComponent(String(idCheckItem !== undefined ? idCheckItem : `-idCheckItem-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checklists/{idChecklist}/checkItems/{idCheckItem}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getChecklistsCardsByIdChecklist()
         * @param {string} idChecklist idChecklist
         * @param {string} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [attachments] A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments
         * @param {string} [attachmentFields] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
         * @param {string} [stickers]  true or false
         * @param {string} [members]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [checkItemStates]  true or false
         * @param {string} [checklists] One of: all or none
         * @param {string} [limit] a number from 1 to 1000
         * @param {string} [since] A date, or null
         * @param {string} [before] A date, or null
         * @param {string} [filter] One of: all, closed, none or open
         * @param {string} [fields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCardsByIdChecklist: async (idChecklist: string, actions?: string, attachments?: string, attachmentFields?: string, stickers?: string, members?: string, memberFields?: string, checkItemStates?: string, checklists?: string, limit?: string, since?: string, before?: string, filter?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('listCardsByIdChecklist', 'idChecklist', idChecklist)
            const localVarPath = `/checklists/{idChecklist}/cards`
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (actions !== undefined) {
                localVarQueryParameter['actions'] = actions;
            }

            if (attachments !== undefined) {
                localVarQueryParameter['attachments'] = attachments;
            }

            if (attachmentFields !== undefined) {
                localVarQueryParameter['attachment_fields'] = attachmentFields;
            }

            if (stickers !== undefined) {
                localVarQueryParameter['stickers'] = stickers;
            }

            if (members !== undefined) {
                localVarQueryParameter['members'] = members;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (checkItemStates !== undefined) {
                localVarQueryParameter['checkItemStates'] = checkItemStates;
            }

            if (checklists !== undefined) {
                localVarQueryParameter['checklists'] = checklists;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checklists/{idChecklist}/cards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteChecklistsByIdChecklist()
         * @param {string} idChecklist idChecklist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (idChecklist: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('removeById', 'idChecklist', idChecklist)
            const localVarPath = `/checklists/{idChecklist}`
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checklists/{idChecklist}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteChecklistsCheckItemsByIdChecklistByIdCheckItem()
         * @param {string} idChecklist idChecklist
         * @param {string} idCheckItem idCheckItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByIdCheckItem: async (idChecklist: string, idCheckItem: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('removeByIdCheckItem', 'idChecklist', idChecklist)
            // verify required parameter 'idCheckItem' is not null or undefined
            assertParamExists('removeByIdCheckItem', 'idCheckItem', idCheckItem)
            const localVarPath = `/checklists/{idChecklist}/checkItems/{idCheckItem}`
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)))
                .replace(`{${"idCheckItem"}}`, encodeURIComponent(String(idCheckItem !== undefined ? idCheckItem : `-idCheckItem-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checklists/{idChecklist}/checkItems/{idCheckItem}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateChecklistsByIdChecklist()
         * @param {string} idChecklist idChecklist
         * @param {Checklists} checklists Attributes of \&quot;Checklists\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdChecklist: async (idChecklist: string, checklists: Checklists, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('updateByIdChecklist', 'idChecklist', idChecklist)
            // verify required parameter 'checklists' is not null or undefined
            assertParamExists('updateByIdChecklist', 'checklists', checklists)
            const localVarPath = `/checklists/{idChecklist}`
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checklists,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checklists/{idChecklist}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checklists, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateChecklistsIdCardByIdChecklist()
         * @param {string} idChecklist idChecklist
         * @param {ChecklistsIdCard} checklistsIdCard Attributes of \&quot;Checklists Id Card\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdCardByIdChecklist: async (idChecklist: string, checklistsIdCard: ChecklistsIdCard, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('updateIdCardByIdChecklist', 'idChecklist', idChecklist)
            // verify required parameter 'checklistsIdCard' is not null or undefined
            assertParamExists('updateIdCardByIdChecklist', 'checklistsIdCard', checklistsIdCard)
            const localVarPath = `/checklists/{idChecklist}/idCard`
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checklistsIdCard,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checklists/{idChecklist}/idCard',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checklistsIdCard, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateChecklistsNameByIdChecklist()
         * @param {string} idChecklist idChecklist
         * @param {ChecklistsName} checklistsName Attributes of \&quot;Checklists Name\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNameByIdChecklist: async (idChecklist: string, checklistsName: ChecklistsName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('updateNameByIdChecklist', 'idChecklist', idChecklist)
            // verify required parameter 'checklistsName' is not null or undefined
            assertParamExists('updateNameByIdChecklist', 'checklistsName', checklistsName)
            const localVarPath = `/checklists/{idChecklist}/name`
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checklistsName,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checklists/{idChecklist}/name',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checklistsName, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateChecklistsPosByIdChecklist()
         * @param {string} idChecklist idChecklist
         * @param {ChecklistsPos} checklistsPos Attributes of \&quot;Checklists Pos\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePosByIdChecklist: async (idChecklist: string, checklistsPos: ChecklistsPos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('updatePosByIdChecklist', 'idChecklist', idChecklist)
            // verify required parameter 'checklistsPos' is not null or undefined
            assertParamExists('updatePosByIdChecklist', 'checklistsPos', checklistsPos)
            const localVarPath = `/checklists/{idChecklist}/pos`
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checklistsPos,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checklists/{idChecklist}/pos',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checklistsPos, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChecklistApi - functional programming interface
 * @export
 */
export const ChecklistApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChecklistApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary addChecklistsCheckItemsByIdChecklist()
         * @param {ChecklistApiAddCheckItemsByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCheckItemsByIdChecklist(requestParameters: ChecklistApiAddCheckItemsByIdChecklistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const checklistsCheckItems: ChecklistsCheckItems = {
                checked: requestParameters.checked,
                name: requestParameters.name,
                pos: requestParameters.pos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCheckItemsByIdChecklist(requestParameters.idChecklist, checklistsCheckItems, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addChecklists()
         * @param {ChecklistApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: ChecklistApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const checklists: Checklists = {
                idBoard: requestParameters.idBoard,
                idCard: requestParameters.idCard,
                idChecklistSource: requestParameters.idChecklistSource,
                name: requestParameters.name,
                pos: requestParameters.pos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(checklists, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getChecklistsBoardByIdChecklist()
         * @param {ChecklistApiGetBoardByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardByIdChecklist(requestParameters: ChecklistApiGetBoardByIdChecklistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardByIdChecklist(requestParameters.idChecklist, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getChecklistsBoardByIdChecklistByField()
         * @param {ChecklistApiGetBoardByIdChecklistByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardByIdChecklistByField(requestParameters: ChecklistApiGetBoardByIdChecklistByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardByIdChecklistByField(requestParameters.idChecklist, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getChecklistsByIdChecklist()
         * @param {ChecklistApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ChecklistApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.idChecklist, requestParameters.cards, requestParameters.cardFields, requestParameters.checkItems, requestParameters.checkItemFields, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getChecklistsByIdChecklistByField()
         * @param {ChecklistApiGetByIdFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdField(requestParameters: ChecklistApiGetByIdFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdField(requestParameters.idChecklist, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getChecklistsCardsByIdChecklistByFilter()
         * @param {ChecklistApiGetCardsByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardsByFilter(requestParameters: ChecklistApiGetCardsByFilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardsByFilter(requestParameters.idChecklist, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getChecklistsCheckItemsByIdChecklist()
         * @param {ChecklistApiGetCheckItemsByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCheckItemsByIdChecklist(requestParameters: ChecklistApiGetCheckItemsByIdChecklistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCheckItemsByIdChecklist(requestParameters.idChecklist, requestParameters.filter, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getChecklistsCheckItemsByIdChecklistByIdCheckItem()
         * @param {ChecklistApiGetCheckItemsByIdChecklistByIdCheckItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCheckItemsByIdChecklistByIdCheckItem(requestParameters: ChecklistApiGetCheckItemsByIdChecklistByIdCheckItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCheckItemsByIdChecklistByIdCheckItem(requestParameters.idChecklist, requestParameters.idCheckItem, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getChecklistsCardsByIdChecklist()
         * @param {ChecklistApiListCardsByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCardsByIdChecklist(requestParameters: ChecklistApiListCardsByIdChecklistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCardsByIdChecklist(requestParameters.idChecklist, requestParameters.actions, requestParameters.attachments, requestParameters.attachmentFields, requestParameters.stickers, requestParameters.members, requestParameters.memberFields, requestParameters.checkItemStates, requestParameters.checklists, requestParameters.limit, requestParameters.since, requestParameters.before, requestParameters.filter, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteChecklistsByIdChecklist()
         * @param {ChecklistApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: ChecklistApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.idChecklist, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteChecklistsCheckItemsByIdChecklistByIdCheckItem()
         * @param {ChecklistApiRemoveByIdCheckItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeByIdCheckItem(requestParameters: ChecklistApiRemoveByIdCheckItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeByIdCheckItem(requestParameters.idChecklist, requestParameters.idCheckItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateChecklistsByIdChecklist()
         * @param {ChecklistApiUpdateByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByIdChecklist(requestParameters: ChecklistApiUpdateByIdChecklistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const checklists: Checklists = {
                idBoard: requestParameters.idBoard,
                idCard: requestParameters.idCard,
                idChecklistSource: requestParameters.idChecklistSource,
                name: requestParameters.name,
                pos: requestParameters.pos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByIdChecklist(requestParameters.idChecklist, checklists, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateChecklistsIdCardByIdChecklist()
         * @param {ChecklistApiUpdateIdCardByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIdCardByIdChecklist(requestParameters: ChecklistApiUpdateIdCardByIdChecklistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const checklistsIdCard: ChecklistsIdCard = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIdCardByIdChecklist(requestParameters.idChecklist, checklistsIdCard, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateChecklistsNameByIdChecklist()
         * @param {ChecklistApiUpdateNameByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNameByIdChecklist(requestParameters: ChecklistApiUpdateNameByIdChecklistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const checklistsName: ChecklistsName = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNameByIdChecklist(requestParameters.idChecklist, checklistsName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateChecklistsPosByIdChecklist()
         * @param {ChecklistApiUpdatePosByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePosByIdChecklist(requestParameters: ChecklistApiUpdatePosByIdChecklistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const checklistsPos: ChecklistsPos = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePosByIdChecklist(requestParameters.idChecklist, checklistsPos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChecklistApi - factory interface
 * @export
 */
export const ChecklistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChecklistApiFp(configuration)
    return {
        /**
         * 
         * @summary addChecklistsCheckItemsByIdChecklist()
         * @param {ChecklistApiAddCheckItemsByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCheckItemsByIdChecklist(requestParameters: ChecklistApiAddCheckItemsByIdChecklistRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addCheckItemsByIdChecklist(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addChecklists()
         * @param {ChecklistApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: ChecklistApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getChecklistsBoardByIdChecklist()
         * @param {ChecklistApiGetBoardByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdChecklist(requestParameters: ChecklistApiGetBoardByIdChecklistRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardByIdChecklist(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getChecklistsBoardByIdChecklistByField()
         * @param {ChecklistApiGetBoardByIdChecklistByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdChecklistByField(requestParameters: ChecklistApiGetBoardByIdChecklistByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardByIdChecklistByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getChecklistsByIdChecklist()
         * @param {ChecklistApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ChecklistApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getChecklistsByIdChecklistByField()
         * @param {ChecklistApiGetByIdFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdField(requestParameters: ChecklistApiGetByIdFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getByIdField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getChecklistsCardsByIdChecklistByFilter()
         * @param {ChecklistApiGetCardsByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByFilter(requestParameters: ChecklistApiGetCardsByFilterRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCardsByFilter(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getChecklistsCheckItemsByIdChecklist()
         * @param {ChecklistApiGetCheckItemsByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckItemsByIdChecklist(requestParameters: ChecklistApiGetCheckItemsByIdChecklistRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCheckItemsByIdChecklist(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getChecklistsCheckItemsByIdChecklistByIdCheckItem()
         * @param {ChecklistApiGetCheckItemsByIdChecklistByIdCheckItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckItemsByIdChecklistByIdCheckItem(requestParameters: ChecklistApiGetCheckItemsByIdChecklistByIdCheckItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCheckItemsByIdChecklistByIdCheckItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getChecklistsCardsByIdChecklist()
         * @param {ChecklistApiListCardsByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCardsByIdChecklist(requestParameters: ChecklistApiListCardsByIdChecklistRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listCardsByIdChecklist(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteChecklistsByIdChecklist()
         * @param {ChecklistApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: ChecklistApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteChecklistsCheckItemsByIdChecklistByIdCheckItem()
         * @param {ChecklistApiRemoveByIdCheckItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByIdCheckItem(requestParameters: ChecklistApiRemoveByIdCheckItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeByIdCheckItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateChecklistsByIdChecklist()
         * @param {ChecklistApiUpdateByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdChecklist(requestParameters: ChecklistApiUpdateByIdChecklistRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateByIdChecklist(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateChecklistsIdCardByIdChecklist()
         * @param {ChecklistApiUpdateIdCardByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdCardByIdChecklist(requestParameters: ChecklistApiUpdateIdCardByIdChecklistRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateIdCardByIdChecklist(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateChecklistsNameByIdChecklist()
         * @param {ChecklistApiUpdateNameByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNameByIdChecklist(requestParameters: ChecklistApiUpdateNameByIdChecklistRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateNameByIdChecklist(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateChecklistsPosByIdChecklist()
         * @param {ChecklistApiUpdatePosByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePosByIdChecklist(requestParameters: ChecklistApiUpdatePosByIdChecklistRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePosByIdChecklist(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCheckItemsByIdChecklist operation in ChecklistApi.
 * @export
 * @interface ChecklistApiAddCheckItemsByIdChecklistRequest
 */
export type ChecklistApiAddCheckItemsByIdChecklistRequest = {
    
    /**
    * idChecklist
    * @type {string}
    * @memberof ChecklistApiAddCheckItemsByIdChecklist
    */
    readonly idChecklist: string
    
} & ChecklistsCheckItems

/**
 * Request parameters for create operation in ChecklistApi.
 * @export
 * @interface ChecklistApiCreateRequest
 */
export type ChecklistApiCreateRequest = {
    
} & Checklists

/**
 * Request parameters for getBoardByIdChecklist operation in ChecklistApi.
 * @export
 * @interface ChecklistApiGetBoardByIdChecklistRequest
 */
export type ChecklistApiGetBoardByIdChecklistRequest = {
    
    /**
    * idChecklist
    * @type {string}
    * @memberof ChecklistApiGetBoardByIdChecklist
    */
    readonly idChecklist: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof ChecklistApiGetBoardByIdChecklist
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getBoardByIdChecklistByField operation in ChecklistApi.
 * @export
 * @interface ChecklistApiGetBoardByIdChecklistByFieldRequest
 */
export type ChecklistApiGetBoardByIdChecklistByFieldRequest = {
    
    /**
    * idChecklist
    * @type {string}
    * @memberof ChecklistApiGetBoardByIdChecklistByField
    */
    readonly idChecklist: string
    
    /**
    * field
    * @type {string}
    * @memberof ChecklistApiGetBoardByIdChecklistByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getById operation in ChecklistApi.
 * @export
 * @interface ChecklistApiGetByIdRequest
 */
export type ChecklistApiGetByIdRequest = {
    
    /**
    * idChecklist
    * @type {string}
    * @memberof ChecklistApiGetById
    */
    readonly idChecklist: string
    
    /**
    * One of: all, closed, none, open or visible
    * @type {string}
    * @memberof ChecklistApiGetById
    */
    readonly cards?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof ChecklistApiGetById
    */
    readonly cardFields?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof ChecklistApiGetById
    */
    readonly checkItems?: string
    
    /**
    * all or a comma-separated list of: name, nameData, pos, state or type
    * @type {string}
    * @memberof ChecklistApiGetById
    */
    readonly checkItemFields?: string
    
    /**
    * all or a comma-separated list of: idBoard, idCard, name or pos
    * @type {string}
    * @memberof ChecklistApiGetById
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getByIdField operation in ChecklistApi.
 * @export
 * @interface ChecklistApiGetByIdFieldRequest
 */
export type ChecklistApiGetByIdFieldRequest = {
    
    /**
    * idChecklist
    * @type {string}
    * @memberof ChecklistApiGetByIdField
    */
    readonly idChecklist: string
    
    /**
    * field
    * @type {string}
    * @memberof ChecklistApiGetByIdField
    */
    readonly field: string
    
}

/**
 * Request parameters for getCardsByFilter operation in ChecklistApi.
 * @export
 * @interface ChecklistApiGetCardsByFilterRequest
 */
export type ChecklistApiGetCardsByFilterRequest = {
    
    /**
    * idChecklist
    * @type {string}
    * @memberof ChecklistApiGetCardsByFilter
    */
    readonly idChecklist: string
    
    /**
    * filter
    * @type {string}
    * @memberof ChecklistApiGetCardsByFilter
    */
    readonly filter: string
    
}

/**
 * Request parameters for getCheckItemsByIdChecklist operation in ChecklistApi.
 * @export
 * @interface ChecklistApiGetCheckItemsByIdChecklistRequest
 */
export type ChecklistApiGetCheckItemsByIdChecklistRequest = {
    
    /**
    * idChecklist
    * @type {string}
    * @memberof ChecklistApiGetCheckItemsByIdChecklist
    */
    readonly idChecklist: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof ChecklistApiGetCheckItemsByIdChecklist
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: name, nameData, pos, state or type
    * @type {string}
    * @memberof ChecklistApiGetCheckItemsByIdChecklist
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getCheckItemsByIdChecklistByIdCheckItem operation in ChecklistApi.
 * @export
 * @interface ChecklistApiGetCheckItemsByIdChecklistByIdCheckItemRequest
 */
export type ChecklistApiGetCheckItemsByIdChecklistByIdCheckItemRequest = {
    
    /**
    * idChecklist
    * @type {string}
    * @memberof ChecklistApiGetCheckItemsByIdChecklistByIdCheckItem
    */
    readonly idChecklist: string
    
    /**
    * idCheckItem
    * @type {string}
    * @memberof ChecklistApiGetCheckItemsByIdChecklistByIdCheckItem
    */
    readonly idCheckItem: string
    
    /**
    * all or a comma-separated list of: name, nameData, pos, state or type
    * @type {string}
    * @memberof ChecklistApiGetCheckItemsByIdChecklistByIdCheckItem
    */
    readonly fields?: string
    
}

/**
 * Request parameters for listCardsByIdChecklist operation in ChecklistApi.
 * @export
 * @interface ChecklistApiListCardsByIdChecklistRequest
 */
export type ChecklistApiListCardsByIdChecklistRequest = {
    
    /**
    * idChecklist
    * @type {string}
    * @memberof ChecklistApiListCardsByIdChecklist
    */
    readonly idChecklist: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof ChecklistApiListCardsByIdChecklist
    */
    readonly actions?: string
    
    /**
    * A boolean value or &quot;cover&quot; for only card cover attachments
    * @type {string}
    * @memberof ChecklistApiListCardsByIdChecklist
    */
    readonly attachments?: string
    
    /**
    * all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    * @type {string}
    * @memberof ChecklistApiListCardsByIdChecklist
    */
    readonly attachmentFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof ChecklistApiListCardsByIdChecklist
    */
    readonly stickers?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof ChecklistApiListCardsByIdChecklist
    */
    readonly members?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof ChecklistApiListCardsByIdChecklist
    */
    readonly memberFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof ChecklistApiListCardsByIdChecklist
    */
    readonly checkItemStates?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof ChecklistApiListCardsByIdChecklist
    */
    readonly checklists?: string
    
    /**
    * a number from 1 to 1000
    * @type {string}
    * @memberof ChecklistApiListCardsByIdChecklist
    */
    readonly limit?: string
    
    /**
    * A date, or null
    * @type {string}
    * @memberof ChecklistApiListCardsByIdChecklist
    */
    readonly since?: string
    
    /**
    * A date, or null
    * @type {string}
    * @memberof ChecklistApiListCardsByIdChecklist
    */
    readonly before?: string
    
    /**
    * One of: all, closed, none or open
    * @type {string}
    * @memberof ChecklistApiListCardsByIdChecklist
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof ChecklistApiListCardsByIdChecklist
    */
    readonly fields?: string
    
}

/**
 * Request parameters for removeById operation in ChecklistApi.
 * @export
 * @interface ChecklistApiRemoveByIdRequest
 */
export type ChecklistApiRemoveByIdRequest = {
    
    /**
    * idChecklist
    * @type {string}
    * @memberof ChecklistApiRemoveById
    */
    readonly idChecklist: string
    
}

/**
 * Request parameters for removeByIdCheckItem operation in ChecklistApi.
 * @export
 * @interface ChecklistApiRemoveByIdCheckItemRequest
 */
export type ChecklistApiRemoveByIdCheckItemRequest = {
    
    /**
    * idChecklist
    * @type {string}
    * @memberof ChecklistApiRemoveByIdCheckItem
    */
    readonly idChecklist: string
    
    /**
    * idCheckItem
    * @type {string}
    * @memberof ChecklistApiRemoveByIdCheckItem
    */
    readonly idCheckItem: string
    
}

/**
 * Request parameters for updateByIdChecklist operation in ChecklistApi.
 * @export
 * @interface ChecklistApiUpdateByIdChecklistRequest
 */
export type ChecklistApiUpdateByIdChecklistRequest = {
    
    /**
    * idChecklist
    * @type {string}
    * @memberof ChecklistApiUpdateByIdChecklist
    */
    readonly idChecklist: string
    
} & Checklists

/**
 * Request parameters for updateIdCardByIdChecklist operation in ChecklistApi.
 * @export
 * @interface ChecklistApiUpdateIdCardByIdChecklistRequest
 */
export type ChecklistApiUpdateIdCardByIdChecklistRequest = {
    
    /**
    * idChecklist
    * @type {string}
    * @memberof ChecklistApiUpdateIdCardByIdChecklist
    */
    readonly idChecklist: string
    
} & ChecklistsIdCard

/**
 * Request parameters for updateNameByIdChecklist operation in ChecklistApi.
 * @export
 * @interface ChecklistApiUpdateNameByIdChecklistRequest
 */
export type ChecklistApiUpdateNameByIdChecklistRequest = {
    
    /**
    * idChecklist
    * @type {string}
    * @memberof ChecklistApiUpdateNameByIdChecklist
    */
    readonly idChecklist: string
    
} & ChecklistsName

/**
 * Request parameters for updatePosByIdChecklist operation in ChecklistApi.
 * @export
 * @interface ChecklistApiUpdatePosByIdChecklistRequest
 */
export type ChecklistApiUpdatePosByIdChecklistRequest = {
    
    /**
    * idChecklist
    * @type {string}
    * @memberof ChecklistApiUpdatePosByIdChecklist
    */
    readonly idChecklist: string
    
} & ChecklistsPos

/**
 * ChecklistApiGenerated - object-oriented interface
 * @export
 * @class ChecklistApiGenerated
 * @extends {BaseAPI}
 */
export class ChecklistApiGenerated extends BaseAPI {
    /**
     * 
     * @summary addChecklistsCheckItemsByIdChecklist()
     * @param {ChecklistApiAddCheckItemsByIdChecklistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApiGenerated
     */
    public addCheckItemsByIdChecklist(requestParameters: ChecklistApiAddCheckItemsByIdChecklistRequest, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).addCheckItemsByIdChecklist(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addChecklists()
     * @param {ChecklistApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApiGenerated
     */
    public create(requestParameters: ChecklistApiCreateRequest, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getChecklistsBoardByIdChecklist()
     * @param {ChecklistApiGetBoardByIdChecklistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApiGenerated
     */
    public getBoardByIdChecklist(requestParameters: ChecklistApiGetBoardByIdChecklistRequest, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).getBoardByIdChecklist(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getChecklistsBoardByIdChecklistByField()
     * @param {ChecklistApiGetBoardByIdChecklistByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApiGenerated
     */
    public getBoardByIdChecklistByField(requestParameters: ChecklistApiGetBoardByIdChecklistByFieldRequest, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).getBoardByIdChecklistByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getChecklistsByIdChecklist()
     * @param {ChecklistApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApiGenerated
     */
    public getById(requestParameters: ChecklistApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getChecklistsByIdChecklistByField()
     * @param {ChecklistApiGetByIdFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApiGenerated
     */
    public getByIdField(requestParameters: ChecklistApiGetByIdFieldRequest, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).getByIdField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getChecklistsCardsByIdChecklistByFilter()
     * @param {ChecklistApiGetCardsByFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApiGenerated
     */
    public getCardsByFilter(requestParameters: ChecklistApiGetCardsByFilterRequest, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).getCardsByFilter(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getChecklistsCheckItemsByIdChecklist()
     * @param {ChecklistApiGetCheckItemsByIdChecklistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApiGenerated
     */
    public getCheckItemsByIdChecklist(requestParameters: ChecklistApiGetCheckItemsByIdChecklistRequest, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).getCheckItemsByIdChecklist(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getChecklistsCheckItemsByIdChecklistByIdCheckItem()
     * @param {ChecklistApiGetCheckItemsByIdChecklistByIdCheckItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApiGenerated
     */
    public getCheckItemsByIdChecklistByIdCheckItem(requestParameters: ChecklistApiGetCheckItemsByIdChecklistByIdCheckItemRequest, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).getCheckItemsByIdChecklistByIdCheckItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getChecklistsCardsByIdChecklist()
     * @param {ChecklistApiListCardsByIdChecklistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApiGenerated
     */
    public listCardsByIdChecklist(requestParameters: ChecklistApiListCardsByIdChecklistRequest, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).listCardsByIdChecklist(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteChecklistsByIdChecklist()
     * @param {ChecklistApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApiGenerated
     */
    public removeById(requestParameters: ChecklistApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteChecklistsCheckItemsByIdChecklistByIdCheckItem()
     * @param {ChecklistApiRemoveByIdCheckItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApiGenerated
     */
    public removeByIdCheckItem(requestParameters: ChecklistApiRemoveByIdCheckItemRequest, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).removeByIdCheckItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateChecklistsByIdChecklist()
     * @param {ChecklistApiUpdateByIdChecklistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApiGenerated
     */
    public updateByIdChecklist(requestParameters: ChecklistApiUpdateByIdChecklistRequest, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).updateByIdChecklist(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateChecklistsIdCardByIdChecklist()
     * @param {ChecklistApiUpdateIdCardByIdChecklistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApiGenerated
     */
    public updateIdCardByIdChecklist(requestParameters: ChecklistApiUpdateIdCardByIdChecklistRequest, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).updateIdCardByIdChecklist(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateChecklistsNameByIdChecklist()
     * @param {ChecklistApiUpdateNameByIdChecklistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApiGenerated
     */
    public updateNameByIdChecklist(requestParameters: ChecklistApiUpdateNameByIdChecklistRequest, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).updateNameByIdChecklist(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateChecklistsPosByIdChecklist()
     * @param {ChecklistApiUpdatePosByIdChecklistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChecklistApiGenerated
     */
    public updatePosByIdChecklist(requestParameters: ChecklistApiUpdatePosByIdChecklistRequest, options?: AxiosRequestConfig) {
        return ChecklistApiFp(this.configuration).updatePosByIdChecklist(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
