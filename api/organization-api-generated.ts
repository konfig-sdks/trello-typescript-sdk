/* tslint:disable */
/* eslint-disable */
/*
Trello

This document describes the REST API of Trello as published by Trello.com.
 - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>
 - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Organizations } from '../models';
// @ts-ignore
import { OrganizationsDesc } from '../models';
// @ts-ignore
import { OrganizationsDisplayName } from '../models';
// @ts-ignore
import { OrganizationsLogo } from '../models';
// @ts-ignore
import { OrganizationsMembers } from '../models';
// @ts-ignore
import { OrganizationsMembersDeactivated } from '../models';
// @ts-ignore
import { OrganizationsMemberships } from '../models';
// @ts-ignore
import { OrganizationsName } from '../models';
// @ts-ignore
import { OrganizationsWebsite } from '../models';
// @ts-ignore
import { PrefsAssociatedDomain } from '../models';
// @ts-ignore
import { PrefsBoardVisibilityRestrict } from '../models';
// @ts-ignore
import { PrefsExternalMembersDisabled } from '../models';
// @ts-ignore
import { PrefsGoogleAppsVersion } from '../models';
// @ts-ignore
import { PrefsOrgInviteRestrict } from '../models';
// @ts-ignore
import { PrefsPermissionLevel } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export const OrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addOrganizations()
         * @param {Organizations} organizations Attributes of \&quot;Organizations\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (organizations: Organizations, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizations' is not null or undefined
            assertParamExists('create', 'organizations', organizations)
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizations,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizations, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteOrganizationsPrefsAssociatedDomainByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrefsAssociatedDomainByIdOrg: async (idOrg: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('deletePrefsAssociatedDomainByIdOrg', 'idOrg', idOrg)
            const localVarPath = `/organizations/{idOrg}/prefs/associatedDomain`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/prefs/associatedDomain',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOrganizationsActionsByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {string} [entities]  true or false
         * @param {string} [display]  true or false
         * @param {string} [filter] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [fields] all or a comma-separated list of: data, date, idMemberCreator or type
         * @param {string} [limit] a number from 0 to 1000
         * @param {string} [format] One of: count, list or minimal
         * @param {string} [since] A date, null or lastView
         * @param {string} [before] A date, or null
         * @param {string} [page] Page * limit must be less than 1000
         * @param {string} [idModels] Only return actions related to these model ids
         * @param {string} [member]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [memberCreator]  true or false
         * @param {string} [memberCreatorFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActionsByIdOrg: async (idOrg: string, entities?: string, display?: string, filter?: string, fields?: string, limit?: string, format?: string, since?: string, before?: string, page?: string, idModels?: string, member?: string, memberFields?: string, memberCreator?: string, memberCreatorFields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('getActionsByIdOrg', 'idOrg', idOrg)
            const localVarPath = `/organizations/{idOrg}/actions`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (entities !== undefined) {
                localVarQueryParameter['entities'] = entities;
            }

            if (display !== undefined) {
                localVarQueryParameter['display'] = display;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (idModels !== undefined) {
                localVarQueryParameter['idModels'] = idModels;
            }

            if (member !== undefined) {
                localVarQueryParameter['member'] = member;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (memberCreator !== undefined) {
                localVarQueryParameter['memberCreator'] = memberCreator;
            }

            if (memberCreatorFields !== undefined) {
                localVarQueryParameter['memberCreator_fields'] = memberCreatorFields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/actions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOrganizationsBoardsByIdOrgByFilter()
         * @param {string} idOrg idOrg or name
         * @param {string} filter filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardsByIdOrgByFilter: async (idOrg: string, filter: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('getBoardsByIdOrgByFilter', 'idOrg', idOrg)
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('getBoardsByIdOrgByFilter', 'filter', filter)
            const localVarPath = `/organizations/{idOrg}/boards/{filter}`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)))
                .replace(`{${"filter"}}`, encodeURIComponent(String(filter !== undefined ? filter : `-filter-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/boards/{filter}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOrganizationsBoardsByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {string} [filter] all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
         * @param {string} [fields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {string} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [actionsEntities]  true or false
         * @param {string} [actionsLimit] a number from 0 to 1000
         * @param {string} [actionsFormat] One of: count, list or minimal
         * @param {string} [actionsSince] A date, null or lastView
         * @param {string} [actionFields] all or a comma-separated list of: data, date, idMemberCreator or type
         * @param {string} [memberships] all or a comma-separated list of: active, admin, deactivated, me or normal
         * @param {string} [organization]  true or false
         * @param {string} [organizationFields] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
         * @param {string} [lists] One of: all, closed, none or open
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardsByOrgId: async (idOrg: string, filter?: string, fields?: string, actions?: string, actionsEntities?: string, actionsLimit?: string, actionsFormat?: string, actionsSince?: string, actionFields?: string, memberships?: string, organization?: string, organizationFields?: string, lists?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('getBoardsByOrgId', 'idOrg', idOrg)
            const localVarPath = `/organizations/{idOrg}/boards`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (actions !== undefined) {
                localVarQueryParameter['actions'] = actions;
            }

            if (actionsEntities !== undefined) {
                localVarQueryParameter['actions_entities'] = actionsEntities;
            }

            if (actionsLimit !== undefined) {
                localVarQueryParameter['actions_limit'] = actionsLimit;
            }

            if (actionsFormat !== undefined) {
                localVarQueryParameter['actions_format'] = actionsFormat;
            }

            if (actionsSince !== undefined) {
                localVarQueryParameter['actions_since'] = actionsSince;
            }

            if (actionFields !== undefined) {
                localVarQueryParameter['action_fields'] = actionFields;
            }

            if (memberships !== undefined) {
                localVarQueryParameter['memberships'] = memberships;
            }

            if (organization !== undefined) {
                localVarQueryParameter['organization'] = organization;
            }

            if (organizationFields !== undefined) {
                localVarQueryParameter['organization_fields'] = organizationFields;
            }

            if (lists !== undefined) {
                localVarQueryParameter['lists'] = lists;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/boards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOrganizationsByIdOrgByField()
         * @param {string} idOrg idOrg or name
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdAndField: async (idOrg: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('getByIdAndField', 'idOrg', idOrg)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getByIdAndField', 'field', field)
            const localVarPath = `/organizations/{idOrg}/{field}`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOrganizationsByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {string} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [actionsEntities]  true or false
         * @param {string} [actionsDisplay]  true or false
         * @param {string} [actionsLimit] a number from 0 to 1000
         * @param {string} [actionFields] all or a comma-separated list of: data, date, idMemberCreator or type
         * @param {string} [memberships] all or a comma-separated list of: active, admin, deactivated, me or normal
         * @param {string} [membershipsMember]  true or false
         * @param {string} [membershipsMemberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [members] One of: admins, all, none, normal or owners
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [memberActivity] true or false ; works for premium organizations only.
         * @param {string} [membersInvited] One of: admins, all, none, normal or owners
         * @param {string} [membersInvitedFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [boards] all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
         * @param {string} [boardFields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {string} [boardActions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [boardActionsEntities]  true or false
         * @param {string} [boardActionsDisplay]  true or false
         * @param {string} [boardActionsFormat] One of: count, list or minimal
         * @param {string} [boardActionsSince] A date, null or lastView
         * @param {string} [boardActionsLimit] a number from 0 to 1000
         * @param {string} [boardActionFields] all or a comma-separated list of: data, date, idMemberCreator or type
         * @param {string} [boardLists] One of: all, closed, none or open
         * @param {string} [paidAccount]  true or false
         * @param {string} [fields] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdOrg: async (idOrg: string, actions?: string, actionsEntities?: string, actionsDisplay?: string, actionsLimit?: string, actionFields?: string, memberships?: string, membershipsMember?: string, membershipsMemberFields?: string, members?: string, memberFields?: string, memberActivity?: string, membersInvited?: string, membersInvitedFields?: string, boards?: string, boardFields?: string, boardActions?: string, boardActionsEntities?: string, boardActionsDisplay?: string, boardActionsFormat?: string, boardActionsSince?: string, boardActionsLimit?: string, boardActionFields?: string, boardLists?: string, paidAccount?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('getByIdOrg', 'idOrg', idOrg)
            const localVarPath = `/organizations/{idOrg}`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (actions !== undefined) {
                localVarQueryParameter['actions'] = actions;
            }

            if (actionsEntities !== undefined) {
                localVarQueryParameter['actions_entities'] = actionsEntities;
            }

            if (actionsDisplay !== undefined) {
                localVarQueryParameter['actions_display'] = actionsDisplay;
            }

            if (actionsLimit !== undefined) {
                localVarQueryParameter['actions_limit'] = actionsLimit;
            }

            if (actionFields !== undefined) {
                localVarQueryParameter['action_fields'] = actionFields;
            }

            if (memberships !== undefined) {
                localVarQueryParameter['memberships'] = memberships;
            }

            if (membershipsMember !== undefined) {
                localVarQueryParameter['memberships_member'] = membershipsMember;
            }

            if (membershipsMemberFields !== undefined) {
                localVarQueryParameter['memberships_member_fields'] = membershipsMemberFields;
            }

            if (members !== undefined) {
                localVarQueryParameter['members'] = members;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (memberActivity !== undefined) {
                localVarQueryParameter['member_activity'] = memberActivity;
            }

            if (membersInvited !== undefined) {
                localVarQueryParameter['membersInvited'] = membersInvited;
            }

            if (membersInvitedFields !== undefined) {
                localVarQueryParameter['membersInvited_fields'] = membersInvitedFields;
            }

            if (boards !== undefined) {
                localVarQueryParameter['boards'] = boards;
            }

            if (boardFields !== undefined) {
                localVarQueryParameter['board_fields'] = boardFields;
            }

            if (boardActions !== undefined) {
                localVarQueryParameter['board_actions'] = boardActions;
            }

            if (boardActionsEntities !== undefined) {
                localVarQueryParameter['board_actions_entities'] = boardActionsEntities;
            }

            if (boardActionsDisplay !== undefined) {
                localVarQueryParameter['board_actions_display'] = boardActionsDisplay;
            }

            if (boardActionsFormat !== undefined) {
                localVarQueryParameter['board_actions_format'] = boardActionsFormat;
            }

            if (boardActionsSince !== undefined) {
                localVarQueryParameter['board_actions_since'] = boardActionsSince;
            }

            if (boardActionsLimit !== undefined) {
                localVarQueryParameter['board_actions_limit'] = boardActionsLimit;
            }

            if (boardActionFields !== undefined) {
                localVarQueryParameter['board_action_fields'] = boardActionFields;
            }

            if (boardLists !== undefined) {
                localVarQueryParameter['board_lists'] = boardLists;
            }

            if (paidAccount !== undefined) {
                localVarQueryParameter['paid_account'] = paidAccount;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOrganizationsMembersByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {string} [filter] One of: admins, all, none, normal or owners
         * @param {string} [fields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [activity] true or false ; works for premium organizations only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersByIdOrg: async (idOrg: string, filter?: string, fields?: string, activity?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('getMembersByIdOrg', 'idOrg', idOrg)
            const localVarPath = `/organizations/{idOrg}/members`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (activity !== undefined) {
                localVarQueryParameter['activity'] = activity;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/members',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOrganizationsMembersInvitedByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {string} [fields] all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersInvitedByIdOrg: async (idOrg: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('getMembersInvitedByIdOrg', 'idOrg', idOrg)
            const localVarPath = `/organizations/{idOrg}/membersInvited`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/membersInvited',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOrganizationsMembersInvitedByIdOrgByField()
         * @param {string} idOrg idOrg or name
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersInvitedByIdOrgByField: async (idOrg: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('getMembersInvitedByIdOrgByField', 'idOrg', idOrg)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getMembersInvitedByIdOrgByField', 'field', field)
            const localVarPath = `/organizations/{idOrg}/membersInvited/{field}`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/membersInvited/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOrganizationsMembershipsByIdOrgByIdMembership()
         * @param {string} idOrg idOrg or name
         * @param {string} idMembership idMembership
         * @param {string} [member]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembershipsByIdOrgByIdMembership: async (idOrg: string, idMembership: string, member?: string, memberFields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('getMembershipsByIdOrgByIdMembership', 'idOrg', idOrg)
            // verify required parameter 'idMembership' is not null or undefined
            assertParamExists('getMembershipsByIdOrgByIdMembership', 'idMembership', idMembership)
            const localVarPath = `/organizations/{idOrg}/memberships/{idMembership}`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)))
                .replace(`{${"idMembership"}}`, encodeURIComponent(String(idMembership !== undefined ? idMembership : `-idMembership-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (member !== undefined) {
                localVarQueryParameter['member'] = member;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/memberships/{idMembership}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOrganizationsDeltasByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {string} tags A valid tag for subscribing
         * @param {string} ixLastUpdate a number from -1 to Infinity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationDeltas: async (idOrg: string, tags: string, ixLastUpdate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('getOrganizationDeltas', 'idOrg', idOrg)
            // verify required parameter 'tags' is not null or undefined
            assertParamExists('getOrganizationDeltas', 'tags', tags)
            // verify required parameter 'ixLastUpdate' is not null or undefined
            assertParamExists('getOrganizationDeltas', 'ixLastUpdate', ixLastUpdate)
            const localVarPath = `/organizations/{idOrg}/deltas`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (ixLastUpdate !== undefined) {
                localVarQueryParameter['ixLastUpdate'] = ixLastUpdate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/deltas',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOrganizationsMembersByIdOrgByFilter()
         * @param {string} idOrg idOrg or name
         * @param {string} filter filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembersByIdOrgByFilter: async (idOrg: string, filter: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('listMembersByIdOrgByFilter', 'idOrg', idOrg)
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('listMembersByIdOrgByFilter', 'filter', filter)
            const localVarPath = `/organizations/{idOrg}/members/{filter}`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)))
                .replace(`{${"filter"}}`, encodeURIComponent(String(filter !== undefined ? filter : `-filter-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/members/{filter}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOrganizationsMembersCardsByIdOrgByIdMember()
         * @param {string} idOrg idOrg or name
         * @param {string} idMember idMember
         * @param {string} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [attachments] A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments
         * @param {string} [attachmentFields] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
         * @param {string} [members]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [checkItemStates]  true or false
         * @param {string} [checklists] One of: all or none
         * @param {string} [board]  true or false
         * @param {string} [boardFields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {string} [list]  true or false
         * @param {string} [listFields] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
         * @param {string} [filter] One of: all, closed, none, open or visible
         * @param {string} [fields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembersCardsByIdOrgByIdMember: async (idOrg: string, idMember: string, actions?: string, attachments?: string, attachmentFields?: string, members?: string, memberFields?: string, checkItemStates?: string, checklists?: string, board?: string, boardFields?: string, list?: string, listFields?: string, filter?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('listMembersCardsByIdOrgByIdMember', 'idOrg', idOrg)
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('listMembersCardsByIdOrgByIdMember', 'idMember', idMember)
            const localVarPath = `/organizations/{idOrg}/members/{idMember}/cards`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)))
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (actions !== undefined) {
                localVarQueryParameter['actions'] = actions;
            }

            if (attachments !== undefined) {
                localVarQueryParameter['attachments'] = attachments;
            }

            if (attachmentFields !== undefined) {
                localVarQueryParameter['attachment_fields'] = attachmentFields;
            }

            if (members !== undefined) {
                localVarQueryParameter['members'] = members;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (checkItemStates !== undefined) {
                localVarQueryParameter['checkItemStates'] = checkItemStates;
            }

            if (checklists !== undefined) {
                localVarQueryParameter['checklists'] = checklists;
            }

            if (board !== undefined) {
                localVarQueryParameter['board'] = board;
            }

            if (boardFields !== undefined) {
                localVarQueryParameter['board_fields'] = boardFields;
            }

            if (list !== undefined) {
                localVarQueryParameter['list'] = list;
            }

            if (listFields !== undefined) {
                localVarQueryParameter['list_fields'] = listFields;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/members/{idMember}/cards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOrganizationsMembershipsByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {string} [filter] all or a comma-separated list of: active, admin, deactivated, me or normal
         * @param {string} [member]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipsByIdOrg: async (idOrg: string, filter?: string, member?: string, memberFields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('listMembershipsByIdOrg', 'idOrg', idOrg)
            const localVarPath = `/organizations/{idOrg}/memberships`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (member !== undefined) {
                localVarQueryParameter['member'] = member;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/memberships',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteOrganizationsByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByIdOrg: async (idOrg: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('removeByIdOrg', 'idOrg', idOrg)
            const localVarPath = `/organizations/{idOrg}`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteOrganizationsPrefsOrgInviteRestrictByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {string} value An email address with optional expansion tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeInviteRestrictByIdOrg: async (idOrg: string, value: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('removeInviteRestrictByIdOrg', 'idOrg', idOrg)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('removeInviteRestrictByIdOrg', 'value', value)
            const localVarPath = `/organizations/{idOrg}/prefs/orgInviteRestrict`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/prefs/orgInviteRestrict',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteOrganizationsLogoByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLogoByIdOrg: async (idOrg: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('removeLogoByIdOrg', 'idOrg', idOrg)
            const localVarPath = `/organizations/{idOrg}/logo`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/logo',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteOrganizationsMembersAllByIdOrgByIdMember()
         * @param {string} idOrg idOrg or name
         * @param {string} idMember idMember
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMemberAll: async (idOrg: string, idMember: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('removeMemberAll', 'idOrg', idOrg)
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('removeMemberAll', 'idMember', idMember)
            const localVarPath = `/organizations/{idOrg}/members/{idMember}/all`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)))
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/members/{idMember}/all',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteOrganizationsMembersByIdOrgByIdMember()
         * @param {string} idOrg idOrg or name
         * @param {string} idMember idMember
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMemberByIdOrgByIdMember: async (idOrg: string, idMember: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('removeMemberByIdOrgByIdMember', 'idOrg', idOrg)
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('removeMemberByIdOrgByIdMember', 'idMember', idMember)
            const localVarPath = `/organizations/{idOrg}/members/{idMember}`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)))
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/members/{idMember}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {Organizations} organizations Attributes of \&quot;Organizations\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdOrg: async (idOrg: string, organizations: Organizations, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updateByIdOrg', 'idOrg', idOrg)
            // verify required parameter 'organizations' is not null or undefined
            assertParamExists('updateByIdOrg', 'organizations', organizations)
            const localVarPath = `/organizations/{idOrg}`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizations,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizations, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsDescByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {OrganizationsDesc} organizationsDesc Attributes of \&quot;Organizations Desc\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDescriptionByIdOrg: async (idOrg: string, organizationsDesc: OrganizationsDesc, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updateDescriptionByIdOrg', 'idOrg', idOrg)
            // verify required parameter 'organizationsDesc' is not null or undefined
            assertParamExists('updateDescriptionByIdOrg', 'organizationsDesc', organizationsDesc)
            const localVarPath = `/organizations/{idOrg}/desc`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationsDesc,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/desc',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationsDesc, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsDisplayNameByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {OrganizationsDisplayName} organizationsDisplayName Attributes of \&quot;Organizations Display Name\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDisplayNameByIdOrg: async (idOrg: string, organizationsDisplayName: OrganizationsDisplayName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updateDisplayNameByIdOrg', 'idOrg', idOrg)
            // verify required parameter 'organizationsDisplayName' is not null or undefined
            assertParamExists('updateDisplayNameByIdOrg', 'organizationsDisplayName', organizationsDisplayName)
            const localVarPath = `/organizations/{idOrg}/displayName`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationsDisplayName,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/displayName',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationsDisplayName, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsMembersByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {OrganizationsMembers} organizationsMembers Attributes of \&quot;Organizations Members\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembersByIdOrg: async (idOrg: string, organizationsMembers: OrganizationsMembers, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updateMembersByIdOrg', 'idOrg', idOrg)
            // verify required parameter 'organizationsMembers' is not null or undefined
            assertParamExists('updateMembersByIdOrg', 'organizationsMembers', organizationsMembers)
            const localVarPath = `/organizations/{idOrg}/members`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationsMembers,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/members',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationsMembers, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsMembersByIdOrgByIdMember()
         * @param {string} idOrg idOrg or name
         * @param {string} idMember idMember
         * @param {OrganizationsMembers} organizationsMembers Attributes of \&quot;Organizations Members\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembersByIdOrgByIdMember: async (idOrg: string, idMember: string, organizationsMembers: OrganizationsMembers, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updateMembersByIdOrgByIdMember', 'idOrg', idOrg)
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateMembersByIdOrgByIdMember', 'idMember', idMember)
            // verify required parameter 'organizationsMembers' is not null or undefined
            assertParamExists('updateMembersByIdOrgByIdMember', 'organizationsMembers', organizationsMembers)
            const localVarPath = `/organizations/{idOrg}/members/{idMember}`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)))
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationsMembers,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/members/{idMember}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationsMembers, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsMembersDeactivatedByIdOrgByIdMember()
         * @param {string} idOrg idOrg or name
         * @param {string} idMember idMember
         * @param {OrganizationsMembersDeactivated} organizationsMembersDeactivated Attributes of \&quot;Organizations Members Deactivated\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembersDeactivatedByIdOrgByIdMember: async (idOrg: string, idMember: string, organizationsMembersDeactivated: OrganizationsMembersDeactivated, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updateMembersDeactivatedByIdOrgByIdMember', 'idOrg', idOrg)
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateMembersDeactivatedByIdOrgByIdMember', 'idMember', idMember)
            // verify required parameter 'organizationsMembersDeactivated' is not null or undefined
            assertParamExists('updateMembersDeactivatedByIdOrgByIdMember', 'organizationsMembersDeactivated', organizationsMembersDeactivated)
            const localVarPath = `/organizations/{idOrg}/members/{idMember}/deactivated`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)))
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationsMembersDeactivated,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/members/{idMember}/deactivated',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationsMembersDeactivated, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsMembershipsByIdOrgByIdMembership()
         * @param {string} idOrg idOrg or name
         * @param {string} idMembership idMembership
         * @param {OrganizationsMemberships} organizationsMemberships Attributes of \&quot;Organizations Memberships\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembershipByIdOrgByIdMembership: async (idOrg: string, idMembership: string, organizationsMemberships: OrganizationsMemberships, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updateMembershipByIdOrgByIdMembership', 'idOrg', idOrg)
            // verify required parameter 'idMembership' is not null or undefined
            assertParamExists('updateMembershipByIdOrgByIdMembership', 'idMembership', idMembership)
            // verify required parameter 'organizationsMemberships' is not null or undefined
            assertParamExists('updateMembershipByIdOrgByIdMembership', 'organizationsMemberships', organizationsMemberships)
            const localVarPath = `/organizations/{idOrg}/memberships/{idMembership}`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)))
                .replace(`{${"idMembership"}}`, encodeURIComponent(String(idMembership !== undefined ? idMembership : `-idMembership-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationsMemberships,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/memberships/{idMembership}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationsMemberships, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsNameByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {OrganizationsName} organizationsName Attributes of \&quot;Organizations Name\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNameByIdOrg: async (idOrg: string, organizationsName: OrganizationsName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updateNameByIdOrg', 'idOrg', idOrg)
            // verify required parameter 'organizationsName' is not null or undefined
            assertParamExists('updateNameByIdOrg', 'organizationsName', organizationsName)
            const localVarPath = `/organizations/{idOrg}/name`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationsName,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/name',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationsName, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsPrefsAssociatedDomainByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {PrefsAssociatedDomain} prefsAssociatedDomain Attributes of \&quot;Prefs Associated Domain\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsAssociatedDomainByIdOrg: async (idOrg: string, prefsAssociatedDomain: PrefsAssociatedDomain, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updatePrefsAssociatedDomainByIdOrg', 'idOrg', idOrg)
            // verify required parameter 'prefsAssociatedDomain' is not null or undefined
            assertParamExists('updatePrefsAssociatedDomainByIdOrg', 'prefsAssociatedDomain', prefsAssociatedDomain)
            const localVarPath = `/organizations/{idOrg}/prefs/associatedDomain`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsAssociatedDomain,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/prefs/associatedDomain',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsAssociatedDomain, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {PrefsBoardVisibilityRestrict} prefsBoardVisibilityRestrict Attributes of \&quot;Prefs Board Visibility Restrict\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsBoardVisibilityRestrictByIdOrg: async (idOrg: string, prefsBoardVisibilityRestrict: PrefsBoardVisibilityRestrict, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updatePrefsBoardVisibilityRestrictByIdOrg', 'idOrg', idOrg)
            // verify required parameter 'prefsBoardVisibilityRestrict' is not null or undefined
            assertParamExists('updatePrefsBoardVisibilityRestrictByIdOrg', 'prefsBoardVisibilityRestrict', prefsBoardVisibilityRestrict)
            const localVarPath = `/organizations/{idOrg}/prefs/boardVisibilityRestrict/org`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsBoardVisibilityRestrict,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/prefs/boardVisibilityRestrict/org',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsBoardVisibilityRestrict, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {PrefsBoardVisibilityRestrict} prefsBoardVisibilityRestrict Attributes of \&quot;Prefs Board Visibility Restrict\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsBoardVisibilityRestrictPublicByIdOrg: async (idOrg: string, prefsBoardVisibilityRestrict: PrefsBoardVisibilityRestrict, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updatePrefsBoardVisibilityRestrictPublicByIdOrg', 'idOrg', idOrg)
            // verify required parameter 'prefsBoardVisibilityRestrict' is not null or undefined
            assertParamExists('updatePrefsBoardVisibilityRestrictPublicByIdOrg', 'prefsBoardVisibilityRestrict', prefsBoardVisibilityRestrict)
            const localVarPath = `/organizations/{idOrg}/prefs/boardVisibilityRestrict/public`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsBoardVisibilityRestrict,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/prefs/boardVisibilityRestrict/public',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsBoardVisibilityRestrict, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsPrefsExternalMembersDisabledByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {PrefsExternalMembersDisabled} prefsExternalMembersDisabled Attributes of \&quot;Prefs External Members Disabled\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsExternalMembersDisabledByIdOrg: async (idOrg: string, prefsExternalMembersDisabled: PrefsExternalMembersDisabled, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updatePrefsExternalMembersDisabledByIdOrg', 'idOrg', idOrg)
            // verify required parameter 'prefsExternalMembersDisabled' is not null or undefined
            assertParamExists('updatePrefsExternalMembersDisabledByIdOrg', 'prefsExternalMembersDisabled', prefsExternalMembersDisabled)
            const localVarPath = `/organizations/{idOrg}/prefs/externalMembersDisabled`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsExternalMembersDisabled,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/prefs/externalMembersDisabled',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsExternalMembersDisabled, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsPrefsGoogleAppsVersionByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {PrefsGoogleAppsVersion} prefsGoogleAppsVersion Attributes of \&quot;Prefs Google Apps Version\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsGoogleAppsVersionByIdOrg: async (idOrg: string, prefsGoogleAppsVersion: PrefsGoogleAppsVersion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updatePrefsGoogleAppsVersionByIdOrg', 'idOrg', idOrg)
            // verify required parameter 'prefsGoogleAppsVersion' is not null or undefined
            assertParamExists('updatePrefsGoogleAppsVersionByIdOrg', 'prefsGoogleAppsVersion', prefsGoogleAppsVersion)
            const localVarPath = `/organizations/{idOrg}/prefs/googleAppsVersion`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsGoogleAppsVersion,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/prefs/googleAppsVersion',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsGoogleAppsVersion, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsPrefsOrgInviteRestrictByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {PrefsOrgInviteRestrict} prefsOrgInviteRestrict Attributes of \&quot;Prefs Org Invite Restrict\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsOrgInviteRestrictByIdOrg: async (idOrg: string, prefsOrgInviteRestrict: PrefsOrgInviteRestrict, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updatePrefsOrgInviteRestrictByIdOrg', 'idOrg', idOrg)
            // verify required parameter 'prefsOrgInviteRestrict' is not null or undefined
            assertParamExists('updatePrefsOrgInviteRestrictByIdOrg', 'prefsOrgInviteRestrict', prefsOrgInviteRestrict)
            const localVarPath = `/organizations/{idOrg}/prefs/orgInviteRestrict`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsOrgInviteRestrict,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/prefs/orgInviteRestrict',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsOrgInviteRestrict, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsPrefsPermissionLevelByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {PrefsPermissionLevel} prefsPermissionLevel Attributes of \&quot;Prefs Permission Level\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsPermissionLevelByIdOrg: async (idOrg: string, prefsPermissionLevel: PrefsPermissionLevel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updatePrefsPermissionLevelByIdOrg', 'idOrg', idOrg)
            // verify required parameter 'prefsPermissionLevel' is not null or undefined
            assertParamExists('updatePrefsPermissionLevelByIdOrg', 'prefsPermissionLevel', prefsPermissionLevel)
            const localVarPath = `/organizations/{idOrg}/prefs/permissionLevel`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsPermissionLevel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/prefs/permissionLevel',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsPermissionLevel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {PrefsBoardVisibilityRestrict} prefsBoardVisibilityRestrict Attributes of \&quot;Prefs Board Visibility Restrict\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsVisibilityByIdOrg: async (idOrg: string, prefsBoardVisibilityRestrict: PrefsBoardVisibilityRestrict, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updatePrefsVisibilityByIdOrg', 'idOrg', idOrg)
            // verify required parameter 'prefsBoardVisibilityRestrict' is not null or undefined
            assertParamExists('updatePrefsVisibilityByIdOrg', 'prefsBoardVisibilityRestrict', prefsBoardVisibilityRestrict)
            const localVarPath = `/organizations/{idOrg}/prefs/boardVisibilityRestrict/private`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsBoardVisibilityRestrict,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/prefs/boardVisibilityRestrict/private',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsBoardVisibilityRestrict, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrganizationsWebsiteByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {OrganizationsWebsite} organizationsWebsite Attributes of \&quot;Organizations Website\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebsiteByIdOrg: async (idOrg: string, organizationsWebsite: OrganizationsWebsite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('updateWebsiteByIdOrg', 'idOrg', idOrg)
            // verify required parameter 'organizationsWebsite' is not null or undefined
            assertParamExists('updateWebsiteByIdOrg', 'organizationsWebsite', organizationsWebsite)
            const localVarPath = `/organizations/{idOrg}/website`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationsWebsite,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/website',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationsWebsite, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addOrganizationsLogoByIdOrg()
         * @param {string} idOrg idOrg or name
         * @param {OrganizationsLogo} organizationsLogo Attributes of \&quot;Organizations Logo\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadLogoByIdOrg: async (idOrg: string, organizationsLogo: OrganizationsLogo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrg' is not null or undefined
            assertParamExists('uploadLogoByIdOrg', 'idOrg', idOrg)
            // verify required parameter 'organizationsLogo' is not null or undefined
            assertParamExists('uploadLogoByIdOrg', 'organizationsLogo', organizationsLogo)
            const localVarPath = `/organizations/{idOrg}/logo`
                .replace(`{${"idOrg"}}`, encodeURIComponent(String(idOrg !== undefined ? idOrg : `-idOrg-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationsLogo,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{idOrg}/logo',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationsLogo, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationApi - functional programming interface
 * @export
 */
export const OrganizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary addOrganizations()
         * @param {OrganizationApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: OrganizationApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const organizations: Organizations = {
                desc: requestParameters.desc,
                displayName: requestParameters.displayName,
                name: requestParameters.name,
                prefs/associatedDomain: requestParameters.prefs/associatedDomain,
                prefs/boardVisibilityRestrict/org: requestParameters.prefs/boardVisibilityRestrict/org,
                prefs/boardVisibilityRestrict/private: requestParameters.prefs/boardVisibilityRestrict/private,
                prefs/boardVisibilityRestrict/public: requestParameters.prefs/boardVisibilityRestrict/public,
                prefs/externalMembersDisabled: requestParameters.prefs/externalMembersDisabled,
                prefs/googleAppsVersion: requestParameters.prefs/googleAppsVersion,
                prefs/orgInviteRestrict: requestParameters.prefs/orgInviteRestrict,
                prefs/permissionLevel: requestParameters.prefs/permissionLevel,
                website: requestParameters.website
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(organizations, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteOrganizationsPrefsAssociatedDomainByIdOrg()
         * @param {OrganizationApiDeletePrefsAssociatedDomainByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePrefsAssociatedDomainByIdOrg(requestParameters: OrganizationApiDeletePrefsAssociatedDomainByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePrefsAssociatedDomainByIdOrg(requestParameters.idOrg, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOrganizationsActionsByIdOrg()
         * @param {OrganizationApiGetActionsByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActionsByIdOrg(requestParameters: OrganizationApiGetActionsByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActionsByIdOrg(requestParameters.idOrg, requestParameters.entities, requestParameters.display, requestParameters.filter, requestParameters.fields, requestParameters.limit, requestParameters.format, requestParameters.since, requestParameters.before, requestParameters.page, requestParameters.idModels, requestParameters.member, requestParameters.memberFields, requestParameters.memberCreator, requestParameters.memberCreatorFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOrganizationsBoardsByIdOrgByFilter()
         * @param {OrganizationApiGetBoardsByIdOrgByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardsByIdOrgByFilter(requestParameters: OrganizationApiGetBoardsByIdOrgByFilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardsByIdOrgByFilter(requestParameters.idOrg, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOrganizationsBoardsByIdOrg()
         * @param {OrganizationApiGetBoardsByOrgIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardsByOrgId(requestParameters: OrganizationApiGetBoardsByOrgIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardsByOrgId(requestParameters.idOrg, requestParameters.filter, requestParameters.fields, requestParameters.actions, requestParameters.actionsEntities, requestParameters.actionsLimit, requestParameters.actionsFormat, requestParameters.actionsSince, requestParameters.actionFields, requestParameters.memberships, requestParameters.organization, requestParameters.organizationFields, requestParameters.lists, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOrganizationsByIdOrgByField()
         * @param {OrganizationApiGetByIdAndFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdAndField(requestParameters: OrganizationApiGetByIdAndFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdAndField(requestParameters.idOrg, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOrganizationsByIdOrg()
         * @param {OrganizationApiGetByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdOrg(requestParameters: OrganizationApiGetByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdOrg(requestParameters.idOrg, requestParameters.actions, requestParameters.actionsEntities, requestParameters.actionsDisplay, requestParameters.actionsLimit, requestParameters.actionFields, requestParameters.memberships, requestParameters.membershipsMember, requestParameters.membershipsMemberFields, requestParameters.members, requestParameters.memberFields, requestParameters.memberActivity, requestParameters.membersInvited, requestParameters.membersInvitedFields, requestParameters.boards, requestParameters.boardFields, requestParameters.boardActions, requestParameters.boardActionsEntities, requestParameters.boardActionsDisplay, requestParameters.boardActionsFormat, requestParameters.boardActionsSince, requestParameters.boardActionsLimit, requestParameters.boardActionFields, requestParameters.boardLists, requestParameters.paidAccount, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOrganizationsMembersByIdOrg()
         * @param {OrganizationApiGetMembersByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembersByIdOrg(requestParameters: OrganizationApiGetMembersByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembersByIdOrg(requestParameters.idOrg, requestParameters.filter, requestParameters.fields, requestParameters.activity, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOrganizationsMembersInvitedByIdOrg()
         * @param {OrganizationApiGetMembersInvitedByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembersInvitedByIdOrg(requestParameters: OrganizationApiGetMembersInvitedByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembersInvitedByIdOrg(requestParameters.idOrg, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOrganizationsMembersInvitedByIdOrgByField()
         * @param {OrganizationApiGetMembersInvitedByIdOrgByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembersInvitedByIdOrgByField(requestParameters: OrganizationApiGetMembersInvitedByIdOrgByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembersInvitedByIdOrgByField(requestParameters.idOrg, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOrganizationsMembershipsByIdOrgByIdMembership()
         * @param {OrganizationApiGetMembershipsByIdOrgByIdMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembershipsByIdOrgByIdMembership(requestParameters: OrganizationApiGetMembershipsByIdOrgByIdMembershipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembershipsByIdOrgByIdMembership(requestParameters.idOrg, requestParameters.idMembership, requestParameters.member, requestParameters.memberFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOrganizationsDeltasByIdOrg()
         * @param {OrganizationApiGetOrganizationDeltasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationDeltas(requestParameters: OrganizationApiGetOrganizationDeltasRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationDeltas(requestParameters.idOrg, requestParameters.tags, requestParameters.ixLastUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOrganizationsMembersByIdOrgByFilter()
         * @param {OrganizationApiListMembersByIdOrgByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembersByIdOrgByFilter(requestParameters: OrganizationApiListMembersByIdOrgByFilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembersByIdOrgByFilter(requestParameters.idOrg, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOrganizationsMembersCardsByIdOrgByIdMember()
         * @param {OrganizationApiListMembersCardsByIdOrgByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembersCardsByIdOrgByIdMember(requestParameters: OrganizationApiListMembersCardsByIdOrgByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembersCardsByIdOrgByIdMember(requestParameters.idOrg, requestParameters.idMember, requestParameters.actions, requestParameters.attachments, requestParameters.attachmentFields, requestParameters.members, requestParameters.memberFields, requestParameters.checkItemStates, requestParameters.checklists, requestParameters.board, requestParameters.boardFields, requestParameters.list, requestParameters.listFields, requestParameters.filter, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOrganizationsMembershipsByIdOrg()
         * @param {OrganizationApiListMembershipsByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembershipsByIdOrg(requestParameters: OrganizationApiListMembershipsByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembershipsByIdOrg(requestParameters.idOrg, requestParameters.filter, requestParameters.member, requestParameters.memberFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteOrganizationsByIdOrg()
         * @param {OrganizationApiRemoveByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeByIdOrg(requestParameters: OrganizationApiRemoveByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeByIdOrg(requestParameters.idOrg, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteOrganizationsPrefsOrgInviteRestrictByIdOrg()
         * @param {OrganizationApiRemoveInviteRestrictByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeInviteRestrictByIdOrg(requestParameters: OrganizationApiRemoveInviteRestrictByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeInviteRestrictByIdOrg(requestParameters.idOrg, requestParameters.value, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteOrganizationsLogoByIdOrg()
         * @param {OrganizationApiRemoveLogoByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeLogoByIdOrg(requestParameters: OrganizationApiRemoveLogoByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeLogoByIdOrg(requestParameters.idOrg, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteOrganizationsMembersAllByIdOrgByIdMember()
         * @param {OrganizationApiRemoveMemberAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMemberAll(requestParameters: OrganizationApiRemoveMemberAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMemberAll(requestParameters.idOrg, requestParameters.idMember, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteOrganizationsMembersByIdOrgByIdMember()
         * @param {OrganizationApiRemoveMemberByIdOrgByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMemberByIdOrgByIdMember(requestParameters: OrganizationApiRemoveMemberByIdOrgByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMemberByIdOrgByIdMember(requestParameters.idOrg, requestParameters.idMember, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsByIdOrg()
         * @param {OrganizationApiUpdateByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByIdOrg(requestParameters: OrganizationApiUpdateByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const organizations: Organizations = {
                desc: requestParameters.desc,
                displayName: requestParameters.displayName,
                name: requestParameters.name,
                prefs/associatedDomain: requestParameters.prefs/associatedDomain,
                prefs/boardVisibilityRestrict/org: requestParameters.prefs/boardVisibilityRestrict/org,
                prefs/boardVisibilityRestrict/private: requestParameters.prefs/boardVisibilityRestrict/private,
                prefs/boardVisibilityRestrict/public: requestParameters.prefs/boardVisibilityRestrict/public,
                prefs/externalMembersDisabled: requestParameters.prefs/externalMembersDisabled,
                prefs/googleAppsVersion: requestParameters.prefs/googleAppsVersion,
                prefs/orgInviteRestrict: requestParameters.prefs/orgInviteRestrict,
                prefs/permissionLevel: requestParameters.prefs/permissionLevel,
                website: requestParameters.website
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByIdOrg(requestParameters.idOrg, organizations, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsDescByIdOrg()
         * @param {OrganizationApiUpdateDescriptionByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDescriptionByIdOrg(requestParameters: OrganizationApiUpdateDescriptionByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const organizationsDesc: OrganizationsDesc = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDescriptionByIdOrg(requestParameters.idOrg, organizationsDesc, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsDisplayNameByIdOrg()
         * @param {OrganizationApiUpdateDisplayNameByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDisplayNameByIdOrg(requestParameters: OrganizationApiUpdateDisplayNameByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const organizationsDisplayName: OrganizationsDisplayName = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDisplayNameByIdOrg(requestParameters.idOrg, organizationsDisplayName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsMembersByIdOrg()
         * @param {OrganizationApiUpdateMembersByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMembersByIdOrg(requestParameters: OrganizationApiUpdateMembersByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const organizationsMembers: OrganizationsMembers = {
                email: requestParameters.email,
                fullName: requestParameters.fullName,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMembersByIdOrg(requestParameters.idOrg, organizationsMembers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsMembersByIdOrgByIdMember()
         * @param {OrganizationApiUpdateMembersByIdOrgByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMembersByIdOrgByIdMember(requestParameters: OrganizationApiUpdateMembersByIdOrgByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const organizationsMembers: OrganizationsMembers = {
                email: requestParameters.email,
                fullName: requestParameters.fullName,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMembersByIdOrgByIdMember(requestParameters.idOrg, requestParameters.idMember, organizationsMembers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsMembersDeactivatedByIdOrgByIdMember()
         * @param {OrganizationApiUpdateMembersDeactivatedByIdOrgByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMembersDeactivatedByIdOrgByIdMember(requestParameters: OrganizationApiUpdateMembersDeactivatedByIdOrgByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const organizationsMembersDeactivated: OrganizationsMembersDeactivated = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMembersDeactivatedByIdOrgByIdMember(requestParameters.idOrg, requestParameters.idMember, organizationsMembersDeactivated, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsMembershipsByIdOrgByIdMembership()
         * @param {OrganizationApiUpdateMembershipByIdOrgByIdMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMembershipByIdOrgByIdMembership(requestParameters: OrganizationApiUpdateMembershipByIdOrgByIdMembershipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const organizationsMemberships: OrganizationsMemberships = {
                member_fields: requestParameters.member_fields,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMembershipByIdOrgByIdMembership(requestParameters.idOrg, requestParameters.idMembership, organizationsMemberships, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsNameByIdOrg()
         * @param {OrganizationApiUpdateNameByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNameByIdOrg(requestParameters: OrganizationApiUpdateNameByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const organizationsName: OrganizationsName = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNameByIdOrg(requestParameters.idOrg, organizationsName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsPrefsAssociatedDomainByIdOrg()
         * @param {OrganizationApiUpdatePrefsAssociatedDomainByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsAssociatedDomainByIdOrg(requestParameters: OrganizationApiUpdatePrefsAssociatedDomainByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsAssociatedDomain: PrefsAssociatedDomain = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsAssociatedDomainByIdOrg(requestParameters.idOrg, prefsAssociatedDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg()
         * @param {OrganizationApiUpdatePrefsBoardVisibilityRestrictByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsBoardVisibilityRestrictByIdOrg(requestParameters: OrganizationApiUpdatePrefsBoardVisibilityRestrictByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsBoardVisibilityRestrict: PrefsBoardVisibilityRestrict = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsBoardVisibilityRestrictByIdOrg(requestParameters.idOrg, prefsBoardVisibilityRestrict, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg()
         * @param {OrganizationApiUpdatePrefsBoardVisibilityRestrictPublicByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsBoardVisibilityRestrictPublicByIdOrg(requestParameters: OrganizationApiUpdatePrefsBoardVisibilityRestrictPublicByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsBoardVisibilityRestrict: PrefsBoardVisibilityRestrict = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsBoardVisibilityRestrictPublicByIdOrg(requestParameters.idOrg, prefsBoardVisibilityRestrict, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsPrefsExternalMembersDisabledByIdOrg()
         * @param {OrganizationApiUpdatePrefsExternalMembersDisabledByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsExternalMembersDisabledByIdOrg(requestParameters: OrganizationApiUpdatePrefsExternalMembersDisabledByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsExternalMembersDisabled: PrefsExternalMembersDisabled = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsExternalMembersDisabledByIdOrg(requestParameters.idOrg, prefsExternalMembersDisabled, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsPrefsGoogleAppsVersionByIdOrg()
         * @param {OrganizationApiUpdatePrefsGoogleAppsVersionByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsGoogleAppsVersionByIdOrg(requestParameters: OrganizationApiUpdatePrefsGoogleAppsVersionByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsGoogleAppsVersion: PrefsGoogleAppsVersion = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsGoogleAppsVersionByIdOrg(requestParameters.idOrg, prefsGoogleAppsVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsPrefsOrgInviteRestrictByIdOrg()
         * @param {OrganizationApiUpdatePrefsOrgInviteRestrictByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsOrgInviteRestrictByIdOrg(requestParameters: OrganizationApiUpdatePrefsOrgInviteRestrictByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsOrgInviteRestrict: PrefsOrgInviteRestrict = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsOrgInviteRestrictByIdOrg(requestParameters.idOrg, prefsOrgInviteRestrict, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsPrefsPermissionLevelByIdOrg()
         * @param {OrganizationApiUpdatePrefsPermissionLevelByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsPermissionLevelByIdOrg(requestParameters: OrganizationApiUpdatePrefsPermissionLevelByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsPermissionLevel: PrefsPermissionLevel = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsPermissionLevelByIdOrg(requestParameters.idOrg, prefsPermissionLevel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg()
         * @param {OrganizationApiUpdatePrefsVisibilityByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsVisibilityByIdOrg(requestParameters: OrganizationApiUpdatePrefsVisibilityByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsBoardVisibilityRestrict: PrefsBoardVisibilityRestrict = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsVisibilityByIdOrg(requestParameters.idOrg, prefsBoardVisibilityRestrict, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateOrganizationsWebsiteByIdOrg()
         * @param {OrganizationApiUpdateWebsiteByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWebsiteByIdOrg(requestParameters: OrganizationApiUpdateWebsiteByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const organizationsWebsite: OrganizationsWebsite = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebsiteByIdOrg(requestParameters.idOrg, organizationsWebsite, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addOrganizationsLogoByIdOrg()
         * @param {OrganizationApiUploadLogoByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadLogoByIdOrg(requestParameters: OrganizationApiUploadLogoByIdOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const organizationsLogo: OrganizationsLogo = {
                file: requestParameters.file
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadLogoByIdOrg(requestParameters.idOrg, organizationsLogo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationApi - factory interface
 * @export
 */
export const OrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationApiFp(configuration)
    return {
        /**
         * 
         * @summary addOrganizations()
         * @param {OrganizationApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: OrganizationApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteOrganizationsPrefsAssociatedDomainByIdOrg()
         * @param {OrganizationApiDeletePrefsAssociatedDomainByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrefsAssociatedDomainByIdOrg(requestParameters: OrganizationApiDeletePrefsAssociatedDomainByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePrefsAssociatedDomainByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOrganizationsActionsByIdOrg()
         * @param {OrganizationApiGetActionsByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActionsByIdOrg(requestParameters: OrganizationApiGetActionsByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getActionsByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOrganizationsBoardsByIdOrgByFilter()
         * @param {OrganizationApiGetBoardsByIdOrgByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardsByIdOrgByFilter(requestParameters: OrganizationApiGetBoardsByIdOrgByFilterRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardsByIdOrgByFilter(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOrganizationsBoardsByIdOrg()
         * @param {OrganizationApiGetBoardsByOrgIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardsByOrgId(requestParameters: OrganizationApiGetBoardsByOrgIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardsByOrgId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOrganizationsByIdOrgByField()
         * @param {OrganizationApiGetByIdAndFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdAndField(requestParameters: OrganizationApiGetByIdAndFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getByIdAndField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOrganizationsByIdOrg()
         * @param {OrganizationApiGetByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdOrg(requestParameters: OrganizationApiGetByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOrganizationsMembersByIdOrg()
         * @param {OrganizationApiGetMembersByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersByIdOrg(requestParameters: OrganizationApiGetMembersByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMembersByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOrganizationsMembersInvitedByIdOrg()
         * @param {OrganizationApiGetMembersInvitedByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersInvitedByIdOrg(requestParameters: OrganizationApiGetMembersInvitedByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMembersInvitedByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOrganizationsMembersInvitedByIdOrgByField()
         * @param {OrganizationApiGetMembersInvitedByIdOrgByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersInvitedByIdOrgByField(requestParameters: OrganizationApiGetMembersInvitedByIdOrgByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMembersInvitedByIdOrgByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOrganizationsMembershipsByIdOrgByIdMembership()
         * @param {OrganizationApiGetMembershipsByIdOrgByIdMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembershipsByIdOrgByIdMembership(requestParameters: OrganizationApiGetMembershipsByIdOrgByIdMembershipRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMembershipsByIdOrgByIdMembership(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOrganizationsDeltasByIdOrg()
         * @param {OrganizationApiGetOrganizationDeltasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationDeltas(requestParameters: OrganizationApiGetOrganizationDeltasRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getOrganizationDeltas(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOrganizationsMembersByIdOrgByFilter()
         * @param {OrganizationApiListMembersByIdOrgByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembersByIdOrgByFilter(requestParameters: OrganizationApiListMembersByIdOrgByFilterRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listMembersByIdOrgByFilter(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOrganizationsMembersCardsByIdOrgByIdMember()
         * @param {OrganizationApiListMembersCardsByIdOrgByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembersCardsByIdOrgByIdMember(requestParameters: OrganizationApiListMembersCardsByIdOrgByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listMembersCardsByIdOrgByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOrganizationsMembershipsByIdOrg()
         * @param {OrganizationApiListMembershipsByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembershipsByIdOrg(requestParameters: OrganizationApiListMembershipsByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listMembershipsByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteOrganizationsByIdOrg()
         * @param {OrganizationApiRemoveByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByIdOrg(requestParameters: OrganizationApiRemoveByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteOrganizationsPrefsOrgInviteRestrictByIdOrg()
         * @param {OrganizationApiRemoveInviteRestrictByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeInviteRestrictByIdOrg(requestParameters: OrganizationApiRemoveInviteRestrictByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeInviteRestrictByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteOrganizationsLogoByIdOrg()
         * @param {OrganizationApiRemoveLogoByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLogoByIdOrg(requestParameters: OrganizationApiRemoveLogoByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeLogoByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteOrganizationsMembersAllByIdOrgByIdMember()
         * @param {OrganizationApiRemoveMemberAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMemberAll(requestParameters: OrganizationApiRemoveMemberAllRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeMemberAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteOrganizationsMembersByIdOrgByIdMember()
         * @param {OrganizationApiRemoveMemberByIdOrgByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMemberByIdOrgByIdMember(requestParameters: OrganizationApiRemoveMemberByIdOrgByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeMemberByIdOrgByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsByIdOrg()
         * @param {OrganizationApiUpdateByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdOrg(requestParameters: OrganizationApiUpdateByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsDescByIdOrg()
         * @param {OrganizationApiUpdateDescriptionByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDescriptionByIdOrg(requestParameters: OrganizationApiUpdateDescriptionByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateDescriptionByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsDisplayNameByIdOrg()
         * @param {OrganizationApiUpdateDisplayNameByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDisplayNameByIdOrg(requestParameters: OrganizationApiUpdateDisplayNameByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateDisplayNameByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsMembersByIdOrg()
         * @param {OrganizationApiUpdateMembersByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembersByIdOrg(requestParameters: OrganizationApiUpdateMembersByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMembersByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsMembersByIdOrgByIdMember()
         * @param {OrganizationApiUpdateMembersByIdOrgByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembersByIdOrgByIdMember(requestParameters: OrganizationApiUpdateMembersByIdOrgByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMembersByIdOrgByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsMembersDeactivatedByIdOrgByIdMember()
         * @param {OrganizationApiUpdateMembersDeactivatedByIdOrgByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembersDeactivatedByIdOrgByIdMember(requestParameters: OrganizationApiUpdateMembersDeactivatedByIdOrgByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMembersDeactivatedByIdOrgByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsMembershipsByIdOrgByIdMembership()
         * @param {OrganizationApiUpdateMembershipByIdOrgByIdMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembershipByIdOrgByIdMembership(requestParameters: OrganizationApiUpdateMembershipByIdOrgByIdMembershipRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMembershipByIdOrgByIdMembership(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsNameByIdOrg()
         * @param {OrganizationApiUpdateNameByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNameByIdOrg(requestParameters: OrganizationApiUpdateNameByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateNameByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsPrefsAssociatedDomainByIdOrg()
         * @param {OrganizationApiUpdatePrefsAssociatedDomainByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsAssociatedDomainByIdOrg(requestParameters: OrganizationApiUpdatePrefsAssociatedDomainByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsAssociatedDomainByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg()
         * @param {OrganizationApiUpdatePrefsBoardVisibilityRestrictByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsBoardVisibilityRestrictByIdOrg(requestParameters: OrganizationApiUpdatePrefsBoardVisibilityRestrictByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsBoardVisibilityRestrictByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg()
         * @param {OrganizationApiUpdatePrefsBoardVisibilityRestrictPublicByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsBoardVisibilityRestrictPublicByIdOrg(requestParameters: OrganizationApiUpdatePrefsBoardVisibilityRestrictPublicByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsBoardVisibilityRestrictPublicByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsPrefsExternalMembersDisabledByIdOrg()
         * @param {OrganizationApiUpdatePrefsExternalMembersDisabledByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsExternalMembersDisabledByIdOrg(requestParameters: OrganizationApiUpdatePrefsExternalMembersDisabledByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsExternalMembersDisabledByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsPrefsGoogleAppsVersionByIdOrg()
         * @param {OrganizationApiUpdatePrefsGoogleAppsVersionByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsGoogleAppsVersionByIdOrg(requestParameters: OrganizationApiUpdatePrefsGoogleAppsVersionByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsGoogleAppsVersionByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsPrefsOrgInviteRestrictByIdOrg()
         * @param {OrganizationApiUpdatePrefsOrgInviteRestrictByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsOrgInviteRestrictByIdOrg(requestParameters: OrganizationApiUpdatePrefsOrgInviteRestrictByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsOrgInviteRestrictByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsPrefsPermissionLevelByIdOrg()
         * @param {OrganizationApiUpdatePrefsPermissionLevelByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsPermissionLevelByIdOrg(requestParameters: OrganizationApiUpdatePrefsPermissionLevelByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsPermissionLevelByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg()
         * @param {OrganizationApiUpdatePrefsVisibilityByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsVisibilityByIdOrg(requestParameters: OrganizationApiUpdatePrefsVisibilityByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsVisibilityByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrganizationsWebsiteByIdOrg()
         * @param {OrganizationApiUpdateWebsiteByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebsiteByIdOrg(requestParameters: OrganizationApiUpdateWebsiteByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateWebsiteByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addOrganizationsLogoByIdOrg()
         * @param {OrganizationApiUploadLogoByIdOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadLogoByIdOrg(requestParameters: OrganizationApiUploadLogoByIdOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uploadLogoByIdOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in OrganizationApi.
 * @export
 * @interface OrganizationApiCreateRequest
 */
export type OrganizationApiCreateRequest = {
    
} & Organizations

/**
 * Request parameters for deletePrefsAssociatedDomainByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiDeletePrefsAssociatedDomainByIdOrgRequest
 */
export type OrganizationApiDeletePrefsAssociatedDomainByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiDeletePrefsAssociatedDomainByIdOrg
    */
    readonly idOrg: string
    
}

/**
 * Request parameters for getActionsByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiGetActionsByIdOrgRequest
 */
export type OrganizationApiGetActionsByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiGetActionsByIdOrg
    */
    readonly idOrg: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiGetActionsByIdOrg
    */
    readonly entities?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiGetActionsByIdOrg
    */
    readonly display?: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof OrganizationApiGetActionsByIdOrg
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator or type
    * @type {string}
    * @memberof OrganizationApiGetActionsByIdOrg
    */
    readonly fields?: string
    
    /**
    * a number from 0 to 1000
    * @type {string}
    * @memberof OrganizationApiGetActionsByIdOrg
    */
    readonly limit?: string
    
    /**
    * One of: count, list or minimal
    * @type {string}
    * @memberof OrganizationApiGetActionsByIdOrg
    */
    readonly format?: string
    
    /**
    * A date, null or lastView
    * @type {string}
    * @memberof OrganizationApiGetActionsByIdOrg
    */
    readonly since?: string
    
    /**
    * A date, or null
    * @type {string}
    * @memberof OrganizationApiGetActionsByIdOrg
    */
    readonly before?: string
    
    /**
    * Page * limit must be less than 1000
    * @type {string}
    * @memberof OrganizationApiGetActionsByIdOrg
    */
    readonly page?: string
    
    /**
    * Only return actions related to these model ids
    * @type {string}
    * @memberof OrganizationApiGetActionsByIdOrg
    */
    readonly idModels?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiGetActionsByIdOrg
    */
    readonly member?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof OrganizationApiGetActionsByIdOrg
    */
    readonly memberFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiGetActionsByIdOrg
    */
    readonly memberCreator?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof OrganizationApiGetActionsByIdOrg
    */
    readonly memberCreatorFields?: string
    
}

/**
 * Request parameters for getBoardsByIdOrgByFilter operation in OrganizationApi.
 * @export
 * @interface OrganizationApiGetBoardsByIdOrgByFilterRequest
 */
export type OrganizationApiGetBoardsByIdOrgByFilterRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiGetBoardsByIdOrgByFilter
    */
    readonly idOrg: string
    
    /**
    * filter
    * @type {string}
    * @memberof OrganizationApiGetBoardsByIdOrgByFilter
    */
    readonly filter: string
    
}

/**
 * Request parameters for getBoardsByOrgId operation in OrganizationApi.
 * @export
 * @interface OrganizationApiGetBoardsByOrgIdRequest
 */
export type OrganizationApiGetBoardsByOrgIdRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiGetBoardsByOrgId
    */
    readonly idOrg: string
    
    /**
    * all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
    * @type {string}
    * @memberof OrganizationApiGetBoardsByOrgId
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof OrganizationApiGetBoardsByOrgId
    */
    readonly fields?: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof OrganizationApiGetBoardsByOrgId
    */
    readonly actions?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiGetBoardsByOrgId
    */
    readonly actionsEntities?: string
    
    /**
    * a number from 0 to 1000
    * @type {string}
    * @memberof OrganizationApiGetBoardsByOrgId
    */
    readonly actionsLimit?: string
    
    /**
    * One of: count, list or minimal
    * @type {string}
    * @memberof OrganizationApiGetBoardsByOrgId
    */
    readonly actionsFormat?: string
    
    /**
    * A date, null or lastView
    * @type {string}
    * @memberof OrganizationApiGetBoardsByOrgId
    */
    readonly actionsSince?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator or type
    * @type {string}
    * @memberof OrganizationApiGetBoardsByOrgId
    */
    readonly actionFields?: string
    
    /**
    * all or a comma-separated list of: active, admin, deactivated, me or normal
    * @type {string}
    * @memberof OrganizationApiGetBoardsByOrgId
    */
    readonly memberships?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiGetBoardsByOrgId
    */
    readonly organization?: string
    
    /**
    * all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    * @type {string}
    * @memberof OrganizationApiGetBoardsByOrgId
    */
    readonly organizationFields?: string
    
    /**
    * One of: all, closed, none or open
    * @type {string}
    * @memberof OrganizationApiGetBoardsByOrgId
    */
    readonly lists?: string
    
}

/**
 * Request parameters for getByIdAndField operation in OrganizationApi.
 * @export
 * @interface OrganizationApiGetByIdAndFieldRequest
 */
export type OrganizationApiGetByIdAndFieldRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiGetByIdAndField
    */
    readonly idOrg: string
    
    /**
    * field
    * @type {string}
    * @memberof OrganizationApiGetByIdAndField
    */
    readonly field: string
    
}

/**
 * Request parameters for getByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiGetByIdOrgRequest
 */
export type OrganizationApiGetByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly idOrg: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly actions?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly actionsEntities?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly actionsDisplay?: string
    
    /**
    * a number from 0 to 1000
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly actionsLimit?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator or type
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly actionFields?: string
    
    /**
    * all or a comma-separated list of: active, admin, deactivated, me or normal
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly memberships?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly membershipsMember?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly membershipsMemberFields?: string
    
    /**
    * One of: admins, all, none, normal or owners
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly members?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly memberFields?: string
    
    /**
    * true or false ; works for premium organizations only.
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly memberActivity?: string
    
    /**
    * One of: admins, all, none, normal or owners
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly membersInvited?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly membersInvitedFields?: string
    
    /**
    * all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly boards?: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly boardFields?: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly boardActions?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly boardActionsEntities?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly boardActionsDisplay?: string
    
    /**
    * One of: count, list or minimal
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly boardActionsFormat?: string
    
    /**
    * A date, null or lastView
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly boardActionsSince?: string
    
    /**
    * a number from 0 to 1000
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly boardActionsLimit?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator or type
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly boardActionFields?: string
    
    /**
    * One of: all, closed, none or open
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly boardLists?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly paidAccount?: string
    
    /**
    * all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    * @type {string}
    * @memberof OrganizationApiGetByIdOrg
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getMembersByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiGetMembersByIdOrgRequest
 */
export type OrganizationApiGetMembersByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiGetMembersByIdOrg
    */
    readonly idOrg: string
    
    /**
    * One of: admins, all, none, normal or owners
    * @type {string}
    * @memberof OrganizationApiGetMembersByIdOrg
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof OrganizationApiGetMembersByIdOrg
    */
    readonly fields?: string
    
    /**
    * true or false ; works for premium organizations only.
    * @type {string}
    * @memberof OrganizationApiGetMembersByIdOrg
    */
    readonly activity?: string
    
}

/**
 * Request parameters for getMembersInvitedByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiGetMembersInvitedByIdOrgRequest
 */
export type OrganizationApiGetMembersInvitedByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiGetMembersInvitedByIdOrg
    */
    readonly idOrg: string
    
    /**
    * all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
    * @type {string}
    * @memberof OrganizationApiGetMembersInvitedByIdOrg
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getMembersInvitedByIdOrgByField operation in OrganizationApi.
 * @export
 * @interface OrganizationApiGetMembersInvitedByIdOrgByFieldRequest
 */
export type OrganizationApiGetMembersInvitedByIdOrgByFieldRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiGetMembersInvitedByIdOrgByField
    */
    readonly idOrg: string
    
    /**
    * field
    * @type {string}
    * @memberof OrganizationApiGetMembersInvitedByIdOrgByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getMembershipsByIdOrgByIdMembership operation in OrganizationApi.
 * @export
 * @interface OrganizationApiGetMembershipsByIdOrgByIdMembershipRequest
 */
export type OrganizationApiGetMembershipsByIdOrgByIdMembershipRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiGetMembershipsByIdOrgByIdMembership
    */
    readonly idOrg: string
    
    /**
    * idMembership
    * @type {string}
    * @memberof OrganizationApiGetMembershipsByIdOrgByIdMembership
    */
    readonly idMembership: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiGetMembershipsByIdOrgByIdMembership
    */
    readonly member?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof OrganizationApiGetMembershipsByIdOrgByIdMembership
    */
    readonly memberFields?: string
    
}

/**
 * Request parameters for getOrganizationDeltas operation in OrganizationApi.
 * @export
 * @interface OrganizationApiGetOrganizationDeltasRequest
 */
export type OrganizationApiGetOrganizationDeltasRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiGetOrganizationDeltas
    */
    readonly idOrg: string
    
    /**
    * A valid tag for subscribing
    * @type {string}
    * @memberof OrganizationApiGetOrganizationDeltas
    */
    readonly tags: string
    
    /**
    * a number from -1 to Infinity
    * @type {string}
    * @memberof OrganizationApiGetOrganizationDeltas
    */
    readonly ixLastUpdate: string
    
}

/**
 * Request parameters for listMembersByIdOrgByFilter operation in OrganizationApi.
 * @export
 * @interface OrganizationApiListMembersByIdOrgByFilterRequest
 */
export type OrganizationApiListMembersByIdOrgByFilterRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiListMembersByIdOrgByFilter
    */
    readonly idOrg: string
    
    /**
    * filter
    * @type {string}
    * @memberof OrganizationApiListMembersByIdOrgByFilter
    */
    readonly filter: string
    
}

/**
 * Request parameters for listMembersCardsByIdOrgByIdMember operation in OrganizationApi.
 * @export
 * @interface OrganizationApiListMembersCardsByIdOrgByIdMemberRequest
 */
export type OrganizationApiListMembersCardsByIdOrgByIdMemberRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiListMembersCardsByIdOrgByIdMember
    */
    readonly idOrg: string
    
    /**
    * idMember
    * @type {string}
    * @memberof OrganizationApiListMembersCardsByIdOrgByIdMember
    */
    readonly idMember: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof OrganizationApiListMembersCardsByIdOrgByIdMember
    */
    readonly actions?: string
    
    /**
    * A boolean value or &quot;cover&quot; for only card cover attachments
    * @type {string}
    * @memberof OrganizationApiListMembersCardsByIdOrgByIdMember
    */
    readonly attachments?: string
    
    /**
    * all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    * @type {string}
    * @memberof OrganizationApiListMembersCardsByIdOrgByIdMember
    */
    readonly attachmentFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiListMembersCardsByIdOrgByIdMember
    */
    readonly members?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof OrganizationApiListMembersCardsByIdOrgByIdMember
    */
    readonly memberFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiListMembersCardsByIdOrgByIdMember
    */
    readonly checkItemStates?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof OrganizationApiListMembersCardsByIdOrgByIdMember
    */
    readonly checklists?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiListMembersCardsByIdOrgByIdMember
    */
    readonly board?: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof OrganizationApiListMembersCardsByIdOrgByIdMember
    */
    readonly boardFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiListMembersCardsByIdOrgByIdMember
    */
    readonly list?: string
    
    /**
    * all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    * @type {string}
    * @memberof OrganizationApiListMembersCardsByIdOrgByIdMember
    */
    readonly listFields?: string
    
    /**
    * One of: all, closed, none, open or visible
    * @type {string}
    * @memberof OrganizationApiListMembersCardsByIdOrgByIdMember
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof OrganizationApiListMembersCardsByIdOrgByIdMember
    */
    readonly fields?: string
    
}

/**
 * Request parameters for listMembershipsByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiListMembershipsByIdOrgRequest
 */
export type OrganizationApiListMembershipsByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiListMembershipsByIdOrg
    */
    readonly idOrg: string
    
    /**
    * all or a comma-separated list of: active, admin, deactivated, me or normal
    * @type {string}
    * @memberof OrganizationApiListMembershipsByIdOrg
    */
    readonly filter?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof OrganizationApiListMembershipsByIdOrg
    */
    readonly member?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof OrganizationApiListMembershipsByIdOrg
    */
    readonly memberFields?: string
    
}

/**
 * Request parameters for removeByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiRemoveByIdOrgRequest
 */
export type OrganizationApiRemoveByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiRemoveByIdOrg
    */
    readonly idOrg: string
    
}

/**
 * Request parameters for removeInviteRestrictByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiRemoveInviteRestrictByIdOrgRequest
 */
export type OrganizationApiRemoveInviteRestrictByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiRemoveInviteRestrictByIdOrg
    */
    readonly idOrg: string
    
    /**
    * An email address with optional expansion tokens
    * @type {string}
    * @memberof OrganizationApiRemoveInviteRestrictByIdOrg
    */
    readonly value: string
    
}

/**
 * Request parameters for removeLogoByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiRemoveLogoByIdOrgRequest
 */
export type OrganizationApiRemoveLogoByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiRemoveLogoByIdOrg
    */
    readonly idOrg: string
    
}

/**
 * Request parameters for removeMemberAll operation in OrganizationApi.
 * @export
 * @interface OrganizationApiRemoveMemberAllRequest
 */
export type OrganizationApiRemoveMemberAllRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiRemoveMemberAll
    */
    readonly idOrg: string
    
    /**
    * idMember
    * @type {string}
    * @memberof OrganizationApiRemoveMemberAll
    */
    readonly idMember: string
    
}

/**
 * Request parameters for removeMemberByIdOrgByIdMember operation in OrganizationApi.
 * @export
 * @interface OrganizationApiRemoveMemberByIdOrgByIdMemberRequest
 */
export type OrganizationApiRemoveMemberByIdOrgByIdMemberRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiRemoveMemberByIdOrgByIdMember
    */
    readonly idOrg: string
    
    /**
    * idMember
    * @type {string}
    * @memberof OrganizationApiRemoveMemberByIdOrgByIdMember
    */
    readonly idMember: string
    
}

/**
 * Request parameters for updateByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdateByIdOrgRequest
 */
export type OrganizationApiUpdateByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdateByIdOrg
    */
    readonly idOrg: string
    
} & Organizations

/**
 * Request parameters for updateDescriptionByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdateDescriptionByIdOrgRequest
 */
export type OrganizationApiUpdateDescriptionByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdateDescriptionByIdOrg
    */
    readonly idOrg: string
    
} & OrganizationsDesc

/**
 * Request parameters for updateDisplayNameByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdateDisplayNameByIdOrgRequest
 */
export type OrganizationApiUpdateDisplayNameByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdateDisplayNameByIdOrg
    */
    readonly idOrg: string
    
} & OrganizationsDisplayName

/**
 * Request parameters for updateMembersByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdateMembersByIdOrgRequest
 */
export type OrganizationApiUpdateMembersByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdateMembersByIdOrg
    */
    readonly idOrg: string
    
} & OrganizationsMembers

/**
 * Request parameters for updateMembersByIdOrgByIdMember operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdateMembersByIdOrgByIdMemberRequest
 */
export type OrganizationApiUpdateMembersByIdOrgByIdMemberRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdateMembersByIdOrgByIdMember
    */
    readonly idOrg: string
    
    /**
    * idMember
    * @type {string}
    * @memberof OrganizationApiUpdateMembersByIdOrgByIdMember
    */
    readonly idMember: string
    
} & OrganizationsMembers

/**
 * Request parameters for updateMembersDeactivatedByIdOrgByIdMember operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdateMembersDeactivatedByIdOrgByIdMemberRequest
 */
export type OrganizationApiUpdateMembersDeactivatedByIdOrgByIdMemberRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdateMembersDeactivatedByIdOrgByIdMember
    */
    readonly idOrg: string
    
    /**
    * idMember
    * @type {string}
    * @memberof OrganizationApiUpdateMembersDeactivatedByIdOrgByIdMember
    */
    readonly idMember: string
    
} & OrganizationsMembersDeactivated

/**
 * Request parameters for updateMembershipByIdOrgByIdMembership operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdateMembershipByIdOrgByIdMembershipRequest
 */
export type OrganizationApiUpdateMembershipByIdOrgByIdMembershipRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdateMembershipByIdOrgByIdMembership
    */
    readonly idOrg: string
    
    /**
    * idMembership
    * @type {string}
    * @memberof OrganizationApiUpdateMembershipByIdOrgByIdMembership
    */
    readonly idMembership: string
    
} & OrganizationsMemberships

/**
 * Request parameters for updateNameByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdateNameByIdOrgRequest
 */
export type OrganizationApiUpdateNameByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdateNameByIdOrg
    */
    readonly idOrg: string
    
} & OrganizationsName

/**
 * Request parameters for updatePrefsAssociatedDomainByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdatePrefsAssociatedDomainByIdOrgRequest
 */
export type OrganizationApiUpdatePrefsAssociatedDomainByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdatePrefsAssociatedDomainByIdOrg
    */
    readonly idOrg: string
    
} & PrefsAssociatedDomain

/**
 * Request parameters for updatePrefsBoardVisibilityRestrictByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdatePrefsBoardVisibilityRestrictByIdOrgRequest
 */
export type OrganizationApiUpdatePrefsBoardVisibilityRestrictByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdatePrefsBoardVisibilityRestrictByIdOrg
    */
    readonly idOrg: string
    
} & PrefsBoardVisibilityRestrict

/**
 * Request parameters for updatePrefsBoardVisibilityRestrictPublicByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdatePrefsBoardVisibilityRestrictPublicByIdOrgRequest
 */
export type OrganizationApiUpdatePrefsBoardVisibilityRestrictPublicByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdatePrefsBoardVisibilityRestrictPublicByIdOrg
    */
    readonly idOrg: string
    
} & PrefsBoardVisibilityRestrict

/**
 * Request parameters for updatePrefsExternalMembersDisabledByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdatePrefsExternalMembersDisabledByIdOrgRequest
 */
export type OrganizationApiUpdatePrefsExternalMembersDisabledByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdatePrefsExternalMembersDisabledByIdOrg
    */
    readonly idOrg: string
    
} & PrefsExternalMembersDisabled

/**
 * Request parameters for updatePrefsGoogleAppsVersionByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdatePrefsGoogleAppsVersionByIdOrgRequest
 */
export type OrganizationApiUpdatePrefsGoogleAppsVersionByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdatePrefsGoogleAppsVersionByIdOrg
    */
    readonly idOrg: string
    
} & PrefsGoogleAppsVersion

/**
 * Request parameters for updatePrefsOrgInviteRestrictByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdatePrefsOrgInviteRestrictByIdOrgRequest
 */
export type OrganizationApiUpdatePrefsOrgInviteRestrictByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdatePrefsOrgInviteRestrictByIdOrg
    */
    readonly idOrg: string
    
} & PrefsOrgInviteRestrict

/**
 * Request parameters for updatePrefsPermissionLevelByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdatePrefsPermissionLevelByIdOrgRequest
 */
export type OrganizationApiUpdatePrefsPermissionLevelByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdatePrefsPermissionLevelByIdOrg
    */
    readonly idOrg: string
    
} & PrefsPermissionLevel

/**
 * Request parameters for updatePrefsVisibilityByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdatePrefsVisibilityByIdOrgRequest
 */
export type OrganizationApiUpdatePrefsVisibilityByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdatePrefsVisibilityByIdOrg
    */
    readonly idOrg: string
    
} & PrefsBoardVisibilityRestrict

/**
 * Request parameters for updateWebsiteByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUpdateWebsiteByIdOrgRequest
 */
export type OrganizationApiUpdateWebsiteByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUpdateWebsiteByIdOrg
    */
    readonly idOrg: string
    
} & OrganizationsWebsite

/**
 * Request parameters for uploadLogoByIdOrg operation in OrganizationApi.
 * @export
 * @interface OrganizationApiUploadLogoByIdOrgRequest
 */
export type OrganizationApiUploadLogoByIdOrgRequest = {
    
    /**
    * idOrg or name
    * @type {string}
    * @memberof OrganizationApiUploadLogoByIdOrg
    */
    readonly idOrg: string
    
} & OrganizationsLogo

/**
 * OrganizationApiGenerated - object-oriented interface
 * @export
 * @class OrganizationApiGenerated
 * @extends {BaseAPI}
 */
export class OrganizationApiGenerated extends BaseAPI {
    /**
     * 
     * @summary addOrganizations()
     * @param {OrganizationApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public create(requestParameters: OrganizationApiCreateRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteOrganizationsPrefsAssociatedDomainByIdOrg()
     * @param {OrganizationApiDeletePrefsAssociatedDomainByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public deletePrefsAssociatedDomainByIdOrg(requestParameters: OrganizationApiDeletePrefsAssociatedDomainByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).deletePrefsAssociatedDomainByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOrganizationsActionsByIdOrg()
     * @param {OrganizationApiGetActionsByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public getActionsByIdOrg(requestParameters: OrganizationApiGetActionsByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getActionsByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOrganizationsBoardsByIdOrgByFilter()
     * @param {OrganizationApiGetBoardsByIdOrgByFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public getBoardsByIdOrgByFilter(requestParameters: OrganizationApiGetBoardsByIdOrgByFilterRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getBoardsByIdOrgByFilter(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOrganizationsBoardsByIdOrg()
     * @param {OrganizationApiGetBoardsByOrgIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public getBoardsByOrgId(requestParameters: OrganizationApiGetBoardsByOrgIdRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getBoardsByOrgId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOrganizationsByIdOrgByField()
     * @param {OrganizationApiGetByIdAndFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public getByIdAndField(requestParameters: OrganizationApiGetByIdAndFieldRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getByIdAndField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOrganizationsByIdOrg()
     * @param {OrganizationApiGetByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public getByIdOrg(requestParameters: OrganizationApiGetByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOrganizationsMembersByIdOrg()
     * @param {OrganizationApiGetMembersByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public getMembersByIdOrg(requestParameters: OrganizationApiGetMembersByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getMembersByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOrganizationsMembersInvitedByIdOrg()
     * @param {OrganizationApiGetMembersInvitedByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public getMembersInvitedByIdOrg(requestParameters: OrganizationApiGetMembersInvitedByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getMembersInvitedByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOrganizationsMembersInvitedByIdOrgByField()
     * @param {OrganizationApiGetMembersInvitedByIdOrgByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public getMembersInvitedByIdOrgByField(requestParameters: OrganizationApiGetMembersInvitedByIdOrgByFieldRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getMembersInvitedByIdOrgByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOrganizationsMembershipsByIdOrgByIdMembership()
     * @param {OrganizationApiGetMembershipsByIdOrgByIdMembershipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public getMembershipsByIdOrgByIdMembership(requestParameters: OrganizationApiGetMembershipsByIdOrgByIdMembershipRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getMembershipsByIdOrgByIdMembership(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOrganizationsDeltasByIdOrg()
     * @param {OrganizationApiGetOrganizationDeltasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public getOrganizationDeltas(requestParameters: OrganizationApiGetOrganizationDeltasRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getOrganizationDeltas(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOrganizationsMembersByIdOrgByFilter()
     * @param {OrganizationApiListMembersByIdOrgByFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public listMembersByIdOrgByFilter(requestParameters: OrganizationApiListMembersByIdOrgByFilterRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).listMembersByIdOrgByFilter(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOrganizationsMembersCardsByIdOrgByIdMember()
     * @param {OrganizationApiListMembersCardsByIdOrgByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public listMembersCardsByIdOrgByIdMember(requestParameters: OrganizationApiListMembersCardsByIdOrgByIdMemberRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).listMembersCardsByIdOrgByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOrganizationsMembershipsByIdOrg()
     * @param {OrganizationApiListMembershipsByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public listMembershipsByIdOrg(requestParameters: OrganizationApiListMembershipsByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).listMembershipsByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteOrganizationsByIdOrg()
     * @param {OrganizationApiRemoveByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public removeByIdOrg(requestParameters: OrganizationApiRemoveByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).removeByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteOrganizationsPrefsOrgInviteRestrictByIdOrg()
     * @param {OrganizationApiRemoveInviteRestrictByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public removeInviteRestrictByIdOrg(requestParameters: OrganizationApiRemoveInviteRestrictByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).removeInviteRestrictByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteOrganizationsLogoByIdOrg()
     * @param {OrganizationApiRemoveLogoByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public removeLogoByIdOrg(requestParameters: OrganizationApiRemoveLogoByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).removeLogoByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteOrganizationsMembersAllByIdOrgByIdMember()
     * @param {OrganizationApiRemoveMemberAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public removeMemberAll(requestParameters: OrganizationApiRemoveMemberAllRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).removeMemberAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteOrganizationsMembersByIdOrgByIdMember()
     * @param {OrganizationApiRemoveMemberByIdOrgByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public removeMemberByIdOrgByIdMember(requestParameters: OrganizationApiRemoveMemberByIdOrgByIdMemberRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).removeMemberByIdOrgByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsByIdOrg()
     * @param {OrganizationApiUpdateByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updateByIdOrg(requestParameters: OrganizationApiUpdateByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updateByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsDescByIdOrg()
     * @param {OrganizationApiUpdateDescriptionByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updateDescriptionByIdOrg(requestParameters: OrganizationApiUpdateDescriptionByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updateDescriptionByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsDisplayNameByIdOrg()
     * @param {OrganizationApiUpdateDisplayNameByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updateDisplayNameByIdOrg(requestParameters: OrganizationApiUpdateDisplayNameByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updateDisplayNameByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsMembersByIdOrg()
     * @param {OrganizationApiUpdateMembersByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updateMembersByIdOrg(requestParameters: OrganizationApiUpdateMembersByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updateMembersByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsMembersByIdOrgByIdMember()
     * @param {OrganizationApiUpdateMembersByIdOrgByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updateMembersByIdOrgByIdMember(requestParameters: OrganizationApiUpdateMembersByIdOrgByIdMemberRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updateMembersByIdOrgByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsMembersDeactivatedByIdOrgByIdMember()
     * @param {OrganizationApiUpdateMembersDeactivatedByIdOrgByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updateMembersDeactivatedByIdOrgByIdMember(requestParameters: OrganizationApiUpdateMembersDeactivatedByIdOrgByIdMemberRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updateMembersDeactivatedByIdOrgByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsMembershipsByIdOrgByIdMembership()
     * @param {OrganizationApiUpdateMembershipByIdOrgByIdMembershipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updateMembershipByIdOrgByIdMembership(requestParameters: OrganizationApiUpdateMembershipByIdOrgByIdMembershipRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updateMembershipByIdOrgByIdMembership(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsNameByIdOrg()
     * @param {OrganizationApiUpdateNameByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updateNameByIdOrg(requestParameters: OrganizationApiUpdateNameByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updateNameByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsPrefsAssociatedDomainByIdOrg()
     * @param {OrganizationApiUpdatePrefsAssociatedDomainByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updatePrefsAssociatedDomainByIdOrg(requestParameters: OrganizationApiUpdatePrefsAssociatedDomainByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updatePrefsAssociatedDomainByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg()
     * @param {OrganizationApiUpdatePrefsBoardVisibilityRestrictByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updatePrefsBoardVisibilityRestrictByIdOrg(requestParameters: OrganizationApiUpdatePrefsBoardVisibilityRestrictByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updatePrefsBoardVisibilityRestrictByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg()
     * @param {OrganizationApiUpdatePrefsBoardVisibilityRestrictPublicByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updatePrefsBoardVisibilityRestrictPublicByIdOrg(requestParameters: OrganizationApiUpdatePrefsBoardVisibilityRestrictPublicByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updatePrefsBoardVisibilityRestrictPublicByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsPrefsExternalMembersDisabledByIdOrg()
     * @param {OrganizationApiUpdatePrefsExternalMembersDisabledByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updatePrefsExternalMembersDisabledByIdOrg(requestParameters: OrganizationApiUpdatePrefsExternalMembersDisabledByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updatePrefsExternalMembersDisabledByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsPrefsGoogleAppsVersionByIdOrg()
     * @param {OrganizationApiUpdatePrefsGoogleAppsVersionByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updatePrefsGoogleAppsVersionByIdOrg(requestParameters: OrganizationApiUpdatePrefsGoogleAppsVersionByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updatePrefsGoogleAppsVersionByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsPrefsOrgInviteRestrictByIdOrg()
     * @param {OrganizationApiUpdatePrefsOrgInviteRestrictByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updatePrefsOrgInviteRestrictByIdOrg(requestParameters: OrganizationApiUpdatePrefsOrgInviteRestrictByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updatePrefsOrgInviteRestrictByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsPrefsPermissionLevelByIdOrg()
     * @param {OrganizationApiUpdatePrefsPermissionLevelByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updatePrefsPermissionLevelByIdOrg(requestParameters: OrganizationApiUpdatePrefsPermissionLevelByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updatePrefsPermissionLevelByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg()
     * @param {OrganizationApiUpdatePrefsVisibilityByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updatePrefsVisibilityByIdOrg(requestParameters: OrganizationApiUpdatePrefsVisibilityByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updatePrefsVisibilityByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrganizationsWebsiteByIdOrg()
     * @param {OrganizationApiUpdateWebsiteByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public updateWebsiteByIdOrg(requestParameters: OrganizationApiUpdateWebsiteByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).updateWebsiteByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addOrganizationsLogoByIdOrg()
     * @param {OrganizationApiUploadLogoByIdOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApiGenerated
     */
    public uploadLogoByIdOrg(requestParameters: OrganizationApiUploadLogoByIdOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).uploadLogoByIdOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
