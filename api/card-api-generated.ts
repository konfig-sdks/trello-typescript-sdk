/* tslint:disable */
/* eslint-disable */
/*
Trello

This document describes the REST API of Trello as published by Trello.com.
 - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>
 - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ActionsComments } from '../models';
// @ts-ignore
import { Cards } from '../models';
// @ts-ignore
import { CardsActionsComments } from '../models';
// @ts-ignore
import { CardsAttachments } from '../models';
// @ts-ignore
import { CardsChecklistCheckItem } from '../models';
// @ts-ignore
import { CardsChecklistCheckItemName } from '../models';
// @ts-ignore
import { CardsChecklistCheckItemPos } from '../models';
// @ts-ignore
import { CardsChecklistCheckItemState } from '../models';
// @ts-ignore
import { CardsChecklistIdChecklistCurrentCheckItem } from '../models';
// @ts-ignore
import { CardsChecklists } from '../models';
// @ts-ignore
import { CardsClosed } from '../models';
// @ts-ignore
import { CardsDesc } from '../models';
// @ts-ignore
import { CardsDue } from '../models';
// @ts-ignore
import { CardsIdAttachmentCover } from '../models';
// @ts-ignore
import { CardsIdBoard } from '../models';
// @ts-ignore
import { CardsIdLabels } from '../models';
// @ts-ignore
import { CardsIdList } from '../models';
// @ts-ignore
import { CardsIdMembers } from '../models';
// @ts-ignore
import { CardsLabels } from '../models';
// @ts-ignore
import { CardsMembersVoted } from '../models';
// @ts-ignore
import { CardsName } from '../models';
// @ts-ignore
import { CardsPos } from '../models';
// @ts-ignore
import { CardsStickers } from '../models';
// @ts-ignore
import { CardsSubscribed } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CardApi - axios parameter creator
 * @export
 */
export const CardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addCardsActionsCommentsByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {ActionsComments} actionsComments Attributes of \&quot;Actions Comments\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addActionsCommentsByIdCard: async (idCard: string, actionsComments: ActionsComments, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('addActionsCommentsByIdCard', 'idCard', idCard)
            // verify required parameter 'actionsComments' is not null or undefined
            assertParamExists('addActionsCommentsByIdCard', 'actionsComments', actionsComments)
            const localVarPath = `/cards/{idCard}/actions/comments`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: actionsComments,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/actions/comments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(actionsComments, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addCardsAttachmentsByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsAttachments} cardsAttachments Attributes of \&quot;Cards Attachments\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAttachmentsByIdCard: async (idCard: string, cardsAttachments: CardsAttachments, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('addAttachmentsByIdCard', 'idCard', idCard)
            // verify required parameter 'cardsAttachments' is not null or undefined
            assertParamExists('addAttachmentsByIdCard', 'cardsAttachments', cardsAttachments)
            const localVarPath = `/cards/{idCard}/attachments`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsAttachments,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/attachments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsAttachments, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addCardsChecklistCheckItemByIdCardByIdChecklist()
         * @param {string} idCard card id or shortlink
         * @param {string} idChecklist idChecklist
         * @param {CardsChecklistCheckItem} cardsChecklistCheckItem Attributes of \&quot;Cards Checklist Check Item\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addChecklistCheckItem: async (idCard: string, idChecklist: string, cardsChecklistCheckItem: CardsChecklistCheckItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('addChecklistCheckItem', 'idCard', idCard)
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('addChecklistCheckItem', 'idChecklist', idChecklist)
            // verify required parameter 'cardsChecklistCheckItem' is not null or undefined
            assertParamExists('addChecklistCheckItem', 'cardsChecklistCheckItem', cardsChecklistCheckItem)
            const localVarPath = `/cards/{idCard}/checklist/{idChecklist}/checkItem`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsChecklistCheckItem,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/checklist/{idChecklist}/checkItem',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsChecklistCheckItem, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addCardsChecklistsByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsChecklists} cardsChecklists Attributes of \&quot;Cards Checklists\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addChecklists: async (idCard: string, cardsChecklists: CardsChecklists, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('addChecklists', 'idCard', idCard)
            // verify required parameter 'cardsChecklists' is not null or undefined
            assertParamExists('addChecklists', 'cardsChecklists', cardsChecklists)
            const localVarPath = `/cards/{idCard}/checklists`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsChecklists,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/checklists',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsChecklists, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addCardsIdLabelsByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsIdLabels} cardsIdLabels Attributes of \&quot;Cards Id Labels\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIdLabelsToCard: async (idCard: string, cardsIdLabels: CardsIdLabels, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('addIdLabelsToCard', 'idCard', idCard)
            // verify required parameter 'cardsIdLabels' is not null or undefined
            assertParamExists('addIdLabelsToCard', 'cardsIdLabels', cardsIdLabels)
            const localVarPath = `/cards/{idCard}/idLabels`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsIdLabels,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/idLabels',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsIdLabels, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addCardsLabelsByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsLabels} cardsLabels Attributes of \&quot;Cards Labels\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLabels: async (idCard: string, cardsLabels: CardsLabels, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('addLabels', 'idCard', idCard)
            // verify required parameter 'cardsLabels' is not null or undefined
            assertParamExists('addLabels', 'cardsLabels', cardsLabels)
            const localVarPath = `/cards/{idCard}/labels`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsLabels,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/labels',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsLabels, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addCardsIdMembersByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsIdMembers} cardsIdMembers Attributes of \&quot;Cards Id Members\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMembers: async (idCard: string, cardsIdMembers: CardsIdMembers, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('addMembers', 'idCard', idCard)
            // verify required parameter 'cardsIdMembers' is not null or undefined
            assertParamExists('addMembers', 'cardsIdMembers', cardsIdMembers)
            const localVarPath = `/cards/{idCard}/idMembers`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsIdMembers,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/idMembers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsIdMembers, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addCardsMembersVotedByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsMembersVoted} cardsMembersVoted Attributes of \&quot;Cards Members Voted\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMembersVoted: async (idCard: string, cardsMembersVoted: CardsMembersVoted, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('addMembersVoted', 'idCard', idCard)
            // verify required parameter 'cardsMembersVoted' is not null or undefined
            assertParamExists('addMembersVoted', 'cardsMembersVoted', cardsMembersVoted)
            const localVarPath = `/cards/{idCard}/membersVoted`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsMembersVoted,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/membersVoted',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsMembersVoted, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addCardsStickersByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsStickers} cardsStickers Attributes of \&quot;Cards Stickers\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStickersByIdCard: async (idCard: string, cardsStickers: CardsStickers, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('addStickersByIdCard', 'idCard', idCard)
            // verify required parameter 'cardsStickers' is not null or undefined
            assertParamExists('addStickersByIdCard', 'cardsStickers', cardsStickers)
            const localVarPath = `/cards/{idCard}/stickers`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsStickers,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/stickers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsStickers, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem()
         * @param {string} idCard card id or shortlink
         * @param {string} idChecklist idChecklist
         * @param {string} idCheckItem idCheckItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCheckItemToCard: async (idCard: string, idChecklist: string, idCheckItem: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('convertCheckItemToCard', 'idCard', idCard)
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('convertCheckItemToCard', 'idChecklist', idChecklist)
            // verify required parameter 'idCheckItem' is not null or undefined
            assertParamExists('convertCheckItemToCard', 'idCheckItem', idCheckItem)
            const localVarPath = `/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/convertToCard`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)))
                .replace(`{${"idCheckItem"}}`, encodeURIComponent(String(idCheckItem !== undefined ? idCheckItem : `-idCheckItem-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/convertToCard',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addCards()
         * @param {Cards} cards Attributes of \&quot;Cards\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndUpdate: async (cards: Cards, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cards' is not null or undefined
            assertParamExists('createAndUpdate', 'cards', cards)
            const localVarPath = `/cards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cards,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cards, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCardsAttachmentsByIdCardByIdAttachment()
         * @param {string} idCard card id or shortlink
         * @param {string} idAttachment idAttachment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachmentsByIdCardByIdAttachment: async (idCard: string, idAttachment: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('deleteAttachmentsByIdCardByIdAttachment', 'idCard', idCard)
            // verify required parameter 'idAttachment' is not null or undefined
            assertParamExists('deleteAttachmentsByIdCardByIdAttachment', 'idAttachment', idAttachment)
            const localVarPath = `/cards/{idCard}/attachments/{idAttachment}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idAttachment"}}`, encodeURIComponent(String(idAttachment !== undefined ? idAttachment : `-idAttachment-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/attachments/{idAttachment}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCardsChecklistsByIdCardByIdChecklist()
         * @param {string} idCard card id or shortlink
         * @param {string} idChecklist idChecklist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChecklistByIdCardByIdChecklist: async (idCard: string, idChecklist: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('deleteChecklistByIdCardByIdChecklist', 'idCard', idCard)
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('deleteChecklistByIdCardByIdChecklist', 'idChecklist', idChecklist)
            const localVarPath = `/cards/{idCard}/checklists/{idChecklist}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/checklists/{idChecklist}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCardsAttachmentsByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {string} [fields] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
         * @param {string} [filter] A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachmentsByIdCard: async (idCard: string, fields?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('getAttachmentsByIdCard', 'idCard', idCard)
            const localVarPath = `/cards/{idCard}/attachments`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/attachments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCardsAttachmentsByIdCardByIdAttachment()
         * @param {string} idCard card id or shortlink
         * @param {string} idAttachment idAttachment
         * @param {string} [fields] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachmentsByIds: async (idCard: string, idAttachment: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('getAttachmentsByIds', 'idCard', idCard)
            // verify required parameter 'idAttachment' is not null or undefined
            assertParamExists('getAttachmentsByIds', 'idAttachment', idAttachment)
            const localVarPath = `/cards/{idCard}/attachments/{idAttachment}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idAttachment"}}`, encodeURIComponent(String(idAttachment !== undefined ? idAttachment : `-idAttachment-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/attachments/{idAttachment}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCardsBoardByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {string} [fields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardById: async (idCard: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('getBoardById', 'idCard', idCard)
            const localVarPath = `/cards/{idCard}/board`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/board',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCardsBoardByIdCardByField()
         * @param {string} idCard card id or shortlink
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdCardByField: async (idCard: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('getBoardByIdCardByField', 'idCard', idCard)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getBoardByIdCardByField', 'field', field)
            const localVarPath = `/cards/{idCard}/board/{field}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/board/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCardsByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {string} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [actionsEntities]  true or false
         * @param {string} [actionsDisplay]  true or false
         * @param {string} [actionsLimit] a number from 0 to 1000
         * @param {string} [actionFields] all or a comma-separated list of: data, date, idMemberCreator or type
         * @param {string} [actionMemberCreatorFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [attachments] A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments
         * @param {string} [attachmentFields] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
         * @param {string} [members]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [membersVoted]  true or false
         * @param {string} [memberVotedFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [checkItemStates]  true or false
         * @param {string} [checkItemStateFields] all or a comma-separated list of: idCheckItem or state
         * @param {string} [checklists] One of: all or none
         * @param {string} [checklistFields] all or a comma-separated list of: idBoard, idCard, name or pos
         * @param {string} [board]  true or false
         * @param {string} [boardFields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {string} [list]  true or false
         * @param {string} [listFields] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
         * @param {string} [stickers]  true or false
         * @param {string} [stickerFields] all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex
         * @param {string} [fields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (idCard: string, actions?: string, actionsEntities?: string, actionsDisplay?: string, actionsLimit?: string, actionFields?: string, actionMemberCreatorFields?: string, attachments?: string, attachmentFields?: string, members?: string, memberFields?: string, membersVoted?: string, memberVotedFields?: string, checkItemStates?: string, checkItemStateFields?: string, checklists?: string, checklistFields?: string, board?: string, boardFields?: string, list?: string, listFields?: string, stickers?: string, stickerFields?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('getById', 'idCard', idCard)
            const localVarPath = `/cards/{idCard}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (actions !== undefined) {
                localVarQueryParameter['actions'] = actions;
            }

            if (actionsEntities !== undefined) {
                localVarQueryParameter['actions_entities'] = actionsEntities;
            }

            if (actionsDisplay !== undefined) {
                localVarQueryParameter['actions_display'] = actionsDisplay;
            }

            if (actionsLimit !== undefined) {
                localVarQueryParameter['actions_limit'] = actionsLimit;
            }

            if (actionFields !== undefined) {
                localVarQueryParameter['action_fields'] = actionFields;
            }

            if (actionMemberCreatorFields !== undefined) {
                localVarQueryParameter['action_memberCreator_fields'] = actionMemberCreatorFields;
            }

            if (attachments !== undefined) {
                localVarQueryParameter['attachments'] = attachments;
            }

            if (attachmentFields !== undefined) {
                localVarQueryParameter['attachment_fields'] = attachmentFields;
            }

            if (members !== undefined) {
                localVarQueryParameter['members'] = members;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (membersVoted !== undefined) {
                localVarQueryParameter['membersVoted'] = membersVoted;
            }

            if (memberVotedFields !== undefined) {
                localVarQueryParameter['memberVoted_fields'] = memberVotedFields;
            }

            if (checkItemStates !== undefined) {
                localVarQueryParameter['checkItemStates'] = checkItemStates;
            }

            if (checkItemStateFields !== undefined) {
                localVarQueryParameter['checkItemState_fields'] = checkItemStateFields;
            }

            if (checklists !== undefined) {
                localVarQueryParameter['checklists'] = checklists;
            }

            if (checklistFields !== undefined) {
                localVarQueryParameter['checklist_fields'] = checklistFields;
            }

            if (board !== undefined) {
                localVarQueryParameter['board'] = board;
            }

            if (boardFields !== undefined) {
                localVarQueryParameter['board_fields'] = boardFields;
            }

            if (list !== undefined) {
                localVarQueryParameter['list'] = list;
            }

            if (listFields !== undefined) {
                localVarQueryParameter['list_fields'] = listFields;
            }

            if (stickers !== undefined) {
                localVarQueryParameter['stickers'] = stickers;
            }

            if (stickerFields !== undefined) {
                localVarQueryParameter['sticker_fields'] = stickerFields;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCardsByIdCardByField()
         * @param {string} idCard card id or shortlink
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdField: async (idCard: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('getByIdField', 'idCard', idCard)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getByIdField', 'field', field)
            const localVarPath = `/cards/{idCard}/{field}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCardsListByIdCardByField()
         * @param {string} idCard card id or shortlink
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsListByIdCardByField: async (idCard: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('getCardsListByIdCardByField', 'idCard', idCard)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getCardsListByIdCardByField', 'field', field)
            const localVarPath = `/cards/{idCard}/list/{field}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/list/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCardsCheckItemStatesByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {string} [fields] all or a comma-separated list of: idCheckItem or state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckItemStatesById: async (idCard: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('getCheckItemStatesById', 'idCard', idCard)
            const localVarPath = `/cards/{idCard}/checkItemStates`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/checkItemStates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCardsChecklistsByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {string} [cards] One of: all, closed, none, open or visible
         * @param {string} [cardFields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {string} [checkItems] One of: all or none
         * @param {string} [checkItemFields] all or a comma-separated list of: name, nameData, pos, state or type
         * @param {string} [filter] One of: all or none
         * @param {string} [fields] all or a comma-separated list of: idBoard, idCard, name or pos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChecklistsById: async (idCard: string, cards?: string, cardFields?: string, checkItems?: string, checkItemFields?: string, filter?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('getChecklistsById', 'idCard', idCard)
            const localVarPath = `/cards/{idCard}/checklists`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (cards !== undefined) {
                localVarQueryParameter['cards'] = cards;
            }

            if (cardFields !== undefined) {
                localVarQueryParameter['card_fields'] = cardFields;
            }

            if (checkItems !== undefined) {
                localVarQueryParameter['checkItems'] = checkItems;
            }

            if (checkItemFields !== undefined) {
                localVarQueryParameter['checkItem_fields'] = checkItemFields;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/checklists',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCardsListByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {string} [fields] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListById: async (idCard: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('getListById', 'idCard', idCard)
            const localVarPath = `/cards/{idCard}/list`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCardsMembersVotedByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {string} [fields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersVotedByIdCard: async (idCard: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('getMembersVotedByIdCard', 'idCard', idCard)
            const localVarPath = `/cards/{idCard}/membersVoted`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/membersVoted',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCardsStickersByIdCardByIdSticker()
         * @param {string} idCard card id or shortlink
         * @param {string} idSticker idSticker
         * @param {string} [fields] all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStickerByIds: async (idCard: string, idSticker: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('getStickerByIds', 'idCard', idCard)
            // verify required parameter 'idSticker' is not null or undefined
            assertParamExists('getStickerByIds', 'idSticker', idSticker)
            const localVarPath = `/cards/{idCard}/stickers/{idSticker}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idSticker"}}`, encodeURIComponent(String(idSticker !== undefined ? idSticker : `-idSticker-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/stickers/{idSticker}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCardsStickersByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {string} [fields] all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStickersByIdCard: async (idCard: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('getStickersByIdCard', 'idCard', idCard)
            const localVarPath = `/cards/{idCard}/stickers`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/stickers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCardsActionsByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {string} [entities]  true or false
         * @param {string} [display]  true or false
         * @param {string} [filter] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [fields] all or a comma-separated list of: data, date, idMemberCreator or type
         * @param {string} [limit] a number from 0 to 1000
         * @param {string} [format] One of: count, list or minimal
         * @param {string} [since] A date, null or lastView
         * @param {string} [before] A date, or null
         * @param {string} [page] Page * limit must be less than 1000
         * @param {string} [idModels] Only return actions related to these model ids
         * @param {string} [member]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [memberCreator]  true or false
         * @param {string} [memberCreatorFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCardActionsById: async (idCard: string, entities?: string, display?: string, filter?: string, fields?: string, limit?: string, format?: string, since?: string, before?: string, page?: string, idModels?: string, member?: string, memberFields?: string, memberCreator?: string, memberCreatorFields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('listCardActionsById', 'idCard', idCard)
            const localVarPath = `/cards/{idCard}/actions`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (entities !== undefined) {
                localVarQueryParameter['entities'] = entities;
            }

            if (display !== undefined) {
                localVarQueryParameter['display'] = display;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (idModels !== undefined) {
                localVarQueryParameter['idModels'] = idModels;
            }

            if (member !== undefined) {
                localVarQueryParameter['member'] = member;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (memberCreator !== undefined) {
                localVarQueryParameter['memberCreator'] = memberCreator;
            }

            if (memberCreatorFields !== undefined) {
                localVarQueryParameter['memberCreator_fields'] = memberCreatorFields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/actions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCardsMembersByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {string} [fields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembersByIdCard: async (idCard: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('listMembersByIdCard', 'idCard', idCard)
            const localVarPath = `/cards/{idCard}/members`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/members',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addCardsMarkAssociatedNotificationsReadByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAssociatedNotificationsRead: async (idCard: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('markAssociatedNotificationsRead', 'idCard', idCard)
            const localVarPath = `/cards/{idCard}/markAssociatedNotificationsRead`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/markAssociatedNotificationsRead',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the original author of the comment, or someone with higher permissions than the original author.
         * @summary deleteCardsActionsCommentsByIdCardByIdAction()
         * @param {string} idCard card id or shortlink
         * @param {string} idAction idAction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeActionCommentByIdCardByIdAction: async (idCard: string, idAction: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('removeActionCommentByIdCardByIdAction', 'idCard', idCard)
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('removeActionCommentByIdCardByIdAction', 'idAction', idAction)
            const localVarPath = `/cards/{idCard}/actions/{idAction}/comments`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/actions/{idAction}/comments',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCardsByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByIdCard: async (idCard: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('removeByIdCard', 'idCard', idCard)
            const localVarPath = `/cards/{idCard}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem()
         * @param {string} idCard card id or shortlink
         * @param {string} idChecklist idChecklist
         * @param {string} idCheckItem idCheckItem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeChecklistCheckItem: async (idCard: string, idChecklist: string, idCheckItem: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('removeChecklistCheckItem', 'idCard', idCard)
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('removeChecklistCheckItem', 'idChecklist', idChecklist)
            // verify required parameter 'idCheckItem' is not null or undefined
            assertParamExists('removeChecklistCheckItem', 'idCheckItem', idCheckItem)
            const localVarPath = `/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)))
                .replace(`{${"idCheckItem"}}`, encodeURIComponent(String(idCheckItem !== undefined ? idCheckItem : `-idCheckItem-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCardsIdLabelsByIdCardByIdLabel()
         * @param {string} idCard card id or shortlink
         * @param {string} idLabel idLabel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLabelByIdCardByIdLabel: async (idCard: string, idLabel: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('removeLabelByIdCardByIdLabel', 'idCard', idCard)
            // verify required parameter 'idLabel' is not null or undefined
            assertParamExists('removeLabelByIdCardByIdLabel', 'idLabel', idLabel)
            const localVarPath = `/cards/{idCard}/idLabels/{idLabel}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idLabel"}}`, encodeURIComponent(String(idLabel !== undefined ? idLabel : `-idLabel-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/idLabels/{idLabel}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCardsLabelsByIdCardByColor()
         * @param {string} idCard card id or shortlink
         * @param {string} color color
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLabelsByIdCardByColor: async (idCard: string, color: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('removeLabelsByIdCardByColor', 'idCard', idCard)
            // verify required parameter 'color' is not null or undefined
            assertParamExists('removeLabelsByIdCardByColor', 'color', color)
            const localVarPath = `/cards/{idCard}/labels/{color}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"color"}}`, encodeURIComponent(String(color !== undefined ? color : `-color-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/labels/{color}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCardsIdMembersByIdCardByIdMember()
         * @param {string} idCard card id or shortlink
         * @param {string} idMember idMember
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMemberByIdMember: async (idCard: string, idMember: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('removeMemberByIdMember', 'idCard', idCard)
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('removeMemberByIdMember', 'idMember', idMember)
            const localVarPath = `/cards/{idCard}/idMembers/{idMember}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/idMembers/{idMember}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCardsMembersVotedByIdCardByIdMember()
         * @param {string} idCard card id or shortlink
         * @param {string} idMember idMember
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMembersVotedByIdCardByIdMember: async (idCard: string, idMember: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('removeMembersVotedByIdCardByIdMember', 'idCard', idCard)
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('removeMembersVotedByIdCardByIdMember', 'idMember', idMember)
            const localVarPath = `/cards/{idCard}/membersVoted/{idMember}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/membersVoted/{idMember}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCardsStickersByIdCardByIdSticker()
         * @param {string} idCard card id or shortlink
         * @param {string} idSticker idSticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeStickerByIds: async (idCard: string, idSticker: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('removeStickerByIds', 'idCard', idCard)
            // verify required parameter 'idSticker' is not null or undefined
            assertParamExists('removeStickerByIds', 'idSticker', idSticker)
            const localVarPath = `/cards/{idCard}/stickers/{idSticker}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idSticker"}}`, encodeURIComponent(String(idSticker !== undefined ? idSticker : `-idSticker-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/stickers/{idSticker}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the original author of the comment.
         * @summary updateCardsActionsCommentsByIdCardByIdAction()
         * @param {string} idCard card id or shortlink
         * @param {string} idAction idAction
         * @param {CardsActionsComments} cardsActionsComments Attributes of \&quot;Cards Actions Comments\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateActionCommentByIdCardByIdAction: async (idCard: string, idAction: string, cardsActionsComments: CardsActionsComments, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateActionCommentByIdCardByIdAction', 'idCard', idCard)
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('updateActionCommentByIdCardByIdAction', 'idAction', idAction)
            // verify required parameter 'cardsActionsComments' is not null or undefined
            assertParamExists('updateActionCommentByIdCardByIdAction', 'cardsActionsComments', cardsActionsComments)
            const localVarPath = `/cards/{idCard}/actions/{idAction}/comments`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsActionsComments,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/actions/{idAction}/comments',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsActionsComments, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsIdAttachmentCoverByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsIdAttachmentCover} cardsIdAttachmentCover Attributes of \&quot;Cards Id Attachment Cover\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttachmentCoverByIdCard: async (idCard: string, cardsIdAttachmentCover: CardsIdAttachmentCover, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateAttachmentCoverByIdCard', 'idCard', idCard)
            // verify required parameter 'cardsIdAttachmentCover' is not null or undefined
            assertParamExists('updateAttachmentCoverByIdCard', 'cardsIdAttachmentCover', cardsIdAttachmentCover)
            const localVarPath = `/cards/{idCard}/idAttachmentCover`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsIdAttachmentCover,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/idAttachmentCover',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsIdAttachmentCover, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsIdBoardByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsIdBoard} cardsIdBoard Attributes of \&quot;Cards Id Board\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBoardByIdCard: async (idCard: string, cardsIdBoard: CardsIdBoard, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateBoardByIdCard', 'idCard', idCard)
            // verify required parameter 'cardsIdBoard' is not null or undefined
            assertParamExists('updateBoardByIdCard', 'cardsIdBoard', cardsIdBoard)
            const localVarPath = `/cards/{idCard}/idBoard`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsIdBoard,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/idBoard',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsIdBoard, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {Cards} cards Attributes of \&quot;Cards\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdCard: async (idCard: string, cards: Cards, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateByIdCard', 'idCard', idCard)
            // verify required parameter 'cards' is not null or undefined
            assertParamExists('updateByIdCard', 'cards', cards)
            const localVarPath = `/cards/{idCard}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cards,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cards, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem()
         * @param {string} idCard card id or shortlink
         * @param {string} idChecklist idChecklist
         * @param {string} idCheckItem idCheckItem
         * @param {CardsChecklistCheckItemPos} cardsChecklistCheckItemPos Attributes of \&quot;Cards Checklist Check Item Pos\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCheckItemPosById: async (idCard: string, idChecklist: string, idCheckItem: string, cardsChecklistCheckItemPos: CardsChecklistCheckItemPos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateCheckItemPosById', 'idCard', idCard)
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('updateCheckItemPosById', 'idChecklist', idChecklist)
            // verify required parameter 'idCheckItem' is not null or undefined
            assertParamExists('updateCheckItemPosById', 'idCheckItem', idCheckItem)
            // verify required parameter 'cardsChecklistCheckItemPos' is not null or undefined
            assertParamExists('updateCheckItemPosById', 'cardsChecklistCheckItemPos', cardsChecklistCheckItemPos)
            const localVarPath = `/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/pos`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)))
                .replace(`{${"idCheckItem"}}`, encodeURIComponent(String(idCheckItem !== undefined ? idCheckItem : `-idCheckItem-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsChecklistCheckItemPos,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/pos',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsChecklistCheckItemPos, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem()
         * @param {string} idCard card id or shortlink
         * @param {string} idChecklistCurrent idChecklistCurrent
         * @param {string} idCheckItem idCheckItem
         * @param {CardsChecklistIdChecklistCurrentCheckItem} cardsChecklistIdChecklistCurrentCheckItem Attributes of \&quot;Cards Checklist Id Checklist Current Check Item\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChecklistCheckItem: async (idCard: string, idChecklistCurrent: string, idCheckItem: string, cardsChecklistIdChecklistCurrentCheckItem: CardsChecklistIdChecklistCurrentCheckItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateChecklistCheckItem', 'idCard', idCard)
            // verify required parameter 'idChecklistCurrent' is not null or undefined
            assertParamExists('updateChecklistCheckItem', 'idChecklistCurrent', idChecklistCurrent)
            // verify required parameter 'idCheckItem' is not null or undefined
            assertParamExists('updateChecklistCheckItem', 'idCheckItem', idCheckItem)
            // verify required parameter 'cardsChecklistIdChecklistCurrentCheckItem' is not null or undefined
            assertParamExists('updateChecklistCheckItem', 'cardsChecklistIdChecklistCurrentCheckItem', cardsChecklistIdChecklistCurrentCheckItem)
            const localVarPath = `/cards/{idCard}/checklist/{idChecklistCurrent}/checkItem/{idCheckItem}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idChecklistCurrent"}}`, encodeURIComponent(String(idChecklistCurrent !== undefined ? idChecklistCurrent : `-idChecklistCurrent-`)))
                .replace(`{${"idCheckItem"}}`, encodeURIComponent(String(idCheckItem !== undefined ? idCheckItem : `-idCheckItem-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsChecklistIdChecklistCurrentCheckItem,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/checklist/{idChecklistCurrent}/checkItem/{idCheckItem}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsChecklistIdChecklistCurrentCheckItem, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem()
         * @param {string} idCard card id or shortlink
         * @param {string} idChecklist idChecklist
         * @param {string} idCheckItem idCheckItem
         * @param {CardsChecklistCheckItemName} cardsChecklistCheckItemName Attributes of \&quot;Cards Checklist Check Item Name\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChecklistCheckItemNameById: async (idCard: string, idChecklist: string, idCheckItem: string, cardsChecklistCheckItemName: CardsChecklistCheckItemName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateChecklistCheckItemNameById', 'idCard', idCard)
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('updateChecklistCheckItemNameById', 'idChecklist', idChecklist)
            // verify required parameter 'idCheckItem' is not null or undefined
            assertParamExists('updateChecklistCheckItemNameById', 'idCheckItem', idCheckItem)
            // verify required parameter 'cardsChecklistCheckItemName' is not null or undefined
            assertParamExists('updateChecklistCheckItemNameById', 'cardsChecklistCheckItemName', cardsChecklistCheckItemName)
            const localVarPath = `/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/name`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)))
                .replace(`{${"idCheckItem"}}`, encodeURIComponent(String(idCheckItem !== undefined ? idCheckItem : `-idCheckItem-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsChecklistCheckItemName,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/name',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsChecklistCheckItemName, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem()
         * @param {string} idCard card id or shortlink
         * @param {string} idChecklist idChecklist
         * @param {string} idCheckItem idCheckItem
         * @param {CardsChecklistCheckItemState} cardsChecklistCheckItemState Attributes of \&quot;Cards Checklist Check Item State\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChecklistCheckItemState: async (idCard: string, idChecklist: string, idCheckItem: string, cardsChecklistCheckItemState: CardsChecklistCheckItemState, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateChecklistCheckItemState', 'idCard', idCard)
            // verify required parameter 'idChecklist' is not null or undefined
            assertParamExists('updateChecklistCheckItemState', 'idChecklist', idChecklist)
            // verify required parameter 'idCheckItem' is not null or undefined
            assertParamExists('updateChecklistCheckItemState', 'idCheckItem', idCheckItem)
            // verify required parameter 'cardsChecklistCheckItemState' is not null or undefined
            assertParamExists('updateChecklistCheckItemState', 'cardsChecklistCheckItemState', cardsChecklistCheckItemState)
            const localVarPath = `/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/state`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idChecklist"}}`, encodeURIComponent(String(idChecklist !== undefined ? idChecklist : `-idChecklist-`)))
                .replace(`{${"idCheckItem"}}`, encodeURIComponent(String(idCheckItem !== undefined ? idCheckItem : `-idCheckItem-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsChecklistCheckItemState,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/state',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsChecklistCheckItemState, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsClosedByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsClosed} cardsClosed Attributes of \&quot;Cards Closed\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClosedById: async (idCard: string, cardsClosed: CardsClosed, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateClosedById', 'idCard', idCard)
            // verify required parameter 'cardsClosed' is not null or undefined
            assertParamExists('updateClosedById', 'cardsClosed', cardsClosed)
            const localVarPath = `/cards/{idCard}/closed`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsClosed,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/closed',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsClosed, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsDescByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsDesc} cardsDesc Attributes of \&quot;Cards Desc\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDescriptionByIdCard: async (idCard: string, cardsDesc: CardsDesc, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateDescriptionByIdCard', 'idCard', idCard)
            // verify required parameter 'cardsDesc' is not null or undefined
            assertParamExists('updateDescriptionByIdCard', 'cardsDesc', cardsDesc)
            const localVarPath = `/cards/{idCard}/desc`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsDesc,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/desc',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsDesc, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsDueByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsDue} cardsDue Attributes of \&quot;Cards Due\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDueById: async (idCard: string, cardsDue: CardsDue, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateDueById', 'idCard', idCard)
            // verify required parameter 'cardsDue' is not null or undefined
            assertParamExists('updateDueById', 'cardsDue', cardsDue)
            const localVarPath = `/cards/{idCard}/due`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsDue,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/due',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsDue, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsIdListByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsIdList} cardsIdList Attributes of \&quot;Cards Id List\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdListByIdCard: async (idCard: string, cardsIdList: CardsIdList, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateIdListByIdCard', 'idCard', idCard)
            // verify required parameter 'cardsIdList' is not null or undefined
            assertParamExists('updateIdListByIdCard', 'cardsIdList', cardsIdList)
            const localVarPath = `/cards/{idCard}/idList`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsIdList,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/idList',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsIdList, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsIdMembersByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsIdMembers} cardsIdMembers Attributes of \&quot;Cards Id Members\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdMembers: async (idCard: string, cardsIdMembers: CardsIdMembers, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateIdMembers', 'idCard', idCard)
            // verify required parameter 'cardsIdMembers' is not null or undefined
            assertParamExists('updateIdMembers', 'cardsIdMembers', cardsIdMembers)
            const localVarPath = `/cards/{idCard}/idMembers`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsIdMembers,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/idMembers',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsIdMembers, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsLabelsByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsLabels} cardsLabels Attributes of \&quot;Cards Labels\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabels: async (idCard: string, cardsLabels: CardsLabels, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateLabels', 'idCard', idCard)
            // verify required parameter 'cardsLabels' is not null or undefined
            assertParamExists('updateLabels', 'cardsLabels', cardsLabels)
            const localVarPath = `/cards/{idCard}/labels`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsLabels,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/labels',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsLabels, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsNameByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsName} cardsName Attributes of \&quot;Cards Name\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNameById: async (idCard: string, cardsName: CardsName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateNameById', 'idCard', idCard)
            // verify required parameter 'cardsName' is not null or undefined
            assertParamExists('updateNameById', 'cardsName', cardsName)
            const localVarPath = `/cards/{idCard}/name`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsName,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/name',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsName, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsPosByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsPos} cardsPos Attributes of \&quot;Cards Pos\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePosByIdCard: async (idCard: string, cardsPos: CardsPos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updatePosByIdCard', 'idCard', idCard)
            // verify required parameter 'cardsPos' is not null or undefined
            assertParamExists('updatePosByIdCard', 'cardsPos', cardsPos)
            const localVarPath = `/cards/{idCard}/pos`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsPos,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/pos',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsPos, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsStickersByIdCardByIdSticker()
         * @param {string} idCard card id or shortlink
         * @param {string} idSticker idSticker
         * @param {CardsStickers} cardsStickers Attributes of \&quot;Cards Stickers\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStickersByIdCardByIdSticker: async (idCard: string, idSticker: string, cardsStickers: CardsStickers, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateStickersByIdCardByIdSticker', 'idCard', idCard)
            // verify required parameter 'idSticker' is not null or undefined
            assertParamExists('updateStickersByIdCardByIdSticker', 'idSticker', idSticker)
            // verify required parameter 'cardsStickers' is not null or undefined
            assertParamExists('updateStickersByIdCardByIdSticker', 'cardsStickers', cardsStickers)
            const localVarPath = `/cards/{idCard}/stickers/{idSticker}`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)))
                .replace(`{${"idSticker"}}`, encodeURIComponent(String(idSticker !== undefined ? idSticker : `-idSticker-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsStickers,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/stickers/{idSticker}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsStickers, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCardsSubscribedByIdCard()
         * @param {string} idCard card id or shortlink
         * @param {CardsSubscribed} cardsSubscribed Attributes of \&quot;Cards Subscribed\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscribedByIdCard: async (idCard: string, cardsSubscribed: CardsSubscribed, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('updateSubscribedByIdCard', 'idCard', idCard)
            // verify required parameter 'cardsSubscribed' is not null or undefined
            assertParamExists('updateSubscribedByIdCard', 'cardsSubscribed', cardsSubscribed)
            const localVarPath = `/cards/{idCard}/subscribed`
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardsSubscribed,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cards/{idCard}/subscribed',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardsSubscribed, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardApi - functional programming interface
 * @export
 */
export const CardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary addCardsActionsCommentsByIdCard()
         * @param {CardApiAddActionsCommentsByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addActionsCommentsByIdCard(requestParameters: CardApiAddActionsCommentsByIdCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const actionsComments: ActionsComments = {
                text: requestParameters.text
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addActionsCommentsByIdCard(requestParameters.idCard, actionsComments, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addCardsAttachmentsByIdCard()
         * @param {CardApiAddAttachmentsByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAttachmentsByIdCard(requestParameters: CardApiAddAttachmentsByIdCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsAttachments: CardsAttachments = {
                file: requestParameters.file,
                mimeType: requestParameters.mimeType,
                name: requestParameters.name,
                url: requestParameters.url
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAttachmentsByIdCard(requestParameters.idCard, cardsAttachments, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addCardsChecklistCheckItemByIdCardByIdChecklist()
         * @param {CardApiAddChecklistCheckItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addChecklistCheckItem(requestParameters: CardApiAddChecklistCheckItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsChecklistCheckItem: CardsChecklistCheckItem = {
                name: requestParameters.name,
                pos: requestParameters.pos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addChecklistCheckItem(requestParameters.idCard, requestParameters.idChecklist, cardsChecklistCheckItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addCardsChecklistsByIdCard()
         * @param {CardApiAddChecklistsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addChecklists(requestParameters: CardApiAddChecklistsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsChecklists: CardsChecklists = {
                idChecklistSource: requestParameters.idChecklistSource,
                name: requestParameters.name,
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addChecklists(requestParameters.idCard, cardsChecklists, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addCardsIdLabelsByIdCard()
         * @param {CardApiAddIdLabelsToCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addIdLabelsToCard(requestParameters: CardApiAddIdLabelsToCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsIdLabels: CardsIdLabels = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addIdLabelsToCard(requestParameters.idCard, cardsIdLabels, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addCardsLabelsByIdCard()
         * @param {CardApiAddLabelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addLabels(requestParameters: CardApiAddLabelsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsLabels: CardsLabels = {
                color: requestParameters.color,
                name: requestParameters.name,
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addLabels(requestParameters.idCard, cardsLabels, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addCardsIdMembersByIdCard()
         * @param {CardApiAddMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMembers(requestParameters: CardApiAddMembersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsIdMembers: CardsIdMembers = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMembers(requestParameters.idCard, cardsIdMembers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addCardsMembersVotedByIdCard()
         * @param {CardApiAddMembersVotedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMembersVoted(requestParameters: CardApiAddMembersVotedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsMembersVoted: CardsMembersVoted = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMembersVoted(requestParameters.idCard, cardsMembersVoted, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addCardsStickersByIdCard()
         * @param {CardApiAddStickersByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addStickersByIdCard(requestParameters: CardApiAddStickersByIdCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsStickers: CardsStickers = {
                image: requestParameters.image,
                left: requestParameters.left,
                rotate: requestParameters.rotate,
                top: requestParameters.top,
                zIndex: requestParameters.zIndex
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addStickersByIdCard(requestParameters.idCard, cardsStickers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem()
         * @param {CardApiConvertCheckItemToCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertCheckItemToCard(requestParameters: CardApiConvertCheckItemToCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertCheckItemToCard(requestParameters.idCard, requestParameters.idChecklist, requestParameters.idCheckItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addCards()
         * @param {CardApiCreateAndUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAndUpdate(requestParameters: CardApiCreateAndUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cards: Cards = {
                closed: requestParameters.closed,
                desc: requestParameters.desc,
                due: requestParameters.due,
                fileSource: requestParameters.fileSource,
                idAttachmentCover: requestParameters.idAttachmentCover,
                idBoard: requestParameters.idBoard,
                idCardSource: requestParameters.idCardSource,
                idLabels: requestParameters.idLabels,
                idList: requestParameters.idList,
                idMembers: requestParameters.idMembers,
                keepFromSource: requestParameters.keepFromSource,
                labels: requestParameters.labels,
                name: requestParameters.name,
                pos: requestParameters.pos,
                subscribed: requestParameters.subscribed,
                urlSource: requestParameters.urlSource
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAndUpdate(cards, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteCardsAttachmentsByIdCardByIdAttachment()
         * @param {CardApiDeleteAttachmentsByIdCardByIdAttachmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttachmentsByIdCardByIdAttachment(requestParameters: CardApiDeleteAttachmentsByIdCardByIdAttachmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAttachmentsByIdCardByIdAttachment(requestParameters.idCard, requestParameters.idAttachment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteCardsChecklistsByIdCardByIdChecklist()
         * @param {CardApiDeleteChecklistByIdCardByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChecklistByIdCardByIdChecklist(requestParameters: CardApiDeleteChecklistByIdCardByIdChecklistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChecklistByIdCardByIdChecklist(requestParameters.idCard, requestParameters.idChecklist, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCardsAttachmentsByIdCard()
         * @param {CardApiGetAttachmentsByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttachmentsByIdCard(requestParameters: CardApiGetAttachmentsByIdCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttachmentsByIdCard(requestParameters.idCard, requestParameters.fields, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCardsAttachmentsByIdCardByIdAttachment()
         * @param {CardApiGetAttachmentsByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttachmentsByIds(requestParameters: CardApiGetAttachmentsByIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttachmentsByIds(requestParameters.idCard, requestParameters.idAttachment, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCardsBoardByIdCard()
         * @param {CardApiGetBoardByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardById(requestParameters: CardApiGetBoardByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardById(requestParameters.idCard, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCardsBoardByIdCardByField()
         * @param {CardApiGetBoardByIdCardByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardByIdCardByField(requestParameters: CardApiGetBoardByIdCardByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardByIdCardByField(requestParameters.idCard, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCardsByIdCard()
         * @param {CardApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: CardApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.idCard, requestParameters.actions, requestParameters.actionsEntities, requestParameters.actionsDisplay, requestParameters.actionsLimit, requestParameters.actionFields, requestParameters.actionMemberCreatorFields, requestParameters.attachments, requestParameters.attachmentFields, requestParameters.members, requestParameters.memberFields, requestParameters.membersVoted, requestParameters.memberVotedFields, requestParameters.checkItemStates, requestParameters.checkItemStateFields, requestParameters.checklists, requestParameters.checklistFields, requestParameters.board, requestParameters.boardFields, requestParameters.list, requestParameters.listFields, requestParameters.stickers, requestParameters.stickerFields, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCardsByIdCardByField()
         * @param {CardApiGetByIdFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdField(requestParameters: CardApiGetByIdFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdField(requestParameters.idCard, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCardsListByIdCardByField()
         * @param {CardApiGetCardsListByIdCardByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardsListByIdCardByField(requestParameters: CardApiGetCardsListByIdCardByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardsListByIdCardByField(requestParameters.idCard, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCardsCheckItemStatesByIdCard()
         * @param {CardApiGetCheckItemStatesByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCheckItemStatesById(requestParameters: CardApiGetCheckItemStatesByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCheckItemStatesById(requestParameters.idCard, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCardsChecklistsByIdCard()
         * @param {CardApiGetChecklistsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChecklistsById(requestParameters: CardApiGetChecklistsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChecklistsById(requestParameters.idCard, requestParameters.cards, requestParameters.cardFields, requestParameters.checkItems, requestParameters.checkItemFields, requestParameters.filter, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCardsListByIdCard()
         * @param {CardApiGetListByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListById(requestParameters: CardApiGetListByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListById(requestParameters.idCard, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCardsMembersVotedByIdCard()
         * @param {CardApiGetMembersVotedByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembersVotedByIdCard(requestParameters: CardApiGetMembersVotedByIdCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembersVotedByIdCard(requestParameters.idCard, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCardsStickersByIdCardByIdSticker()
         * @param {CardApiGetStickerByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStickerByIds(requestParameters: CardApiGetStickerByIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStickerByIds(requestParameters.idCard, requestParameters.idSticker, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCardsStickersByIdCard()
         * @param {CardApiGetStickersByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStickersByIdCard(requestParameters: CardApiGetStickersByIdCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStickersByIdCard(requestParameters.idCard, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCardsActionsByIdCard()
         * @param {CardApiListCardActionsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCardActionsById(requestParameters: CardApiListCardActionsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCardActionsById(requestParameters.idCard, requestParameters.entities, requestParameters.display, requestParameters.filter, requestParameters.fields, requestParameters.limit, requestParameters.format, requestParameters.since, requestParameters.before, requestParameters.page, requestParameters.idModels, requestParameters.member, requestParameters.memberFields, requestParameters.memberCreator, requestParameters.memberCreatorFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCardsMembersByIdCard()
         * @param {CardApiListMembersByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembersByIdCard(requestParameters: CardApiListMembersByIdCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembersByIdCard(requestParameters.idCard, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addCardsMarkAssociatedNotificationsReadByIdCard()
         * @param {CardApiMarkAssociatedNotificationsReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAssociatedNotificationsRead(requestParameters: CardApiMarkAssociatedNotificationsReadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markAssociatedNotificationsRead(requestParameters.idCard, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This can only be done by the original author of the comment, or someone with higher permissions than the original author.
         * @summary deleteCardsActionsCommentsByIdCardByIdAction()
         * @param {CardApiRemoveActionCommentByIdCardByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeActionCommentByIdCardByIdAction(requestParameters: CardApiRemoveActionCommentByIdCardByIdActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeActionCommentByIdCardByIdAction(requestParameters.idCard, requestParameters.idAction, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteCardsByIdCard()
         * @param {CardApiRemoveByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeByIdCard(requestParameters: CardApiRemoveByIdCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeByIdCard(requestParameters.idCard, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem()
         * @param {CardApiRemoveChecklistCheckItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeChecklistCheckItem(requestParameters: CardApiRemoveChecklistCheckItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeChecklistCheckItem(requestParameters.idCard, requestParameters.idChecklist, requestParameters.idCheckItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteCardsIdLabelsByIdCardByIdLabel()
         * @param {CardApiRemoveLabelByIdCardByIdLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeLabelByIdCardByIdLabel(requestParameters: CardApiRemoveLabelByIdCardByIdLabelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeLabelByIdCardByIdLabel(requestParameters.idCard, requestParameters.idLabel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteCardsLabelsByIdCardByColor()
         * @param {CardApiRemoveLabelsByIdCardByColorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeLabelsByIdCardByColor(requestParameters: CardApiRemoveLabelsByIdCardByColorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeLabelsByIdCardByColor(requestParameters.idCard, requestParameters.color, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteCardsIdMembersByIdCardByIdMember()
         * @param {CardApiRemoveMemberByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMemberByIdMember(requestParameters: CardApiRemoveMemberByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMemberByIdMember(requestParameters.idCard, requestParameters.idMember, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteCardsMembersVotedByIdCardByIdMember()
         * @param {CardApiRemoveMembersVotedByIdCardByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMembersVotedByIdCardByIdMember(requestParameters: CardApiRemoveMembersVotedByIdCardByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMembersVotedByIdCardByIdMember(requestParameters.idCard, requestParameters.idMember, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteCardsStickersByIdCardByIdSticker()
         * @param {CardApiRemoveStickerByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeStickerByIds(requestParameters: CardApiRemoveStickerByIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeStickerByIds(requestParameters.idCard, requestParameters.idSticker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This can only be done by the original author of the comment.
         * @summary updateCardsActionsCommentsByIdCardByIdAction()
         * @param {CardApiUpdateActionCommentByIdCardByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateActionCommentByIdCardByIdAction(requestParameters: CardApiUpdateActionCommentByIdCardByIdActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsActionsComments: CardsActionsComments = {
                text: requestParameters.text
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateActionCommentByIdCardByIdAction(requestParameters.idCard, requestParameters.idAction, cardsActionsComments, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsIdAttachmentCoverByIdCard()
         * @param {CardApiUpdateAttachmentCoverByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAttachmentCoverByIdCard(requestParameters: CardApiUpdateAttachmentCoverByIdCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsIdAttachmentCover: CardsIdAttachmentCover = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAttachmentCoverByIdCard(requestParameters.idCard, cardsIdAttachmentCover, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsIdBoardByIdCard()
         * @param {CardApiUpdateBoardByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBoardByIdCard(requestParameters: CardApiUpdateBoardByIdCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsIdBoard: CardsIdBoard = {
                idList: requestParameters.idList,
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBoardByIdCard(requestParameters.idCard, cardsIdBoard, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsByIdCard()
         * @param {CardApiUpdateByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByIdCard(requestParameters: CardApiUpdateByIdCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cards: Cards = {
                closed: requestParameters.closed,
                desc: requestParameters.desc,
                due: requestParameters.due,
                fileSource: requestParameters.fileSource,
                idAttachmentCover: requestParameters.idAttachmentCover,
                idBoard: requestParameters.idBoard,
                idCardSource: requestParameters.idCardSource,
                idLabels: requestParameters.idLabels,
                idList: requestParameters.idList,
                idMembers: requestParameters.idMembers,
                keepFromSource: requestParameters.keepFromSource,
                labels: requestParameters.labels,
                name: requestParameters.name,
                pos: requestParameters.pos,
                subscribed: requestParameters.subscribed,
                urlSource: requestParameters.urlSource
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByIdCard(requestParameters.idCard, cards, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem()
         * @param {CardApiUpdateCheckItemPosByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCheckItemPosById(requestParameters: CardApiUpdateCheckItemPosByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsChecklistCheckItemPos: CardsChecklistCheckItemPos = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCheckItemPosById(requestParameters.idCard, requestParameters.idChecklist, requestParameters.idCheckItem, cardsChecklistCheckItemPos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem()
         * @param {CardApiUpdateChecklistCheckItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateChecklistCheckItem(requestParameters: CardApiUpdateChecklistCheckItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsChecklistIdChecklistCurrentCheckItem: CardsChecklistIdChecklistCurrentCheckItem = {
                idChecklist: requestParameters.idChecklist,
                name: requestParameters.name,
                pos: requestParameters.pos,
                state: requestParameters.state
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateChecklistCheckItem(requestParameters.idCard, requestParameters.idChecklistCurrent, requestParameters.idCheckItem, cardsChecklistIdChecklistCurrentCheckItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem()
         * @param {CardApiUpdateChecklistCheckItemNameByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateChecklistCheckItemNameById(requestParameters: CardApiUpdateChecklistCheckItemNameByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsChecklistCheckItemName: CardsChecklistCheckItemName = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateChecklistCheckItemNameById(requestParameters.idCard, requestParameters.idChecklist, requestParameters.idCheckItem, cardsChecklistCheckItemName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem()
         * @param {CardApiUpdateChecklistCheckItemStateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateChecklistCheckItemState(requestParameters: CardApiUpdateChecklistCheckItemStateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsChecklistCheckItemState: CardsChecklistCheckItemState = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateChecklistCheckItemState(requestParameters.idCard, requestParameters.idChecklist, requestParameters.idCheckItem, cardsChecklistCheckItemState, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsClosedByIdCard()
         * @param {CardApiUpdateClosedByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClosedById(requestParameters: CardApiUpdateClosedByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsClosed: CardsClosed = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClosedById(requestParameters.idCard, cardsClosed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsDescByIdCard()
         * @param {CardApiUpdateDescriptionByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDescriptionByIdCard(requestParameters: CardApiUpdateDescriptionByIdCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsDesc: CardsDesc = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDescriptionByIdCard(requestParameters.idCard, cardsDesc, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsDueByIdCard()
         * @param {CardApiUpdateDueByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDueById(requestParameters: CardApiUpdateDueByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsDue: CardsDue = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDueById(requestParameters.idCard, cardsDue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsIdListByIdCard()
         * @param {CardApiUpdateIdListByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIdListByIdCard(requestParameters: CardApiUpdateIdListByIdCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsIdList: CardsIdList = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIdListByIdCard(requestParameters.idCard, cardsIdList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsIdMembersByIdCard()
         * @param {CardApiUpdateIdMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIdMembers(requestParameters: CardApiUpdateIdMembersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsIdMembers: CardsIdMembers = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIdMembers(requestParameters.idCard, cardsIdMembers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsLabelsByIdCard()
         * @param {CardApiUpdateLabelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLabels(requestParameters: CardApiUpdateLabelsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsLabels: CardsLabels = {
                color: requestParameters.color,
                name: requestParameters.name,
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLabels(requestParameters.idCard, cardsLabels, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsNameByIdCard()
         * @param {CardApiUpdateNameByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNameById(requestParameters: CardApiUpdateNameByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsName: CardsName = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNameById(requestParameters.idCard, cardsName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsPosByIdCard()
         * @param {CardApiUpdatePosByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePosByIdCard(requestParameters: CardApiUpdatePosByIdCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsPos: CardsPos = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePosByIdCard(requestParameters.idCard, cardsPos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsStickersByIdCardByIdSticker()
         * @param {CardApiUpdateStickersByIdCardByIdStickerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStickersByIdCardByIdSticker(requestParameters: CardApiUpdateStickersByIdCardByIdStickerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsStickers: CardsStickers = {
                image: requestParameters.image,
                left: requestParameters.left,
                rotate: requestParameters.rotate,
                top: requestParameters.top,
                zIndex: requestParameters.zIndex
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStickersByIdCardByIdSticker(requestParameters.idCard, requestParameters.idSticker, cardsStickers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCardsSubscribedByIdCard()
         * @param {CardApiUpdateSubscribedByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscribedByIdCard(requestParameters: CardApiUpdateSubscribedByIdCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cardsSubscribed: CardsSubscribed = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscribedByIdCard(requestParameters.idCard, cardsSubscribed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardApi - factory interface
 * @export
 */
export const CardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardApiFp(configuration)
    return {
        /**
         * 
         * @summary addCardsActionsCommentsByIdCard()
         * @param {CardApiAddActionsCommentsByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addActionsCommentsByIdCard(requestParameters: CardApiAddActionsCommentsByIdCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addActionsCommentsByIdCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addCardsAttachmentsByIdCard()
         * @param {CardApiAddAttachmentsByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAttachmentsByIdCard(requestParameters: CardApiAddAttachmentsByIdCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addAttachmentsByIdCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addCardsChecklistCheckItemByIdCardByIdChecklist()
         * @param {CardApiAddChecklistCheckItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addChecklistCheckItem(requestParameters: CardApiAddChecklistCheckItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addChecklistCheckItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addCardsChecklistsByIdCard()
         * @param {CardApiAddChecklistsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addChecklists(requestParameters: CardApiAddChecklistsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addChecklists(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addCardsIdLabelsByIdCard()
         * @param {CardApiAddIdLabelsToCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIdLabelsToCard(requestParameters: CardApiAddIdLabelsToCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addIdLabelsToCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addCardsLabelsByIdCard()
         * @param {CardApiAddLabelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLabels(requestParameters: CardApiAddLabelsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addLabels(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addCardsIdMembersByIdCard()
         * @param {CardApiAddMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMembers(requestParameters: CardApiAddMembersRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addMembers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addCardsMembersVotedByIdCard()
         * @param {CardApiAddMembersVotedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMembersVoted(requestParameters: CardApiAddMembersVotedRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addMembersVoted(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addCardsStickersByIdCard()
         * @param {CardApiAddStickersByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStickersByIdCard(requestParameters: CardApiAddStickersByIdCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addStickersByIdCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem()
         * @param {CardApiConvertCheckItemToCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCheckItemToCard(requestParameters: CardApiConvertCheckItemToCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.convertCheckItemToCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addCards()
         * @param {CardApiCreateAndUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndUpdate(requestParameters: CardApiCreateAndUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createAndUpdate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCardsAttachmentsByIdCardByIdAttachment()
         * @param {CardApiDeleteAttachmentsByIdCardByIdAttachmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachmentsByIdCardByIdAttachment(requestParameters: CardApiDeleteAttachmentsByIdCardByIdAttachmentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAttachmentsByIdCardByIdAttachment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCardsChecklistsByIdCardByIdChecklist()
         * @param {CardApiDeleteChecklistByIdCardByIdChecklistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChecklistByIdCardByIdChecklist(requestParameters: CardApiDeleteChecklistByIdCardByIdChecklistRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteChecklistByIdCardByIdChecklist(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCardsAttachmentsByIdCard()
         * @param {CardApiGetAttachmentsByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachmentsByIdCard(requestParameters: CardApiGetAttachmentsByIdCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAttachmentsByIdCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCardsAttachmentsByIdCardByIdAttachment()
         * @param {CardApiGetAttachmentsByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachmentsByIds(requestParameters: CardApiGetAttachmentsByIdsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAttachmentsByIds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCardsBoardByIdCard()
         * @param {CardApiGetBoardByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardById(requestParameters: CardApiGetBoardByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCardsBoardByIdCardByField()
         * @param {CardApiGetBoardByIdCardByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdCardByField(requestParameters: CardApiGetBoardByIdCardByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardByIdCardByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCardsByIdCard()
         * @param {CardApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: CardApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCardsByIdCardByField()
         * @param {CardApiGetByIdFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdField(requestParameters: CardApiGetByIdFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getByIdField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCardsListByIdCardByField()
         * @param {CardApiGetCardsListByIdCardByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsListByIdCardByField(requestParameters: CardApiGetCardsListByIdCardByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCardsListByIdCardByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCardsCheckItemStatesByIdCard()
         * @param {CardApiGetCheckItemStatesByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckItemStatesById(requestParameters: CardApiGetCheckItemStatesByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCheckItemStatesById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCardsChecklistsByIdCard()
         * @param {CardApiGetChecklistsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChecklistsById(requestParameters: CardApiGetChecklistsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getChecklistsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCardsListByIdCard()
         * @param {CardApiGetListByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListById(requestParameters: CardApiGetListByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getListById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCardsMembersVotedByIdCard()
         * @param {CardApiGetMembersVotedByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersVotedByIdCard(requestParameters: CardApiGetMembersVotedByIdCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMembersVotedByIdCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCardsStickersByIdCardByIdSticker()
         * @param {CardApiGetStickerByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStickerByIds(requestParameters: CardApiGetStickerByIdsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getStickerByIds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCardsStickersByIdCard()
         * @param {CardApiGetStickersByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStickersByIdCard(requestParameters: CardApiGetStickersByIdCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getStickersByIdCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCardsActionsByIdCard()
         * @param {CardApiListCardActionsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCardActionsById(requestParameters: CardApiListCardActionsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listCardActionsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCardsMembersByIdCard()
         * @param {CardApiListMembersByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembersByIdCard(requestParameters: CardApiListMembersByIdCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listMembersByIdCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addCardsMarkAssociatedNotificationsReadByIdCard()
         * @param {CardApiMarkAssociatedNotificationsReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAssociatedNotificationsRead(requestParameters: CardApiMarkAssociatedNotificationsReadRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.markAssociatedNotificationsRead(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the original author of the comment, or someone with higher permissions than the original author.
         * @summary deleteCardsActionsCommentsByIdCardByIdAction()
         * @param {CardApiRemoveActionCommentByIdCardByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeActionCommentByIdCardByIdAction(requestParameters: CardApiRemoveActionCommentByIdCardByIdActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeActionCommentByIdCardByIdAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCardsByIdCard()
         * @param {CardApiRemoveByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByIdCard(requestParameters: CardApiRemoveByIdCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeByIdCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem()
         * @param {CardApiRemoveChecklistCheckItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeChecklistCheckItem(requestParameters: CardApiRemoveChecklistCheckItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeChecklistCheckItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCardsIdLabelsByIdCardByIdLabel()
         * @param {CardApiRemoveLabelByIdCardByIdLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLabelByIdCardByIdLabel(requestParameters: CardApiRemoveLabelByIdCardByIdLabelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeLabelByIdCardByIdLabel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCardsLabelsByIdCardByColor()
         * @param {CardApiRemoveLabelsByIdCardByColorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLabelsByIdCardByColor(requestParameters: CardApiRemoveLabelsByIdCardByColorRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeLabelsByIdCardByColor(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCardsIdMembersByIdCardByIdMember()
         * @param {CardApiRemoveMemberByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMemberByIdMember(requestParameters: CardApiRemoveMemberByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeMemberByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCardsMembersVotedByIdCardByIdMember()
         * @param {CardApiRemoveMembersVotedByIdCardByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMembersVotedByIdCardByIdMember(requestParameters: CardApiRemoveMembersVotedByIdCardByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeMembersVotedByIdCardByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCardsStickersByIdCardByIdSticker()
         * @param {CardApiRemoveStickerByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeStickerByIds(requestParameters: CardApiRemoveStickerByIdsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeStickerByIds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the original author of the comment.
         * @summary updateCardsActionsCommentsByIdCardByIdAction()
         * @param {CardApiUpdateActionCommentByIdCardByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateActionCommentByIdCardByIdAction(requestParameters: CardApiUpdateActionCommentByIdCardByIdActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateActionCommentByIdCardByIdAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsIdAttachmentCoverByIdCard()
         * @param {CardApiUpdateAttachmentCoverByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttachmentCoverByIdCard(requestParameters: CardApiUpdateAttachmentCoverByIdCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateAttachmentCoverByIdCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsIdBoardByIdCard()
         * @param {CardApiUpdateBoardByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBoardByIdCard(requestParameters: CardApiUpdateBoardByIdCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateBoardByIdCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsByIdCard()
         * @param {CardApiUpdateByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdCard(requestParameters: CardApiUpdateByIdCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateByIdCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem()
         * @param {CardApiUpdateCheckItemPosByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCheckItemPosById(requestParameters: CardApiUpdateCheckItemPosByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateCheckItemPosById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem()
         * @param {CardApiUpdateChecklistCheckItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChecklistCheckItem(requestParameters: CardApiUpdateChecklistCheckItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateChecklistCheckItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem()
         * @param {CardApiUpdateChecklistCheckItemNameByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChecklistCheckItemNameById(requestParameters: CardApiUpdateChecklistCheckItemNameByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateChecklistCheckItemNameById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem()
         * @param {CardApiUpdateChecklistCheckItemStateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChecklistCheckItemState(requestParameters: CardApiUpdateChecklistCheckItemStateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateChecklistCheckItemState(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsClosedByIdCard()
         * @param {CardApiUpdateClosedByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClosedById(requestParameters: CardApiUpdateClosedByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateClosedById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsDescByIdCard()
         * @param {CardApiUpdateDescriptionByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDescriptionByIdCard(requestParameters: CardApiUpdateDescriptionByIdCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateDescriptionByIdCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsDueByIdCard()
         * @param {CardApiUpdateDueByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDueById(requestParameters: CardApiUpdateDueByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateDueById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsIdListByIdCard()
         * @param {CardApiUpdateIdListByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdListByIdCard(requestParameters: CardApiUpdateIdListByIdCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateIdListByIdCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsIdMembersByIdCard()
         * @param {CardApiUpdateIdMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdMembers(requestParameters: CardApiUpdateIdMembersRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateIdMembers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsLabelsByIdCard()
         * @param {CardApiUpdateLabelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabels(requestParameters: CardApiUpdateLabelsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateLabels(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsNameByIdCard()
         * @param {CardApiUpdateNameByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNameById(requestParameters: CardApiUpdateNameByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateNameById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsPosByIdCard()
         * @param {CardApiUpdatePosByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePosByIdCard(requestParameters: CardApiUpdatePosByIdCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePosByIdCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsStickersByIdCardByIdSticker()
         * @param {CardApiUpdateStickersByIdCardByIdStickerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStickersByIdCardByIdSticker(requestParameters: CardApiUpdateStickersByIdCardByIdStickerRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateStickersByIdCardByIdSticker(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCardsSubscribedByIdCard()
         * @param {CardApiUpdateSubscribedByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscribedByIdCard(requestParameters: CardApiUpdateSubscribedByIdCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSubscribedByIdCard(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addActionsCommentsByIdCard operation in CardApi.
 * @export
 * @interface CardApiAddActionsCommentsByIdCardRequest
 */
export type CardApiAddActionsCommentsByIdCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiAddActionsCommentsByIdCard
    */
    readonly idCard: string
    
} & ActionsComments

/**
 * Request parameters for addAttachmentsByIdCard operation in CardApi.
 * @export
 * @interface CardApiAddAttachmentsByIdCardRequest
 */
export type CardApiAddAttachmentsByIdCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiAddAttachmentsByIdCard
    */
    readonly idCard: string
    
} & CardsAttachments

/**
 * Request parameters for addChecklistCheckItem operation in CardApi.
 * @export
 * @interface CardApiAddChecklistCheckItemRequest
 */
export type CardApiAddChecklistCheckItemRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiAddChecklistCheckItem
    */
    readonly idCard: string
    
    /**
    * idChecklist
    * @type {string}
    * @memberof CardApiAddChecklistCheckItem
    */
    readonly idChecklist: string
    
} & CardsChecklistCheckItem

/**
 * Request parameters for addChecklists operation in CardApi.
 * @export
 * @interface CardApiAddChecklistsRequest
 */
export type CardApiAddChecklistsRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiAddChecklists
    */
    readonly idCard: string
    
} & CardsChecklists

/**
 * Request parameters for addIdLabelsToCard operation in CardApi.
 * @export
 * @interface CardApiAddIdLabelsToCardRequest
 */
export type CardApiAddIdLabelsToCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiAddIdLabelsToCard
    */
    readonly idCard: string
    
} & CardsIdLabels

/**
 * Request parameters for addLabels operation in CardApi.
 * @export
 * @interface CardApiAddLabelsRequest
 */
export type CardApiAddLabelsRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiAddLabels
    */
    readonly idCard: string
    
} & CardsLabels

/**
 * Request parameters for addMembers operation in CardApi.
 * @export
 * @interface CardApiAddMembersRequest
 */
export type CardApiAddMembersRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiAddMembers
    */
    readonly idCard: string
    
} & CardsIdMembers

/**
 * Request parameters for addMembersVoted operation in CardApi.
 * @export
 * @interface CardApiAddMembersVotedRequest
 */
export type CardApiAddMembersVotedRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiAddMembersVoted
    */
    readonly idCard: string
    
} & CardsMembersVoted

/**
 * Request parameters for addStickersByIdCard operation in CardApi.
 * @export
 * @interface CardApiAddStickersByIdCardRequest
 */
export type CardApiAddStickersByIdCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiAddStickersByIdCard
    */
    readonly idCard: string
    
} & CardsStickers

/**
 * Request parameters for convertCheckItemToCard operation in CardApi.
 * @export
 * @interface CardApiConvertCheckItemToCardRequest
 */
export type CardApiConvertCheckItemToCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiConvertCheckItemToCard
    */
    readonly idCard: string
    
    /**
    * idChecklist
    * @type {string}
    * @memberof CardApiConvertCheckItemToCard
    */
    readonly idChecklist: string
    
    /**
    * idCheckItem
    * @type {string}
    * @memberof CardApiConvertCheckItemToCard
    */
    readonly idCheckItem: string
    
}

/**
 * Request parameters for createAndUpdate operation in CardApi.
 * @export
 * @interface CardApiCreateAndUpdateRequest
 */
export type CardApiCreateAndUpdateRequest = {
    
} & Cards

/**
 * Request parameters for deleteAttachmentsByIdCardByIdAttachment operation in CardApi.
 * @export
 * @interface CardApiDeleteAttachmentsByIdCardByIdAttachmentRequest
 */
export type CardApiDeleteAttachmentsByIdCardByIdAttachmentRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiDeleteAttachmentsByIdCardByIdAttachment
    */
    readonly idCard: string
    
    /**
    * idAttachment
    * @type {string}
    * @memberof CardApiDeleteAttachmentsByIdCardByIdAttachment
    */
    readonly idAttachment: string
    
}

/**
 * Request parameters for deleteChecklistByIdCardByIdChecklist operation in CardApi.
 * @export
 * @interface CardApiDeleteChecklistByIdCardByIdChecklistRequest
 */
export type CardApiDeleteChecklistByIdCardByIdChecklistRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiDeleteChecklistByIdCardByIdChecklist
    */
    readonly idCard: string
    
    /**
    * idChecklist
    * @type {string}
    * @memberof CardApiDeleteChecklistByIdCardByIdChecklist
    */
    readonly idChecklist: string
    
}

/**
 * Request parameters for getAttachmentsByIdCard operation in CardApi.
 * @export
 * @interface CardApiGetAttachmentsByIdCardRequest
 */
export type CardApiGetAttachmentsByIdCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiGetAttachmentsByIdCard
    */
    readonly idCard: string
    
    /**
    * all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    * @type {string}
    * @memberof CardApiGetAttachmentsByIdCard
    */
    readonly fields?: string
    
    /**
    * A boolean value or &quot;cover&quot; for only card cover attachments
    * @type {string}
    * @memberof CardApiGetAttachmentsByIdCard
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getAttachmentsByIds operation in CardApi.
 * @export
 * @interface CardApiGetAttachmentsByIdsRequest
 */
export type CardApiGetAttachmentsByIdsRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiGetAttachmentsByIds
    */
    readonly idCard: string
    
    /**
    * idAttachment
    * @type {string}
    * @memberof CardApiGetAttachmentsByIds
    */
    readonly idAttachment: string
    
    /**
    * all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    * @type {string}
    * @memberof CardApiGetAttachmentsByIds
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getBoardById operation in CardApi.
 * @export
 * @interface CardApiGetBoardByIdRequest
 */
export type CardApiGetBoardByIdRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiGetBoardById
    */
    readonly idCard: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof CardApiGetBoardById
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getBoardByIdCardByField operation in CardApi.
 * @export
 * @interface CardApiGetBoardByIdCardByFieldRequest
 */
export type CardApiGetBoardByIdCardByFieldRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiGetBoardByIdCardByField
    */
    readonly idCard: string
    
    /**
    * field
    * @type {string}
    * @memberof CardApiGetBoardByIdCardByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getById operation in CardApi.
 * @export
 * @interface CardApiGetByIdRequest
 */
export type CardApiGetByIdRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly idCard: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly actions?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly actionsEntities?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly actionsDisplay?: string
    
    /**
    * a number from 0 to 1000
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly actionsLimit?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator or type
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly actionFields?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly actionMemberCreatorFields?: string
    
    /**
    * A boolean value or &quot;cover&quot; for only card cover attachments
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly attachments?: string
    
    /**
    * all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly attachmentFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly members?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly memberFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly membersVoted?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly memberVotedFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly checkItemStates?: string
    
    /**
    * all or a comma-separated list of: idCheckItem or state
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly checkItemStateFields?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly checklists?: string
    
    /**
    * all or a comma-separated list of: idBoard, idCard, name or pos
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly checklistFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly board?: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly boardFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly list?: string
    
    /**
    * all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly listFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly stickers?: string
    
    /**
    * all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly stickerFields?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof CardApiGetById
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getByIdField operation in CardApi.
 * @export
 * @interface CardApiGetByIdFieldRequest
 */
export type CardApiGetByIdFieldRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiGetByIdField
    */
    readonly idCard: string
    
    /**
    * field
    * @type {string}
    * @memberof CardApiGetByIdField
    */
    readonly field: string
    
}

/**
 * Request parameters for getCardsListByIdCardByField operation in CardApi.
 * @export
 * @interface CardApiGetCardsListByIdCardByFieldRequest
 */
export type CardApiGetCardsListByIdCardByFieldRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiGetCardsListByIdCardByField
    */
    readonly idCard: string
    
    /**
    * field
    * @type {string}
    * @memberof CardApiGetCardsListByIdCardByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getCheckItemStatesById operation in CardApi.
 * @export
 * @interface CardApiGetCheckItemStatesByIdRequest
 */
export type CardApiGetCheckItemStatesByIdRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiGetCheckItemStatesById
    */
    readonly idCard: string
    
    /**
    * all or a comma-separated list of: idCheckItem or state
    * @type {string}
    * @memberof CardApiGetCheckItemStatesById
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getChecklistsById operation in CardApi.
 * @export
 * @interface CardApiGetChecklistsByIdRequest
 */
export type CardApiGetChecklistsByIdRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiGetChecklistsById
    */
    readonly idCard: string
    
    /**
    * One of: all, closed, none, open or visible
    * @type {string}
    * @memberof CardApiGetChecklistsById
    */
    readonly cards?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof CardApiGetChecklistsById
    */
    readonly cardFields?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof CardApiGetChecklistsById
    */
    readonly checkItems?: string
    
    /**
    * all or a comma-separated list of: name, nameData, pos, state or type
    * @type {string}
    * @memberof CardApiGetChecklistsById
    */
    readonly checkItemFields?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof CardApiGetChecklistsById
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: idBoard, idCard, name or pos
    * @type {string}
    * @memberof CardApiGetChecklistsById
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getListById operation in CardApi.
 * @export
 * @interface CardApiGetListByIdRequest
 */
export type CardApiGetListByIdRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiGetListById
    */
    readonly idCard: string
    
    /**
    * all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    * @type {string}
    * @memberof CardApiGetListById
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getMembersVotedByIdCard operation in CardApi.
 * @export
 * @interface CardApiGetMembersVotedByIdCardRequest
 */
export type CardApiGetMembersVotedByIdCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiGetMembersVotedByIdCard
    */
    readonly idCard: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof CardApiGetMembersVotedByIdCard
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getStickerByIds operation in CardApi.
 * @export
 * @interface CardApiGetStickerByIdsRequest
 */
export type CardApiGetStickerByIdsRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiGetStickerByIds
    */
    readonly idCard: string
    
    /**
    * idSticker
    * @type {string}
    * @memberof CardApiGetStickerByIds
    */
    readonly idSticker: string
    
    /**
    * all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex
    * @type {string}
    * @memberof CardApiGetStickerByIds
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getStickersByIdCard operation in CardApi.
 * @export
 * @interface CardApiGetStickersByIdCardRequest
 */
export type CardApiGetStickersByIdCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiGetStickersByIdCard
    */
    readonly idCard: string
    
    /**
    * all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex
    * @type {string}
    * @memberof CardApiGetStickersByIdCard
    */
    readonly fields?: string
    
}

/**
 * Request parameters for listCardActionsById operation in CardApi.
 * @export
 * @interface CardApiListCardActionsByIdRequest
 */
export type CardApiListCardActionsByIdRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiListCardActionsById
    */
    readonly idCard: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof CardApiListCardActionsById
    */
    readonly entities?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof CardApiListCardActionsById
    */
    readonly display?: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof CardApiListCardActionsById
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator or type
    * @type {string}
    * @memberof CardApiListCardActionsById
    */
    readonly fields?: string
    
    /**
    * a number from 0 to 1000
    * @type {string}
    * @memberof CardApiListCardActionsById
    */
    readonly limit?: string
    
    /**
    * One of: count, list or minimal
    * @type {string}
    * @memberof CardApiListCardActionsById
    */
    readonly format?: string
    
    /**
    * A date, null or lastView
    * @type {string}
    * @memberof CardApiListCardActionsById
    */
    readonly since?: string
    
    /**
    * A date, or null
    * @type {string}
    * @memberof CardApiListCardActionsById
    */
    readonly before?: string
    
    /**
    * Page * limit must be less than 1000
    * @type {string}
    * @memberof CardApiListCardActionsById
    */
    readonly page?: string
    
    /**
    * Only return actions related to these model ids
    * @type {string}
    * @memberof CardApiListCardActionsById
    */
    readonly idModels?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof CardApiListCardActionsById
    */
    readonly member?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof CardApiListCardActionsById
    */
    readonly memberFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof CardApiListCardActionsById
    */
    readonly memberCreator?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof CardApiListCardActionsById
    */
    readonly memberCreatorFields?: string
    
}

/**
 * Request parameters for listMembersByIdCard operation in CardApi.
 * @export
 * @interface CardApiListMembersByIdCardRequest
 */
export type CardApiListMembersByIdCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiListMembersByIdCard
    */
    readonly idCard: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof CardApiListMembersByIdCard
    */
    readonly fields?: string
    
}

/**
 * Request parameters for markAssociatedNotificationsRead operation in CardApi.
 * @export
 * @interface CardApiMarkAssociatedNotificationsReadRequest
 */
export type CardApiMarkAssociatedNotificationsReadRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiMarkAssociatedNotificationsRead
    */
    readonly idCard: string
    
}

/**
 * Request parameters for removeActionCommentByIdCardByIdAction operation in CardApi.
 * @export
 * @interface CardApiRemoveActionCommentByIdCardByIdActionRequest
 */
export type CardApiRemoveActionCommentByIdCardByIdActionRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiRemoveActionCommentByIdCardByIdAction
    */
    readonly idCard: string
    
    /**
    * idAction
    * @type {string}
    * @memberof CardApiRemoveActionCommentByIdCardByIdAction
    */
    readonly idAction: string
    
}

/**
 * Request parameters for removeByIdCard operation in CardApi.
 * @export
 * @interface CardApiRemoveByIdCardRequest
 */
export type CardApiRemoveByIdCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiRemoveByIdCard
    */
    readonly idCard: string
    
}

/**
 * Request parameters for removeChecklistCheckItem operation in CardApi.
 * @export
 * @interface CardApiRemoveChecklistCheckItemRequest
 */
export type CardApiRemoveChecklistCheckItemRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiRemoveChecklistCheckItem
    */
    readonly idCard: string
    
    /**
    * idChecklist
    * @type {string}
    * @memberof CardApiRemoveChecklistCheckItem
    */
    readonly idChecklist: string
    
    /**
    * idCheckItem
    * @type {string}
    * @memberof CardApiRemoveChecklistCheckItem
    */
    readonly idCheckItem: string
    
}

/**
 * Request parameters for removeLabelByIdCardByIdLabel operation in CardApi.
 * @export
 * @interface CardApiRemoveLabelByIdCardByIdLabelRequest
 */
export type CardApiRemoveLabelByIdCardByIdLabelRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiRemoveLabelByIdCardByIdLabel
    */
    readonly idCard: string
    
    /**
    * idLabel
    * @type {string}
    * @memberof CardApiRemoveLabelByIdCardByIdLabel
    */
    readonly idLabel: string
    
}

/**
 * Request parameters for removeLabelsByIdCardByColor operation in CardApi.
 * @export
 * @interface CardApiRemoveLabelsByIdCardByColorRequest
 */
export type CardApiRemoveLabelsByIdCardByColorRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiRemoveLabelsByIdCardByColor
    */
    readonly idCard: string
    
    /**
    * color
    * @type {string}
    * @memberof CardApiRemoveLabelsByIdCardByColor
    */
    readonly color: string
    
}

/**
 * Request parameters for removeMemberByIdMember operation in CardApi.
 * @export
 * @interface CardApiRemoveMemberByIdMemberRequest
 */
export type CardApiRemoveMemberByIdMemberRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiRemoveMemberByIdMember
    */
    readonly idCard: string
    
    /**
    * idMember
    * @type {string}
    * @memberof CardApiRemoveMemberByIdMember
    */
    readonly idMember: string
    
}

/**
 * Request parameters for removeMembersVotedByIdCardByIdMember operation in CardApi.
 * @export
 * @interface CardApiRemoveMembersVotedByIdCardByIdMemberRequest
 */
export type CardApiRemoveMembersVotedByIdCardByIdMemberRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiRemoveMembersVotedByIdCardByIdMember
    */
    readonly idCard: string
    
    /**
    * idMember
    * @type {string}
    * @memberof CardApiRemoveMembersVotedByIdCardByIdMember
    */
    readonly idMember: string
    
}

/**
 * Request parameters for removeStickerByIds operation in CardApi.
 * @export
 * @interface CardApiRemoveStickerByIdsRequest
 */
export type CardApiRemoveStickerByIdsRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiRemoveStickerByIds
    */
    readonly idCard: string
    
    /**
    * idSticker
    * @type {string}
    * @memberof CardApiRemoveStickerByIds
    */
    readonly idSticker: string
    
}

/**
 * Request parameters for updateActionCommentByIdCardByIdAction operation in CardApi.
 * @export
 * @interface CardApiUpdateActionCommentByIdCardByIdActionRequest
 */
export type CardApiUpdateActionCommentByIdCardByIdActionRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateActionCommentByIdCardByIdAction
    */
    readonly idCard: string
    
    /**
    * idAction
    * @type {string}
    * @memberof CardApiUpdateActionCommentByIdCardByIdAction
    */
    readonly idAction: string
    
} & CardsActionsComments

/**
 * Request parameters for updateAttachmentCoverByIdCard operation in CardApi.
 * @export
 * @interface CardApiUpdateAttachmentCoverByIdCardRequest
 */
export type CardApiUpdateAttachmentCoverByIdCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateAttachmentCoverByIdCard
    */
    readonly idCard: string
    
} & CardsIdAttachmentCover

/**
 * Request parameters for updateBoardByIdCard operation in CardApi.
 * @export
 * @interface CardApiUpdateBoardByIdCardRequest
 */
export type CardApiUpdateBoardByIdCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateBoardByIdCard
    */
    readonly idCard: string
    
} & CardsIdBoard

/**
 * Request parameters for updateByIdCard operation in CardApi.
 * @export
 * @interface CardApiUpdateByIdCardRequest
 */
export type CardApiUpdateByIdCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateByIdCard
    */
    readonly idCard: string
    
} & Cards

/**
 * Request parameters for updateCheckItemPosById operation in CardApi.
 * @export
 * @interface CardApiUpdateCheckItemPosByIdRequest
 */
export type CardApiUpdateCheckItemPosByIdRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateCheckItemPosById
    */
    readonly idCard: string
    
    /**
    * idChecklist
    * @type {string}
    * @memberof CardApiUpdateCheckItemPosById
    */
    readonly idChecklist: string
    
    /**
    * idCheckItem
    * @type {string}
    * @memberof CardApiUpdateCheckItemPosById
    */
    readonly idCheckItem: string
    
} & CardsChecklistCheckItemPos

/**
 * Request parameters for updateChecklistCheckItem operation in CardApi.
 * @export
 * @interface CardApiUpdateChecklistCheckItemRequest
 */
export type CardApiUpdateChecklistCheckItemRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateChecklistCheckItem
    */
    readonly idCard: string
    
    /**
    * idChecklistCurrent
    * @type {string}
    * @memberof CardApiUpdateChecklistCheckItem
    */
    readonly idChecklistCurrent: string
    
    /**
    * idCheckItem
    * @type {string}
    * @memberof CardApiUpdateChecklistCheckItem
    */
    readonly idCheckItem: string
    
} & CardsChecklistIdChecklistCurrentCheckItem

/**
 * Request parameters for updateChecklistCheckItemNameById operation in CardApi.
 * @export
 * @interface CardApiUpdateChecklistCheckItemNameByIdRequest
 */
export type CardApiUpdateChecklistCheckItemNameByIdRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateChecklistCheckItemNameById
    */
    readonly idCard: string
    
    /**
    * idChecklist
    * @type {string}
    * @memberof CardApiUpdateChecklistCheckItemNameById
    */
    readonly idChecklist: string
    
    /**
    * idCheckItem
    * @type {string}
    * @memberof CardApiUpdateChecklistCheckItemNameById
    */
    readonly idCheckItem: string
    
} & CardsChecklistCheckItemName

/**
 * Request parameters for updateChecklistCheckItemState operation in CardApi.
 * @export
 * @interface CardApiUpdateChecklistCheckItemStateRequest
 */
export type CardApiUpdateChecklistCheckItemStateRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateChecklistCheckItemState
    */
    readonly idCard: string
    
    /**
    * idChecklist
    * @type {string}
    * @memberof CardApiUpdateChecklistCheckItemState
    */
    readonly idChecklist: string
    
    /**
    * idCheckItem
    * @type {string}
    * @memberof CardApiUpdateChecklistCheckItemState
    */
    readonly idCheckItem: string
    
} & CardsChecklistCheckItemState

/**
 * Request parameters for updateClosedById operation in CardApi.
 * @export
 * @interface CardApiUpdateClosedByIdRequest
 */
export type CardApiUpdateClosedByIdRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateClosedById
    */
    readonly idCard: string
    
} & CardsClosed

/**
 * Request parameters for updateDescriptionByIdCard operation in CardApi.
 * @export
 * @interface CardApiUpdateDescriptionByIdCardRequest
 */
export type CardApiUpdateDescriptionByIdCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateDescriptionByIdCard
    */
    readonly idCard: string
    
} & CardsDesc

/**
 * Request parameters for updateDueById operation in CardApi.
 * @export
 * @interface CardApiUpdateDueByIdRequest
 */
export type CardApiUpdateDueByIdRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateDueById
    */
    readonly idCard: string
    
} & CardsDue

/**
 * Request parameters for updateIdListByIdCard operation in CardApi.
 * @export
 * @interface CardApiUpdateIdListByIdCardRequest
 */
export type CardApiUpdateIdListByIdCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateIdListByIdCard
    */
    readonly idCard: string
    
} & CardsIdList

/**
 * Request parameters for updateIdMembers operation in CardApi.
 * @export
 * @interface CardApiUpdateIdMembersRequest
 */
export type CardApiUpdateIdMembersRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateIdMembers
    */
    readonly idCard: string
    
} & CardsIdMembers

/**
 * Request parameters for updateLabels operation in CardApi.
 * @export
 * @interface CardApiUpdateLabelsRequest
 */
export type CardApiUpdateLabelsRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateLabels
    */
    readonly idCard: string
    
} & CardsLabels

/**
 * Request parameters for updateNameById operation in CardApi.
 * @export
 * @interface CardApiUpdateNameByIdRequest
 */
export type CardApiUpdateNameByIdRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateNameById
    */
    readonly idCard: string
    
} & CardsName

/**
 * Request parameters for updatePosByIdCard operation in CardApi.
 * @export
 * @interface CardApiUpdatePosByIdCardRequest
 */
export type CardApiUpdatePosByIdCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdatePosByIdCard
    */
    readonly idCard: string
    
} & CardsPos

/**
 * Request parameters for updateStickersByIdCardByIdSticker operation in CardApi.
 * @export
 * @interface CardApiUpdateStickersByIdCardByIdStickerRequest
 */
export type CardApiUpdateStickersByIdCardByIdStickerRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateStickersByIdCardByIdSticker
    */
    readonly idCard: string
    
    /**
    * idSticker
    * @type {string}
    * @memberof CardApiUpdateStickersByIdCardByIdSticker
    */
    readonly idSticker: string
    
} & CardsStickers

/**
 * Request parameters for updateSubscribedByIdCard operation in CardApi.
 * @export
 * @interface CardApiUpdateSubscribedByIdCardRequest
 */
export type CardApiUpdateSubscribedByIdCardRequest = {
    
    /**
    * card id or shortlink
    * @type {string}
    * @memberof CardApiUpdateSubscribedByIdCard
    */
    readonly idCard: string
    
} & CardsSubscribed

/**
 * CardApiGenerated - object-oriented interface
 * @export
 * @class CardApiGenerated
 * @extends {BaseAPI}
 */
export class CardApiGenerated extends BaseAPI {
    /**
     * 
     * @summary addCardsActionsCommentsByIdCard()
     * @param {CardApiAddActionsCommentsByIdCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public addActionsCommentsByIdCard(requestParameters: CardApiAddActionsCommentsByIdCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).addActionsCommentsByIdCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addCardsAttachmentsByIdCard()
     * @param {CardApiAddAttachmentsByIdCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public addAttachmentsByIdCard(requestParameters: CardApiAddAttachmentsByIdCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).addAttachmentsByIdCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addCardsChecklistCheckItemByIdCardByIdChecklist()
     * @param {CardApiAddChecklistCheckItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public addChecklistCheckItem(requestParameters: CardApiAddChecklistCheckItemRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).addChecklistCheckItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addCardsChecklistsByIdCard()
     * @param {CardApiAddChecklistsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public addChecklists(requestParameters: CardApiAddChecklistsRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).addChecklists(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addCardsIdLabelsByIdCard()
     * @param {CardApiAddIdLabelsToCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public addIdLabelsToCard(requestParameters: CardApiAddIdLabelsToCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).addIdLabelsToCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addCardsLabelsByIdCard()
     * @param {CardApiAddLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public addLabels(requestParameters: CardApiAddLabelsRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).addLabels(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addCardsIdMembersByIdCard()
     * @param {CardApiAddMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public addMembers(requestParameters: CardApiAddMembersRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).addMembers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addCardsMembersVotedByIdCard()
     * @param {CardApiAddMembersVotedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public addMembersVoted(requestParameters: CardApiAddMembersVotedRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).addMembersVoted(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addCardsStickersByIdCard()
     * @param {CardApiAddStickersByIdCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public addStickersByIdCard(requestParameters: CardApiAddStickersByIdCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).addStickersByIdCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem()
     * @param {CardApiConvertCheckItemToCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public convertCheckItemToCard(requestParameters: CardApiConvertCheckItemToCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).convertCheckItemToCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addCards()
     * @param {CardApiCreateAndUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public createAndUpdate(requestParameters: CardApiCreateAndUpdateRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).createAndUpdate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteCardsAttachmentsByIdCardByIdAttachment()
     * @param {CardApiDeleteAttachmentsByIdCardByIdAttachmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public deleteAttachmentsByIdCardByIdAttachment(requestParameters: CardApiDeleteAttachmentsByIdCardByIdAttachmentRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).deleteAttachmentsByIdCardByIdAttachment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteCardsChecklistsByIdCardByIdChecklist()
     * @param {CardApiDeleteChecklistByIdCardByIdChecklistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public deleteChecklistByIdCardByIdChecklist(requestParameters: CardApiDeleteChecklistByIdCardByIdChecklistRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).deleteChecklistByIdCardByIdChecklist(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCardsAttachmentsByIdCard()
     * @param {CardApiGetAttachmentsByIdCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public getAttachmentsByIdCard(requestParameters: CardApiGetAttachmentsByIdCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).getAttachmentsByIdCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCardsAttachmentsByIdCardByIdAttachment()
     * @param {CardApiGetAttachmentsByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public getAttachmentsByIds(requestParameters: CardApiGetAttachmentsByIdsRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).getAttachmentsByIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCardsBoardByIdCard()
     * @param {CardApiGetBoardByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public getBoardById(requestParameters: CardApiGetBoardByIdRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).getBoardById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCardsBoardByIdCardByField()
     * @param {CardApiGetBoardByIdCardByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public getBoardByIdCardByField(requestParameters: CardApiGetBoardByIdCardByFieldRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).getBoardByIdCardByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCardsByIdCard()
     * @param {CardApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public getById(requestParameters: CardApiGetByIdRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCardsByIdCardByField()
     * @param {CardApiGetByIdFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public getByIdField(requestParameters: CardApiGetByIdFieldRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).getByIdField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCardsListByIdCardByField()
     * @param {CardApiGetCardsListByIdCardByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public getCardsListByIdCardByField(requestParameters: CardApiGetCardsListByIdCardByFieldRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).getCardsListByIdCardByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCardsCheckItemStatesByIdCard()
     * @param {CardApiGetCheckItemStatesByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public getCheckItemStatesById(requestParameters: CardApiGetCheckItemStatesByIdRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).getCheckItemStatesById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCardsChecklistsByIdCard()
     * @param {CardApiGetChecklistsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public getChecklistsById(requestParameters: CardApiGetChecklistsByIdRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).getChecklistsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCardsListByIdCard()
     * @param {CardApiGetListByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public getListById(requestParameters: CardApiGetListByIdRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).getListById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCardsMembersVotedByIdCard()
     * @param {CardApiGetMembersVotedByIdCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public getMembersVotedByIdCard(requestParameters: CardApiGetMembersVotedByIdCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).getMembersVotedByIdCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCardsStickersByIdCardByIdSticker()
     * @param {CardApiGetStickerByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public getStickerByIds(requestParameters: CardApiGetStickerByIdsRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).getStickerByIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCardsStickersByIdCard()
     * @param {CardApiGetStickersByIdCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public getStickersByIdCard(requestParameters: CardApiGetStickersByIdCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).getStickersByIdCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCardsActionsByIdCard()
     * @param {CardApiListCardActionsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public listCardActionsById(requestParameters: CardApiListCardActionsByIdRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).listCardActionsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCardsMembersByIdCard()
     * @param {CardApiListMembersByIdCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public listMembersByIdCard(requestParameters: CardApiListMembersByIdCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).listMembersByIdCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addCardsMarkAssociatedNotificationsReadByIdCard()
     * @param {CardApiMarkAssociatedNotificationsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public markAssociatedNotificationsRead(requestParameters: CardApiMarkAssociatedNotificationsReadRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).markAssociatedNotificationsRead(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This can only be done by the original author of the comment, or someone with higher permissions than the original author.
     * @summary deleteCardsActionsCommentsByIdCardByIdAction()
     * @param {CardApiRemoveActionCommentByIdCardByIdActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public removeActionCommentByIdCardByIdAction(requestParameters: CardApiRemoveActionCommentByIdCardByIdActionRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).removeActionCommentByIdCardByIdAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteCardsByIdCard()
     * @param {CardApiRemoveByIdCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public removeByIdCard(requestParameters: CardApiRemoveByIdCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).removeByIdCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem()
     * @param {CardApiRemoveChecklistCheckItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public removeChecklistCheckItem(requestParameters: CardApiRemoveChecklistCheckItemRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).removeChecklistCheckItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteCardsIdLabelsByIdCardByIdLabel()
     * @param {CardApiRemoveLabelByIdCardByIdLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public removeLabelByIdCardByIdLabel(requestParameters: CardApiRemoveLabelByIdCardByIdLabelRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).removeLabelByIdCardByIdLabel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteCardsLabelsByIdCardByColor()
     * @param {CardApiRemoveLabelsByIdCardByColorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public removeLabelsByIdCardByColor(requestParameters: CardApiRemoveLabelsByIdCardByColorRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).removeLabelsByIdCardByColor(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteCardsIdMembersByIdCardByIdMember()
     * @param {CardApiRemoveMemberByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public removeMemberByIdMember(requestParameters: CardApiRemoveMemberByIdMemberRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).removeMemberByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteCardsMembersVotedByIdCardByIdMember()
     * @param {CardApiRemoveMembersVotedByIdCardByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public removeMembersVotedByIdCardByIdMember(requestParameters: CardApiRemoveMembersVotedByIdCardByIdMemberRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).removeMembersVotedByIdCardByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteCardsStickersByIdCardByIdSticker()
     * @param {CardApiRemoveStickerByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public removeStickerByIds(requestParameters: CardApiRemoveStickerByIdsRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).removeStickerByIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This can only be done by the original author of the comment.
     * @summary updateCardsActionsCommentsByIdCardByIdAction()
     * @param {CardApiUpdateActionCommentByIdCardByIdActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateActionCommentByIdCardByIdAction(requestParameters: CardApiUpdateActionCommentByIdCardByIdActionRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateActionCommentByIdCardByIdAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsIdAttachmentCoverByIdCard()
     * @param {CardApiUpdateAttachmentCoverByIdCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateAttachmentCoverByIdCard(requestParameters: CardApiUpdateAttachmentCoverByIdCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateAttachmentCoverByIdCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsIdBoardByIdCard()
     * @param {CardApiUpdateBoardByIdCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateBoardByIdCard(requestParameters: CardApiUpdateBoardByIdCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateBoardByIdCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsByIdCard()
     * @param {CardApiUpdateByIdCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateByIdCard(requestParameters: CardApiUpdateByIdCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateByIdCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem()
     * @param {CardApiUpdateCheckItemPosByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateCheckItemPosById(requestParameters: CardApiUpdateCheckItemPosByIdRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateCheckItemPosById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem()
     * @param {CardApiUpdateChecklistCheckItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateChecklistCheckItem(requestParameters: CardApiUpdateChecklistCheckItemRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateChecklistCheckItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem()
     * @param {CardApiUpdateChecklistCheckItemNameByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateChecklistCheckItemNameById(requestParameters: CardApiUpdateChecklistCheckItemNameByIdRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateChecklistCheckItemNameById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem()
     * @param {CardApiUpdateChecklistCheckItemStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateChecklistCheckItemState(requestParameters: CardApiUpdateChecklistCheckItemStateRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateChecklistCheckItemState(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsClosedByIdCard()
     * @param {CardApiUpdateClosedByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateClosedById(requestParameters: CardApiUpdateClosedByIdRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateClosedById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsDescByIdCard()
     * @param {CardApiUpdateDescriptionByIdCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateDescriptionByIdCard(requestParameters: CardApiUpdateDescriptionByIdCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateDescriptionByIdCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsDueByIdCard()
     * @param {CardApiUpdateDueByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateDueById(requestParameters: CardApiUpdateDueByIdRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateDueById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsIdListByIdCard()
     * @param {CardApiUpdateIdListByIdCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateIdListByIdCard(requestParameters: CardApiUpdateIdListByIdCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateIdListByIdCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsIdMembersByIdCard()
     * @param {CardApiUpdateIdMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateIdMembers(requestParameters: CardApiUpdateIdMembersRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateIdMembers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsLabelsByIdCard()
     * @param {CardApiUpdateLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateLabels(requestParameters: CardApiUpdateLabelsRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateLabels(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsNameByIdCard()
     * @param {CardApiUpdateNameByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateNameById(requestParameters: CardApiUpdateNameByIdRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateNameById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsPosByIdCard()
     * @param {CardApiUpdatePosByIdCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updatePosByIdCard(requestParameters: CardApiUpdatePosByIdCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updatePosByIdCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsStickersByIdCardByIdSticker()
     * @param {CardApiUpdateStickersByIdCardByIdStickerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateStickersByIdCardByIdSticker(requestParameters: CardApiUpdateStickersByIdCardByIdStickerRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateStickersByIdCardByIdSticker(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCardsSubscribedByIdCard()
     * @param {CardApiUpdateSubscribedByIdCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateSubscribedByIdCard(requestParameters: CardApiUpdateSubscribedByIdCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateSubscribedByIdCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
