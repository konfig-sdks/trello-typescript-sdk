/* tslint:disable */
/* eslint-disable */
/*
Trello

This document describes the REST API of Trello as published by Trello.com.
 - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>
 - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Notifications } from '../models';
// @ts-ignore
import { NotificationsUnread } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getNotificationsBoardByIdNotificationByField()
         * @param {string} idNotification idNotification
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByField: async (idNotification: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('getBoardByField', 'idNotification', idNotification)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getBoardByField', 'field', field)
            const localVarPath = `/notifications/{idNotification}/board/{field}`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}/board/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNotificationsBoardByIdNotification()
         * @param {string} idNotification idNotification
         * @param {string} [fields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardById: async (idNotification: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('getBoardById', 'idNotification', idNotification)
            const localVarPath = `/notifications/{idNotification}/board`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}/board',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNotificationsByIdNotification()
         * @param {string} idNotification idNotification
         * @param {string} [display]  true or false
         * @param {string} [entities]  true or false
         * @param {string} [fields] all or a comma-separated list of: data, date, idMemberCreator, type or unread
         * @param {string} [memberCreator]  true or false
         * @param {string} [memberCreatorFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [board]  true or false
         * @param {string} [boardFields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {string} [list]  true or false
         * @param {string} [card]  true or false
         * @param {string} [cardFields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {string} [organization]  true or false
         * @param {string} [organizationFields] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
         * @param {string} [member]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (idNotification: string, display?: string, entities?: string, fields?: string, memberCreator?: string, memberCreatorFields?: string, board?: string, boardFields?: string, list?: string, card?: string, cardFields?: string, organization?: string, organizationFields?: string, member?: string, memberFields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('getById', 'idNotification', idNotification)
            const localVarPath = `/notifications/{idNotification}`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (display !== undefined) {
                localVarQueryParameter['display'] = display;
            }

            if (entities !== undefined) {
                localVarQueryParameter['entities'] = entities;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (memberCreator !== undefined) {
                localVarQueryParameter['memberCreator'] = memberCreator;
            }

            if (memberCreatorFields !== undefined) {
                localVarQueryParameter['memberCreator_fields'] = memberCreatorFields;
            }

            if (board !== undefined) {
                localVarQueryParameter['board'] = board;
            }

            if (boardFields !== undefined) {
                localVarQueryParameter['board_fields'] = boardFields;
            }

            if (list !== undefined) {
                localVarQueryParameter['list'] = list;
            }

            if (card !== undefined) {
                localVarQueryParameter['card'] = card;
            }

            if (cardFields !== undefined) {
                localVarQueryParameter['card_fields'] = cardFields;
            }

            if (organization !== undefined) {
                localVarQueryParameter['organization'] = organization;
            }

            if (organizationFields !== undefined) {
                localVarQueryParameter['organization_fields'] = organizationFields;
            }

            if (member !== undefined) {
                localVarQueryParameter['member'] = member;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNotificationsByIdNotificationByField()
         * @param {string} idNotification idNotification
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdField: async (idNotification: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('getByIdField', 'idNotification', idNotification)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getByIdField', 'field', field)
            const localVarPath = `/notifications/{idNotification}/{field}`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNotificationsCardByIdNotification()
         * @param {string} idNotification idNotification
         * @param {string} [fields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardById: async (idNotification: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('getCardById', 'idNotification', idNotification)
            const localVarPath = `/notifications/{idNotification}/card`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}/card',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNotificationsCardByIdNotificationByField()
         * @param {string} idNotification idNotification
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardByIdNotificationByField: async (idNotification: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('getCardByIdNotificationByField', 'idNotification', idNotification)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getCardByIdNotificationByField', 'field', field)
            const localVarPath = `/notifications/{idNotification}/card/{field}`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}/card/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNotificationsDisplayByIdNotification()
         * @param {string} idNotification idNotification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDisplayByIdNotification: async (idNotification: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('getDisplayByIdNotification', 'idNotification', idNotification)
            const localVarPath = `/notifications/{idNotification}/display`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}/display',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNotificationsEntitiesByIdNotification()
         * @param {string} idNotification idNotification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesByIdNotification: async (idNotification: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('getEntitiesByIdNotification', 'idNotification', idNotification)
            const localVarPath = `/notifications/{idNotification}/entities`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}/entities',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNotificationsListByIdNotification()
         * @param {string} idNotification idNotification
         * @param {string} [fields] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListByIdNotification: async (idNotification: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('getListByIdNotification', 'idNotification', idNotification)
            const localVarPath = `/notifications/{idNotification}/list`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNotificationsListByIdNotificationByField()
         * @param {string} idNotification idNotification
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListByIdNotificationByField: async (idNotification: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('getListByIdNotificationByField', 'idNotification', idNotification)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getListByIdNotificationByField', 'field', field)
            const localVarPath = `/notifications/{idNotification}/list/{field}`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}/list/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNotificationsMemberByIdNotificationByField()
         * @param {string} idNotification idNotification
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberByIdField: async (idNotification: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('getMemberByIdField', 'idNotification', idNotification)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getMemberByIdField', 'field', field)
            const localVarPath = `/notifications/{idNotification}/member/{field}`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}/member/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNotificationsMemberCreatorByIdNotificationByField()
         * @param {string} idNotification idNotification
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberByIdNotificationByField: async (idNotification: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('getMemberByIdNotificationByField', 'idNotification', idNotification)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getMemberByIdNotificationByField', 'field', field)
            const localVarPath = `/notifications/{idNotification}/memberCreator/{field}`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}/memberCreator/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNotificationsMemberByIdNotification()
         * @param {string} idNotification idNotification
         * @param {string} [fields] all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberByNotification: async (idNotification: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('getMemberByNotification', 'idNotification', idNotification)
            const localVarPath = `/notifications/{idNotification}/member`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}/member',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNotificationsMemberCreatorByIdNotification()
         * @param {string} idNotification idNotification
         * @param {string} [fields] all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberCreatorById: async (idNotification: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('getMemberCreatorById', 'idNotification', idNotification)
            const localVarPath = `/notifications/{idNotification}/memberCreator`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}/memberCreator',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNotificationsOrganizationByIdNotification()
         * @param {string} idNotification idNotification
         * @param {string} [fields] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationByIdNotification: async (idNotification: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('getOrganizationByIdNotification', 'idNotification', idNotification)
            const localVarPath = `/notifications/{idNotification}/organization`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}/organization',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNotificationsOrganizationByIdNotificationByField()
         * @param {string} idNotification idNotification
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationByIdNotificationByField: async (idNotification: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('getOrganizationByIdNotificationByField', 'idNotification', idNotification)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getOrganizationByIdNotificationByField', 'field', field)
            const localVarPath = `/notifications/{idNotification}/organization/{field}`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}/organization/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addNotificationsAllRead()
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllAsRead: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/all/read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/all/read',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateNotificationsByIdNotification()
         * @param {string} idNotification idNotification
         * @param {Notifications} notifications Attributes of \&quot;Notifications\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdNotification: async (idNotification: string, notifications: Notifications, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('updateByIdNotification', 'idNotification', idNotification)
            // verify required parameter 'notifications' is not null or undefined
            assertParamExists('updateByIdNotification', 'notifications', notifications)
            const localVarPath = `/notifications/{idNotification}`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: notifications,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(notifications, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateNotificationsUnreadByIdNotification()
         * @param {string} idNotification idNotification
         * @param {NotificationsUnread} notificationsUnread Attributes of \&quot;Notifications Unread\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUnreadByIdNotification: async (idNotification: string, notificationsUnread: NotificationsUnread, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idNotification' is not null or undefined
            assertParamExists('updateUnreadByIdNotification', 'idNotification', idNotification)
            // verify required parameter 'notificationsUnread' is not null or undefined
            assertParamExists('updateUnreadByIdNotification', 'notificationsUnread', notificationsUnread)
            const localVarPath = `/notifications/{idNotification}/unread`
                .replace(`{${"idNotification"}}`, encodeURIComponent(String(idNotification !== undefined ? idNotification : `-idNotification-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: notificationsUnread,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/notifications/{idNotification}/unread',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(notificationsUnread, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary getNotificationsBoardByIdNotificationByField()
         * @param {NotificationApiGetBoardByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardByField(requestParameters: NotificationApiGetBoardByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardByField(requestParameters.idNotification, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getNotificationsBoardByIdNotification()
         * @param {NotificationApiGetBoardByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardById(requestParameters: NotificationApiGetBoardByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardById(requestParameters.idNotification, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getNotificationsByIdNotification()
         * @param {NotificationApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: NotificationApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.idNotification, requestParameters.display, requestParameters.entities, requestParameters.fields, requestParameters.memberCreator, requestParameters.memberCreatorFields, requestParameters.board, requestParameters.boardFields, requestParameters.list, requestParameters.card, requestParameters.cardFields, requestParameters.organization, requestParameters.organizationFields, requestParameters.member, requestParameters.memberFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getNotificationsByIdNotificationByField()
         * @param {NotificationApiGetByIdFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdField(requestParameters: NotificationApiGetByIdFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdField(requestParameters.idNotification, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getNotificationsCardByIdNotification()
         * @param {NotificationApiGetCardByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardById(requestParameters: NotificationApiGetCardByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardById(requestParameters.idNotification, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getNotificationsCardByIdNotificationByField()
         * @param {NotificationApiGetCardByIdNotificationByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardByIdNotificationByField(requestParameters: NotificationApiGetCardByIdNotificationByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardByIdNotificationByField(requestParameters.idNotification, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getNotificationsDisplayByIdNotification()
         * @param {NotificationApiGetDisplayByIdNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDisplayByIdNotification(requestParameters: NotificationApiGetDisplayByIdNotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDisplayByIdNotification(requestParameters.idNotification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getNotificationsEntitiesByIdNotification()
         * @param {NotificationApiGetEntitiesByIdNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntitiesByIdNotification(requestParameters: NotificationApiGetEntitiesByIdNotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntitiesByIdNotification(requestParameters.idNotification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getNotificationsListByIdNotification()
         * @param {NotificationApiGetListByIdNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListByIdNotification(requestParameters: NotificationApiGetListByIdNotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListByIdNotification(requestParameters.idNotification, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getNotificationsListByIdNotificationByField()
         * @param {NotificationApiGetListByIdNotificationByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListByIdNotificationByField(requestParameters: NotificationApiGetListByIdNotificationByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListByIdNotificationByField(requestParameters.idNotification, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getNotificationsMemberByIdNotificationByField()
         * @param {NotificationApiGetMemberByIdFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberByIdField(requestParameters: NotificationApiGetMemberByIdFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberByIdField(requestParameters.idNotification, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getNotificationsMemberCreatorByIdNotificationByField()
         * @param {NotificationApiGetMemberByIdNotificationByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberByIdNotificationByField(requestParameters: NotificationApiGetMemberByIdNotificationByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberByIdNotificationByField(requestParameters.idNotification, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getNotificationsMemberByIdNotification()
         * @param {NotificationApiGetMemberByNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberByNotification(requestParameters: NotificationApiGetMemberByNotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberByNotification(requestParameters.idNotification, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getNotificationsMemberCreatorByIdNotification()
         * @param {NotificationApiGetMemberCreatorByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberCreatorById(requestParameters: NotificationApiGetMemberCreatorByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberCreatorById(requestParameters.idNotification, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getNotificationsOrganizationByIdNotification()
         * @param {NotificationApiGetOrganizationByIdNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationByIdNotification(requestParameters: NotificationApiGetOrganizationByIdNotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationByIdNotification(requestParameters.idNotification, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getNotificationsOrganizationByIdNotificationByField()
         * @param {NotificationApiGetOrganizationByIdNotificationByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationByIdNotificationByField(requestParameters: NotificationApiGetOrganizationByIdNotificationByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationByIdNotificationByField(requestParameters.idNotification, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addNotificationsAllRead()
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAllAsRead(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markAllAsRead(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateNotificationsByIdNotification()
         * @param {NotificationApiUpdateByIdNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByIdNotification(requestParameters: NotificationApiUpdateByIdNotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const notifications: Notifications = {
                unread: requestParameters.unread
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByIdNotification(requestParameters.idNotification, notifications, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateNotificationsUnreadByIdNotification()
         * @param {NotificationApiUpdateUnreadByIdNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUnreadByIdNotification(requestParameters: NotificationApiUpdateUnreadByIdNotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const notificationsUnread: NotificationsUnread = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUnreadByIdNotification(requestParameters.idNotification, notificationsUnread, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationApiFp(configuration)
    return {
        /**
         * 
         * @summary getNotificationsBoardByIdNotificationByField()
         * @param {NotificationApiGetBoardByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByField(requestParameters: NotificationApiGetBoardByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNotificationsBoardByIdNotification()
         * @param {NotificationApiGetBoardByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardById(requestParameters: NotificationApiGetBoardByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNotificationsByIdNotification()
         * @param {NotificationApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: NotificationApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNotificationsByIdNotificationByField()
         * @param {NotificationApiGetByIdFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdField(requestParameters: NotificationApiGetByIdFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getByIdField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNotificationsCardByIdNotification()
         * @param {NotificationApiGetCardByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardById(requestParameters: NotificationApiGetCardByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCardById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNotificationsCardByIdNotificationByField()
         * @param {NotificationApiGetCardByIdNotificationByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardByIdNotificationByField(requestParameters: NotificationApiGetCardByIdNotificationByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCardByIdNotificationByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNotificationsDisplayByIdNotification()
         * @param {NotificationApiGetDisplayByIdNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDisplayByIdNotification(requestParameters: NotificationApiGetDisplayByIdNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDisplayByIdNotification(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNotificationsEntitiesByIdNotification()
         * @param {NotificationApiGetEntitiesByIdNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesByIdNotification(requestParameters: NotificationApiGetEntitiesByIdNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getEntitiesByIdNotification(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNotificationsListByIdNotification()
         * @param {NotificationApiGetListByIdNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListByIdNotification(requestParameters: NotificationApiGetListByIdNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getListByIdNotification(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNotificationsListByIdNotificationByField()
         * @param {NotificationApiGetListByIdNotificationByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListByIdNotificationByField(requestParameters: NotificationApiGetListByIdNotificationByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getListByIdNotificationByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNotificationsMemberByIdNotificationByField()
         * @param {NotificationApiGetMemberByIdFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberByIdField(requestParameters: NotificationApiGetMemberByIdFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMemberByIdField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNotificationsMemberCreatorByIdNotificationByField()
         * @param {NotificationApiGetMemberByIdNotificationByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberByIdNotificationByField(requestParameters: NotificationApiGetMemberByIdNotificationByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMemberByIdNotificationByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNotificationsMemberByIdNotification()
         * @param {NotificationApiGetMemberByNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberByNotification(requestParameters: NotificationApiGetMemberByNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMemberByNotification(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNotificationsMemberCreatorByIdNotification()
         * @param {NotificationApiGetMemberCreatorByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberCreatorById(requestParameters: NotificationApiGetMemberCreatorByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMemberCreatorById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNotificationsOrganizationByIdNotification()
         * @param {NotificationApiGetOrganizationByIdNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationByIdNotification(requestParameters: NotificationApiGetOrganizationByIdNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getOrganizationByIdNotification(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNotificationsOrganizationByIdNotificationByField()
         * @param {NotificationApiGetOrganizationByIdNotificationByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationByIdNotificationByField(requestParameters: NotificationApiGetOrganizationByIdNotificationByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getOrganizationByIdNotificationByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addNotificationsAllRead()
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllAsRead(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.markAllAsRead(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateNotificationsByIdNotification()
         * @param {NotificationApiUpdateByIdNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdNotification(requestParameters: NotificationApiUpdateByIdNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateByIdNotification(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateNotificationsUnreadByIdNotification()
         * @param {NotificationApiUpdateUnreadByIdNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUnreadByIdNotification(requestParameters: NotificationApiUpdateUnreadByIdNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateUnreadByIdNotification(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBoardByField operation in NotificationApi.
 * @export
 * @interface NotificationApiGetBoardByFieldRequest
 */
export type NotificationApiGetBoardByFieldRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiGetBoardByField
    */
    readonly idNotification: string
    
    /**
    * field
    * @type {string}
    * @memberof NotificationApiGetBoardByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getBoardById operation in NotificationApi.
 * @export
 * @interface NotificationApiGetBoardByIdRequest
 */
export type NotificationApiGetBoardByIdRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiGetBoardById
    */
    readonly idNotification: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof NotificationApiGetBoardById
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getById operation in NotificationApi.
 * @export
 * @interface NotificationApiGetByIdRequest
 */
export type NotificationApiGetByIdRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiGetById
    */
    readonly idNotification: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof NotificationApiGetById
    */
    readonly display?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof NotificationApiGetById
    */
    readonly entities?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator, type or unread
    * @type {string}
    * @memberof NotificationApiGetById
    */
    readonly fields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof NotificationApiGetById
    */
    readonly memberCreator?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof NotificationApiGetById
    */
    readonly memberCreatorFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof NotificationApiGetById
    */
    readonly board?: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof NotificationApiGetById
    */
    readonly boardFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof NotificationApiGetById
    */
    readonly list?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof NotificationApiGetById
    */
    readonly card?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof NotificationApiGetById
    */
    readonly cardFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof NotificationApiGetById
    */
    readonly organization?: string
    
    /**
    * all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    * @type {string}
    * @memberof NotificationApiGetById
    */
    readonly organizationFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof NotificationApiGetById
    */
    readonly member?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof NotificationApiGetById
    */
    readonly memberFields?: string
    
}

/**
 * Request parameters for getByIdField operation in NotificationApi.
 * @export
 * @interface NotificationApiGetByIdFieldRequest
 */
export type NotificationApiGetByIdFieldRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiGetByIdField
    */
    readonly idNotification: string
    
    /**
    * field
    * @type {string}
    * @memberof NotificationApiGetByIdField
    */
    readonly field: string
    
}

/**
 * Request parameters for getCardById operation in NotificationApi.
 * @export
 * @interface NotificationApiGetCardByIdRequest
 */
export type NotificationApiGetCardByIdRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiGetCardById
    */
    readonly idNotification: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof NotificationApiGetCardById
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getCardByIdNotificationByField operation in NotificationApi.
 * @export
 * @interface NotificationApiGetCardByIdNotificationByFieldRequest
 */
export type NotificationApiGetCardByIdNotificationByFieldRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiGetCardByIdNotificationByField
    */
    readonly idNotification: string
    
    /**
    * field
    * @type {string}
    * @memberof NotificationApiGetCardByIdNotificationByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getDisplayByIdNotification operation in NotificationApi.
 * @export
 * @interface NotificationApiGetDisplayByIdNotificationRequest
 */
export type NotificationApiGetDisplayByIdNotificationRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiGetDisplayByIdNotification
    */
    readonly idNotification: string
    
}

/**
 * Request parameters for getEntitiesByIdNotification operation in NotificationApi.
 * @export
 * @interface NotificationApiGetEntitiesByIdNotificationRequest
 */
export type NotificationApiGetEntitiesByIdNotificationRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiGetEntitiesByIdNotification
    */
    readonly idNotification: string
    
}

/**
 * Request parameters for getListByIdNotification operation in NotificationApi.
 * @export
 * @interface NotificationApiGetListByIdNotificationRequest
 */
export type NotificationApiGetListByIdNotificationRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiGetListByIdNotification
    */
    readonly idNotification: string
    
    /**
    * all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    * @type {string}
    * @memberof NotificationApiGetListByIdNotification
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getListByIdNotificationByField operation in NotificationApi.
 * @export
 * @interface NotificationApiGetListByIdNotificationByFieldRequest
 */
export type NotificationApiGetListByIdNotificationByFieldRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiGetListByIdNotificationByField
    */
    readonly idNotification: string
    
    /**
    * field
    * @type {string}
    * @memberof NotificationApiGetListByIdNotificationByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getMemberByIdField operation in NotificationApi.
 * @export
 * @interface NotificationApiGetMemberByIdFieldRequest
 */
export type NotificationApiGetMemberByIdFieldRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiGetMemberByIdField
    */
    readonly idNotification: string
    
    /**
    * field
    * @type {string}
    * @memberof NotificationApiGetMemberByIdField
    */
    readonly field: string
    
}

/**
 * Request parameters for getMemberByIdNotificationByField operation in NotificationApi.
 * @export
 * @interface NotificationApiGetMemberByIdNotificationByFieldRequest
 */
export type NotificationApiGetMemberByIdNotificationByFieldRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiGetMemberByIdNotificationByField
    */
    readonly idNotification: string
    
    /**
    * field
    * @type {string}
    * @memberof NotificationApiGetMemberByIdNotificationByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getMemberByNotification operation in NotificationApi.
 * @export
 * @interface NotificationApiGetMemberByNotificationRequest
 */
export type NotificationApiGetMemberByNotificationRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiGetMemberByNotification
    */
    readonly idNotification: string
    
    /**
    * all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
    * @type {string}
    * @memberof NotificationApiGetMemberByNotification
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getMemberCreatorById operation in NotificationApi.
 * @export
 * @interface NotificationApiGetMemberCreatorByIdRequest
 */
export type NotificationApiGetMemberCreatorByIdRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiGetMemberCreatorById
    */
    readonly idNotification: string
    
    /**
    * all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
    * @type {string}
    * @memberof NotificationApiGetMemberCreatorById
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getOrganizationByIdNotification operation in NotificationApi.
 * @export
 * @interface NotificationApiGetOrganizationByIdNotificationRequest
 */
export type NotificationApiGetOrganizationByIdNotificationRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiGetOrganizationByIdNotification
    */
    readonly idNotification: string
    
    /**
    * all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    * @type {string}
    * @memberof NotificationApiGetOrganizationByIdNotification
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getOrganizationByIdNotificationByField operation in NotificationApi.
 * @export
 * @interface NotificationApiGetOrganizationByIdNotificationByFieldRequest
 */
export type NotificationApiGetOrganizationByIdNotificationByFieldRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiGetOrganizationByIdNotificationByField
    */
    readonly idNotification: string
    
    /**
    * field
    * @type {string}
    * @memberof NotificationApiGetOrganizationByIdNotificationByField
    */
    readonly field: string
    
}

/**
 * Request parameters for updateByIdNotification operation in NotificationApi.
 * @export
 * @interface NotificationApiUpdateByIdNotificationRequest
 */
export type NotificationApiUpdateByIdNotificationRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiUpdateByIdNotification
    */
    readonly idNotification: string
    
} & Notifications

/**
 * Request parameters for updateUnreadByIdNotification operation in NotificationApi.
 * @export
 * @interface NotificationApiUpdateUnreadByIdNotificationRequest
 */
export type NotificationApiUpdateUnreadByIdNotificationRequest = {
    
    /**
    * idNotification
    * @type {string}
    * @memberof NotificationApiUpdateUnreadByIdNotification
    */
    readonly idNotification: string
    
} & NotificationsUnread

/**
 * NotificationApiGenerated - object-oriented interface
 * @export
 * @class NotificationApiGenerated
 * @extends {BaseAPI}
 */
export class NotificationApiGenerated extends BaseAPI {
    /**
     * 
     * @summary getNotificationsBoardByIdNotificationByField()
     * @param {NotificationApiGetBoardByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public getBoardByField(requestParameters: NotificationApiGetBoardByFieldRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getBoardByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNotificationsBoardByIdNotification()
     * @param {NotificationApiGetBoardByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public getBoardById(requestParameters: NotificationApiGetBoardByIdRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getBoardById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNotificationsByIdNotification()
     * @param {NotificationApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public getById(requestParameters: NotificationApiGetByIdRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNotificationsByIdNotificationByField()
     * @param {NotificationApiGetByIdFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public getByIdField(requestParameters: NotificationApiGetByIdFieldRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getByIdField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNotificationsCardByIdNotification()
     * @param {NotificationApiGetCardByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public getCardById(requestParameters: NotificationApiGetCardByIdRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getCardById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNotificationsCardByIdNotificationByField()
     * @param {NotificationApiGetCardByIdNotificationByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public getCardByIdNotificationByField(requestParameters: NotificationApiGetCardByIdNotificationByFieldRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getCardByIdNotificationByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNotificationsDisplayByIdNotification()
     * @param {NotificationApiGetDisplayByIdNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public getDisplayByIdNotification(requestParameters: NotificationApiGetDisplayByIdNotificationRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getDisplayByIdNotification(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNotificationsEntitiesByIdNotification()
     * @param {NotificationApiGetEntitiesByIdNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public getEntitiesByIdNotification(requestParameters: NotificationApiGetEntitiesByIdNotificationRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getEntitiesByIdNotification(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNotificationsListByIdNotification()
     * @param {NotificationApiGetListByIdNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public getListByIdNotification(requestParameters: NotificationApiGetListByIdNotificationRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getListByIdNotification(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNotificationsListByIdNotificationByField()
     * @param {NotificationApiGetListByIdNotificationByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public getListByIdNotificationByField(requestParameters: NotificationApiGetListByIdNotificationByFieldRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getListByIdNotificationByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNotificationsMemberByIdNotificationByField()
     * @param {NotificationApiGetMemberByIdFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public getMemberByIdField(requestParameters: NotificationApiGetMemberByIdFieldRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getMemberByIdField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNotificationsMemberCreatorByIdNotificationByField()
     * @param {NotificationApiGetMemberByIdNotificationByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public getMemberByIdNotificationByField(requestParameters: NotificationApiGetMemberByIdNotificationByFieldRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getMemberByIdNotificationByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNotificationsMemberByIdNotification()
     * @param {NotificationApiGetMemberByNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public getMemberByNotification(requestParameters: NotificationApiGetMemberByNotificationRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getMemberByNotification(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNotificationsMemberCreatorByIdNotification()
     * @param {NotificationApiGetMemberCreatorByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public getMemberCreatorById(requestParameters: NotificationApiGetMemberCreatorByIdRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getMemberCreatorById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNotificationsOrganizationByIdNotification()
     * @param {NotificationApiGetOrganizationByIdNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public getOrganizationByIdNotification(requestParameters: NotificationApiGetOrganizationByIdNotificationRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getOrganizationByIdNotification(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNotificationsOrganizationByIdNotificationByField()
     * @param {NotificationApiGetOrganizationByIdNotificationByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public getOrganizationByIdNotificationByField(requestParameters: NotificationApiGetOrganizationByIdNotificationByFieldRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getOrganizationByIdNotificationByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addNotificationsAllRead()
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public markAllAsRead(options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).markAllAsRead(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateNotificationsByIdNotification()
     * @param {NotificationApiUpdateByIdNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public updateByIdNotification(requestParameters: NotificationApiUpdateByIdNotificationRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).updateByIdNotification(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateNotificationsUnreadByIdNotification()
     * @param {NotificationApiUpdateUnreadByIdNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiGenerated
     */
    public updateUnreadByIdNotification(requestParameters: NotificationApiUpdateUnreadByIdNotificationRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).updateUnreadByIdNotification(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
