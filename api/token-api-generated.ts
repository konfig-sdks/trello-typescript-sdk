/* tslint:disable */
/* eslint-disable */
/*
Trello

This document describes the REST API of Trello as published by Trello.com.
 - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>
 - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TokensWebhooks } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TokenApi - axios parameter creator
 * @export
 */
export const TokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteTokensByToken()
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByToken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tokens/{token}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tokens/{token}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getTokensByToken()
         * @param {string} [fields] all or a comma-separated list of: dateCreated, dateExpires, idMember, identifier or permissions
         * @param {string} [webhooks]  true or false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByToken: async (fields?: string, webhooks?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tokens/{token}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (webhooks !== undefined) {
                localVarQueryParameter['webhooks'] = webhooks;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tokens/{token}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getTokensByTokenByField()
         * @param {string} token token
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByTokenByField: async (token: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('getByTokenByField', 'token', token)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getByTokenByField', 'field', field)
            const localVarPath = `/tokens/{token}/{field}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token !== undefined ? token : `-token-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tokens/{token}/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getTokensMemberByTokenByField()
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberByField: async (field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getMemberByField', 'field', field)
            const localVarPath = `/tokens/{token}/member/{field}`
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tokens/{token}/member/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getTokensMemberByToken()
         * @param {string} [fields] all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberByToken: async (fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tokens/{token}/member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tokens/{token}/member',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getTokensWebhooksByTokenByIdWebhook()
         * @param {string} idWebhook idWebhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookById: async (idWebhook: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idWebhook' is not null or undefined
            assertParamExists('getWebhookById', 'idWebhook', idWebhook)
            const localVarPath = `/tokens/{token}/webhooks/{idWebhook}`
                .replace(`{${"idWebhook"}}`, encodeURIComponent(String(idWebhook !== undefined ? idWebhook : `-idWebhook-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tokens/{token}/webhooks/{idWebhook}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getTokensWebhooksByToken()
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhooks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tokens/{token}/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tokens/{token}/webhooks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addTokensWebhooksByToken()
         * @param {TokensWebhooks} tokensWebhooks Attributes of \&quot;Tokens Webhooks\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWebhook: async (tokensWebhooks: TokensWebhooks, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokensWebhooks' is not null or undefined
            assertParamExists('registerWebhook', 'tokensWebhooks', tokensWebhooks)
            const localVarPath = `/tokens/{token}/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tokensWebhooks,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tokens/{token}/webhooks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tokensWebhooks, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteTokensWebhooksByTokenByIdWebhook()
         * @param {string} idWebhook idWebhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByTokenByIdWebhook: async (idWebhook: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idWebhook' is not null or undefined
            assertParamExists('removeByTokenByIdWebhook', 'idWebhook', idWebhook)
            const localVarPath = `/tokens/{token}/webhooks/{idWebhook}`
                .replace(`{${"idWebhook"}}`, encodeURIComponent(String(idWebhook !== undefined ? idWebhook : `-idWebhook-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tokens/{token}/webhooks/{idWebhook}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateTokensWebhooksByToken()
         * @param {TokensWebhooks} tokensWebhooks Attributes of \&quot;Tokens Webhooks\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhooksByToken: async (tokensWebhooks: TokensWebhooks, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokensWebhooks' is not null or undefined
            assertParamExists('updateWebhooksByToken', 'tokensWebhooks', tokensWebhooks)
            const localVarPath = `/tokens/{token}/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tokensWebhooks,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tokens/{token}/webhooks',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tokensWebhooks, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokenApi - functional programming interface
 * @export
 */
export const TokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary deleteTokensByToken()
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteByToken(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getTokensByToken()
         * @param {TokenApiGetByTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByToken(requestParameters: TokenApiGetByTokenRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByToken(requestParameters.fields, requestParameters.webhooks, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getTokensByTokenByField()
         * @param {TokenApiGetByTokenByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByTokenByField(requestParameters: TokenApiGetByTokenByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByTokenByField(requestParameters.token, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getTokensMemberByTokenByField()
         * @param {TokenApiGetMemberByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberByField(requestParameters: TokenApiGetMemberByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberByField(requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getTokensMemberByToken()
         * @param {TokenApiGetMemberByTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberByToken(requestParameters: TokenApiGetMemberByTokenRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberByToken(requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getTokensWebhooksByTokenByIdWebhook()
         * @param {TokenApiGetWebhookByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebhookById(requestParameters: TokenApiGetWebhookByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhookById(requestParameters.idWebhook, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getTokensWebhooksByToken()
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebhooks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhooks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addTokensWebhooksByToken()
         * @param {TokenApiRegisterWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerWebhook(requestParameters: TokenApiRegisterWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const tokensWebhooks: TokensWebhooks = {
                description: requestParameters.description,
                callbackURL: requestParameters.callbackURL,
                idModel: requestParameters.idModel
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerWebhook(tokensWebhooks, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteTokensWebhooksByTokenByIdWebhook()
         * @param {TokenApiRemoveByTokenByIdWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeByTokenByIdWebhook(requestParameters: TokenApiRemoveByTokenByIdWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeByTokenByIdWebhook(requestParameters.idWebhook, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateTokensWebhooksByToken()
         * @param {TokenApiUpdateWebhooksByTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWebhooksByToken(requestParameters: TokenApiUpdateWebhooksByTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const tokensWebhooks: TokensWebhooks = {
                description: requestParameters.description,
                callbackURL: requestParameters.callbackURL,
                idModel: requestParameters.idModel
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebhooksByToken(tokensWebhooks, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TokenApi - factory interface
 * @export
 */
export const TokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokenApiFp(configuration)
    return {
        /**
         * 
         * @summary deleteTokensByToken()
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByToken(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteByToken(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getTokensByToken()
         * @param {TokenApiGetByTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByToken(requestParameters: TokenApiGetByTokenRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getByToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getTokensByTokenByField()
         * @param {TokenApiGetByTokenByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByTokenByField(requestParameters: TokenApiGetByTokenByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getByTokenByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getTokensMemberByTokenByField()
         * @param {TokenApiGetMemberByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberByField(requestParameters: TokenApiGetMemberByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMemberByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getTokensMemberByToken()
         * @param {TokenApiGetMemberByTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberByToken(requestParameters: TokenApiGetMemberByTokenRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMemberByToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getTokensWebhooksByTokenByIdWebhook()
         * @param {TokenApiGetWebhookByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookById(requestParameters: TokenApiGetWebhookByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getWebhookById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getTokensWebhooksByToken()
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhooks(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getWebhooks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addTokensWebhooksByToken()
         * @param {TokenApiRegisterWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWebhook(requestParameters: TokenApiRegisterWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.registerWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteTokensWebhooksByTokenByIdWebhook()
         * @param {TokenApiRemoveByTokenByIdWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByTokenByIdWebhook(requestParameters: TokenApiRemoveByTokenByIdWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeByTokenByIdWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateTokensWebhooksByToken()
         * @param {TokenApiUpdateWebhooksByTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhooksByToken(requestParameters: TokenApiUpdateWebhooksByTokenRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateWebhooksByToken(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getByToken operation in TokenApi.
 * @export
 * @interface TokenApiGetByTokenRequest
 */
export type TokenApiGetByTokenRequest = {
    
    /**
    * all or a comma-separated list of: dateCreated, dateExpires, idMember, identifier or permissions
    * @type {string}
    * @memberof TokenApiGetByToken
    */
    readonly fields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof TokenApiGetByToken
    */
    readonly webhooks?: string
    
}

/**
 * Request parameters for getByTokenByField operation in TokenApi.
 * @export
 * @interface TokenApiGetByTokenByFieldRequest
 */
export type TokenApiGetByTokenByFieldRequest = {
    
    /**
    * token
    * @type {string}
    * @memberof TokenApiGetByTokenByField
    */
    readonly token: string
    
    /**
    * field
    * @type {string}
    * @memberof TokenApiGetByTokenByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getMemberByField operation in TokenApi.
 * @export
 * @interface TokenApiGetMemberByFieldRequest
 */
export type TokenApiGetMemberByFieldRequest = {
    
    /**
    * field
    * @type {string}
    * @memberof TokenApiGetMemberByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getMemberByToken operation in TokenApi.
 * @export
 * @interface TokenApiGetMemberByTokenRequest
 */
export type TokenApiGetMemberByTokenRequest = {
    
    /**
    * all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
    * @type {string}
    * @memberof TokenApiGetMemberByToken
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getWebhookById operation in TokenApi.
 * @export
 * @interface TokenApiGetWebhookByIdRequest
 */
export type TokenApiGetWebhookByIdRequest = {
    
    /**
    * idWebhook
    * @type {string}
    * @memberof TokenApiGetWebhookById
    */
    readonly idWebhook: string
    
}

/**
 * Request parameters for registerWebhook operation in TokenApi.
 * @export
 * @interface TokenApiRegisterWebhookRequest
 */
export type TokenApiRegisterWebhookRequest = {
    
} & TokensWebhooks

/**
 * Request parameters for removeByTokenByIdWebhook operation in TokenApi.
 * @export
 * @interface TokenApiRemoveByTokenByIdWebhookRequest
 */
export type TokenApiRemoveByTokenByIdWebhookRequest = {
    
    /**
    * idWebhook
    * @type {string}
    * @memberof TokenApiRemoveByTokenByIdWebhook
    */
    readonly idWebhook: string
    
}

/**
 * Request parameters for updateWebhooksByToken operation in TokenApi.
 * @export
 * @interface TokenApiUpdateWebhooksByTokenRequest
 */
export type TokenApiUpdateWebhooksByTokenRequest = {
    
} & TokensWebhooks

/**
 * TokenApiGenerated - object-oriented interface
 * @export
 * @class TokenApiGenerated
 * @extends {BaseAPI}
 */
export class TokenApiGenerated extends BaseAPI {
    /**
     * 
     * @summary deleteTokensByToken()
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApiGenerated
     */
    public deleteByToken(options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).deleteByToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getTokensByToken()
     * @param {TokenApiGetByTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApiGenerated
     */
    public getByToken(requestParameters: TokenApiGetByTokenRequest = {}, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).getByToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getTokensByTokenByField()
     * @param {TokenApiGetByTokenByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApiGenerated
     */
    public getByTokenByField(requestParameters: TokenApiGetByTokenByFieldRequest, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).getByTokenByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getTokensMemberByTokenByField()
     * @param {TokenApiGetMemberByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApiGenerated
     */
    public getMemberByField(requestParameters: TokenApiGetMemberByFieldRequest, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).getMemberByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getTokensMemberByToken()
     * @param {TokenApiGetMemberByTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApiGenerated
     */
    public getMemberByToken(requestParameters: TokenApiGetMemberByTokenRequest = {}, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).getMemberByToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getTokensWebhooksByTokenByIdWebhook()
     * @param {TokenApiGetWebhookByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApiGenerated
     */
    public getWebhookById(requestParameters: TokenApiGetWebhookByIdRequest, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).getWebhookById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getTokensWebhooksByToken()
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApiGenerated
     */
    public getWebhooks(options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).getWebhooks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addTokensWebhooksByToken()
     * @param {TokenApiRegisterWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApiGenerated
     */
    public registerWebhook(requestParameters: TokenApiRegisterWebhookRequest, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).registerWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteTokensWebhooksByTokenByIdWebhook()
     * @param {TokenApiRemoveByTokenByIdWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApiGenerated
     */
    public removeByTokenByIdWebhook(requestParameters: TokenApiRemoveByTokenByIdWebhookRequest, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).removeByTokenByIdWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateTokensWebhooksByToken()
     * @param {TokenApiUpdateWebhooksByTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApiGenerated
     */
    public updateWebhooksByToken(requestParameters: TokenApiUpdateWebhooksByTokenRequest, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).updateWebhooksByToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
