/* tslint:disable */
/* eslint-disable */
/*
Trello

This document describes the REST API of Trello as published by Trello.com.
 - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>
 - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Lists } from '../models';
// @ts-ignore
import { ListsCards } from '../models';
// @ts-ignore
import { ListsClosed } from '../models';
// @ts-ignore
import { ListsIdBoard } from '../models';
// @ts-ignore
import { ListsMoveAllCards } from '../models';
// @ts-ignore
import { ListsName } from '../models';
// @ts-ignore
import { ListsPos } from '../models';
// @ts-ignore
import { ListsSubscribed } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ListApi - axios parameter creator
 * @export
 */
export const ListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addListsArchiveAllCardsByIdList()
         * @param {string} idList idList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveAllCardsByIdList: async (idList: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idList' is not null or undefined
            assertParamExists('archiveAllCardsByIdList', 'idList', idList)
            const localVarPath = `/lists/{idList}/archiveAllCards`
                .replace(`{${"idList"}}`, encodeURIComponent(String(idList !== undefined ? idList : `-idList-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{idList}/archiveAllCards',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addListsCardsByIdList()
         * @param {string} idList idList
         * @param {ListsCards} listsCards Attributes of \&quot;Lists Cards\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCardsByIdList: async (idList: string, listsCards: ListsCards, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idList' is not null or undefined
            assertParamExists('createCardsByIdList', 'idList', idList)
            // verify required parameter 'listsCards' is not null or undefined
            assertParamExists('createCardsByIdList', 'listsCards', listsCards)
            const localVarPath = `/lists/{idList}/cards`
                .replace(`{${"idList"}}`, encodeURIComponent(String(idList !== undefined ? idList : `-idList-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: listsCards,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{idList}/cards',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(listsCards, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addLists()
         * @param {Lists} lists Attributes of \&quot;Lists\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createList: async (lists: Lists, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lists' is not null or undefined
            assertParamExists('createList', 'lists', lists)
            const localVarPath = `/lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: lists,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(lists, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getListsActionsByIdList()
         * @param {string} idList idList
         * @param {string} [entities]  true or false
         * @param {string} [display]  true or false
         * @param {string} [filter] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [fields] all or a comma-separated list of: data, date, idMemberCreator or type
         * @param {string} [limit] a number from 0 to 1000
         * @param {string} [format] One of: count, list or minimal
         * @param {string} [since] A date, null or lastView
         * @param {string} [before] A date, or null
         * @param {string} [page] Page * limit must be less than 1000
         * @param {string} [idModels] Only return actions related to these model ids
         * @param {string} [member]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [memberCreator]  true or false
         * @param {string} [memberCreatorFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActionsByIdList: async (idList: string, entities?: string, display?: string, filter?: string, fields?: string, limit?: string, format?: string, since?: string, before?: string, page?: string, idModels?: string, member?: string, memberFields?: string, memberCreator?: string, memberCreatorFields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idList' is not null or undefined
            assertParamExists('getActionsByIdList', 'idList', idList)
            const localVarPath = `/lists/{idList}/actions`
                .replace(`{${"idList"}}`, encodeURIComponent(String(idList !== undefined ? idList : `-idList-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (entities !== undefined) {
                localVarQueryParameter['entities'] = entities;
            }

            if (display !== undefined) {
                localVarQueryParameter['display'] = display;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (idModels !== undefined) {
                localVarQueryParameter['idModels'] = idModels;
            }

            if (member !== undefined) {
                localVarQueryParameter['member'] = member;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (memberCreator !== undefined) {
                localVarQueryParameter['memberCreator'] = memberCreator;
            }

            if (memberCreatorFields !== undefined) {
                localVarQueryParameter['memberCreator_fields'] = memberCreatorFields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{idList}/actions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getListsBoardByIdListByField()
         * @param {string} idList idList
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdListByField: async (idList: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idList' is not null or undefined
            assertParamExists('getBoardByIdListByField', 'idList', idList)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getBoardByIdListByField', 'field', field)
            const localVarPath = `/lists/{idList}/board/{field}`
                .replace(`{${"idList"}}`, encodeURIComponent(String(idList !== undefined ? idList : `-idList-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{idList}/board/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getListsByIdList()
         * @param {string} idList idList
         * @param {string} [cards] One of: all, closed, none or open
         * @param {string} [cardFields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {string} [board]  true or false
         * @param {string} [boardFields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {string} [fields] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdList: async (idList: string, cards?: string, cardFields?: string, board?: string, boardFields?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idList' is not null or undefined
            assertParamExists('getByIdList', 'idList', idList)
            const localVarPath = `/lists/{idList}`
                .replace(`{${"idList"}}`, encodeURIComponent(String(idList !== undefined ? idList : `-idList-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (cards !== undefined) {
                localVarQueryParameter['cards'] = cards;
            }

            if (cardFields !== undefined) {
                localVarQueryParameter['card_fields'] = cardFields;
            }

            if (board !== undefined) {
                localVarQueryParameter['board'] = board;
            }

            if (boardFields !== undefined) {
                localVarQueryParameter['board_fields'] = boardFields;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{idList}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getListsByIdListByField()
         * @param {string} idList idList
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdListByField: async (idList: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idList' is not null or undefined
            assertParamExists('getByIdListByField', 'idList', idList)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getByIdListByField', 'field', field)
            const localVarPath = `/lists/{idList}/{field}`
                .replace(`{${"idList"}}`, encodeURIComponent(String(idList !== undefined ? idList : `-idList-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{idList}/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getListsCardsByIdListByFilter()
         * @param {string} idList idList
         * @param {string} filter filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByFilter: async (idList: string, filter: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idList' is not null or undefined
            assertParamExists('getCardsByFilter', 'idList', idList)
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('getCardsByFilter', 'filter', filter)
            const localVarPath = `/lists/{idList}/cards/{filter}`
                .replace(`{${"idList"}}`, encodeURIComponent(String(idList !== undefined ? idList : `-idList-`)))
                .replace(`{${"filter"}}`, encodeURIComponent(String(filter !== undefined ? filter : `-filter-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{idList}/cards/{filter}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getListsCardsByIdList()
         * @param {string} idList idList
         * @param {string} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [attachments] A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments
         * @param {string} [attachmentFields] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
         * @param {string} [stickers]  true or false
         * @param {string} [members]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [checkItemStates]  true or false
         * @param {string} [checklists] One of: all or none
         * @param {string} [limit] a number from 1 to 1000
         * @param {string} [since] A date, or null
         * @param {string} [before] A date, or null
         * @param {string} [filter] One of: all, closed, none or open
         * @param {string} [fields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByIdList: async (idList: string, actions?: string, attachments?: string, attachmentFields?: string, stickers?: string, members?: string, memberFields?: string, checkItemStates?: string, checklists?: string, limit?: string, since?: string, before?: string, filter?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idList' is not null or undefined
            assertParamExists('getCardsByIdList', 'idList', idList)
            const localVarPath = `/lists/{idList}/cards`
                .replace(`{${"idList"}}`, encodeURIComponent(String(idList !== undefined ? idList : `-idList-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (actions !== undefined) {
                localVarQueryParameter['actions'] = actions;
            }

            if (attachments !== undefined) {
                localVarQueryParameter['attachments'] = attachments;
            }

            if (attachmentFields !== undefined) {
                localVarQueryParameter['attachment_fields'] = attachmentFields;
            }

            if (stickers !== undefined) {
                localVarQueryParameter['stickers'] = stickers;
            }

            if (members !== undefined) {
                localVarQueryParameter['members'] = members;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (checkItemStates !== undefined) {
                localVarQueryParameter['checkItemStates'] = checkItemStates;
            }

            if (checklists !== undefined) {
                localVarQueryParameter['checklists'] = checklists;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{idList}/cards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getListsBoardByIdList()
         * @param {string} idList idList
         * @param {string} [fields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idBoardGet: async (idList: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idList' is not null or undefined
            assertParamExists('idBoardGet', 'idList', idList)
            const localVarPath = `/lists/{idList}/board`
                .replace(`{${"idList"}}`, encodeURIComponent(String(idList !== undefined ? idList : `-idList-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{idList}/board',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addListsMoveAllCardsByIdList()
         * @param {string} idList idList
         * @param {ListsMoveAllCards} listsMoveAllCards Attributes of \&quot;Lists Move All Cards\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveAllCardsByIdList: async (idList: string, listsMoveAllCards: ListsMoveAllCards, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idList' is not null or undefined
            assertParamExists('moveAllCardsByIdList', 'idList', idList)
            // verify required parameter 'listsMoveAllCards' is not null or undefined
            assertParamExists('moveAllCardsByIdList', 'listsMoveAllCards', listsMoveAllCards)
            const localVarPath = `/lists/{idList}/moveAllCards`
                .replace(`{${"idList"}}`, encodeURIComponent(String(idList !== undefined ? idList : `-idList-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: listsMoveAllCards,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{idList}/moveAllCards',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(listsMoveAllCards, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateListsByIdList()
         * @param {string} idList idList
         * @param {Lists} lists Attributes of \&quot;Lists\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdList: async (idList: string, lists: Lists, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idList' is not null or undefined
            assertParamExists('updateByIdList', 'idList', idList)
            // verify required parameter 'lists' is not null or undefined
            assertParamExists('updateByIdList', 'lists', lists)
            const localVarPath = `/lists/{idList}`
                .replace(`{${"idList"}}`, encodeURIComponent(String(idList !== undefined ? idList : `-idList-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: lists,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{idList}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(lists, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateListsClosedByIdList()
         * @param {string} idList idList
         * @param {ListsClosed} listsClosed Attributes of \&quot;Lists Closed\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClosedByIdList: async (idList: string, listsClosed: ListsClosed, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idList' is not null or undefined
            assertParamExists('updateClosedByIdList', 'idList', idList)
            // verify required parameter 'listsClosed' is not null or undefined
            assertParamExists('updateClosedByIdList', 'listsClosed', listsClosed)
            const localVarPath = `/lists/{idList}/closed`
                .replace(`{${"idList"}}`, encodeURIComponent(String(idList !== undefined ? idList : `-idList-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: listsClosed,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{idList}/closed',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(listsClosed, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateListsIdBoardByIdList()
         * @param {string} idList idList
         * @param {ListsIdBoard} listsIdBoard Attributes of \&quot;Lists Id Board\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdBoardByIdList: async (idList: string, listsIdBoard: ListsIdBoard, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idList' is not null or undefined
            assertParamExists('updateIdBoardByIdList', 'idList', idList)
            // verify required parameter 'listsIdBoard' is not null or undefined
            assertParamExists('updateIdBoardByIdList', 'listsIdBoard', listsIdBoard)
            const localVarPath = `/lists/{idList}/idBoard`
                .replace(`{${"idList"}}`, encodeURIComponent(String(idList !== undefined ? idList : `-idList-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: listsIdBoard,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{idList}/idBoard',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(listsIdBoard, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateListsNameByIdList()
         * @param {string} idList idList
         * @param {ListsName} listsName Attributes of \&quot;Lists Name\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNameByIdList: async (idList: string, listsName: ListsName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idList' is not null or undefined
            assertParamExists('updateNameByIdList', 'idList', idList)
            // verify required parameter 'listsName' is not null or undefined
            assertParamExists('updateNameByIdList', 'listsName', listsName)
            const localVarPath = `/lists/{idList}/name`
                .replace(`{${"idList"}}`, encodeURIComponent(String(idList !== undefined ? idList : `-idList-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: listsName,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{idList}/name',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(listsName, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateListsPosByIdList()
         * @param {string} idList idList
         * @param {ListsPos} listsPos Attributes of \&quot;Lists Pos\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePosByIdList: async (idList: string, listsPos: ListsPos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idList' is not null or undefined
            assertParamExists('updatePosByIdList', 'idList', idList)
            // verify required parameter 'listsPos' is not null or undefined
            assertParamExists('updatePosByIdList', 'listsPos', listsPos)
            const localVarPath = `/lists/{idList}/pos`
                .replace(`{${"idList"}}`, encodeURIComponent(String(idList !== undefined ? idList : `-idList-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: listsPos,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{idList}/pos',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(listsPos, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateListsSubscribedByIdList()
         * @param {string} idList idList
         * @param {ListsSubscribed} listsSubscribed Attributes of \&quot;Lists Subscribed\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscribedByIdList: async (idList: string, listsSubscribed: ListsSubscribed, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idList' is not null or undefined
            assertParamExists('updateSubscribedByIdList', 'idList', idList)
            // verify required parameter 'listsSubscribed' is not null or undefined
            assertParamExists('updateSubscribedByIdList', 'listsSubscribed', listsSubscribed)
            const localVarPath = `/lists/{idList}/subscribed`
                .replace(`{${"idList"}}`, encodeURIComponent(String(idList !== undefined ? idList : `-idList-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: listsSubscribed,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{idList}/subscribed',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(listsSubscribed, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListApi - functional programming interface
 * @export
 */
export const ListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary addListsArchiveAllCardsByIdList()
         * @param {ListApiArchiveAllCardsByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveAllCardsByIdList(requestParameters: ListApiArchiveAllCardsByIdListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveAllCardsByIdList(requestParameters.idList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addListsCardsByIdList()
         * @param {ListApiCreateCardsByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCardsByIdList(requestParameters: ListApiCreateCardsByIdListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const listsCards: ListsCards = {
                desc: requestParameters.desc,
                due: requestParameters.due,
                idMembers: requestParameters.idMembers,
                labels: requestParameters.labels,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCardsByIdList(requestParameters.idList, listsCards, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addLists()
         * @param {ListApiCreateListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createList(requestParameters: ListApiCreateListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const lists: Lists = {
                closed: requestParameters.closed,
                idBoard: requestParameters.idBoard,
                idListSource: requestParameters.idListSource,
                name: requestParameters.name,
                pos: requestParameters.pos,
                subscribed: requestParameters.subscribed
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createList(lists, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getListsActionsByIdList()
         * @param {ListApiGetActionsByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActionsByIdList(requestParameters: ListApiGetActionsByIdListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActionsByIdList(requestParameters.idList, requestParameters.entities, requestParameters.display, requestParameters.filter, requestParameters.fields, requestParameters.limit, requestParameters.format, requestParameters.since, requestParameters.before, requestParameters.page, requestParameters.idModels, requestParameters.member, requestParameters.memberFields, requestParameters.memberCreator, requestParameters.memberCreatorFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getListsBoardByIdListByField()
         * @param {ListApiGetBoardByIdListByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardByIdListByField(requestParameters: ListApiGetBoardByIdListByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardByIdListByField(requestParameters.idList, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getListsByIdList()
         * @param {ListApiGetByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdList(requestParameters: ListApiGetByIdListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdList(requestParameters.idList, requestParameters.cards, requestParameters.cardFields, requestParameters.board, requestParameters.boardFields, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getListsByIdListByField()
         * @param {ListApiGetByIdListByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdListByField(requestParameters: ListApiGetByIdListByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdListByField(requestParameters.idList, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getListsCardsByIdListByFilter()
         * @param {ListApiGetCardsByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardsByFilter(requestParameters: ListApiGetCardsByFilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardsByFilter(requestParameters.idList, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getListsCardsByIdList()
         * @param {ListApiGetCardsByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardsByIdList(requestParameters: ListApiGetCardsByIdListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardsByIdList(requestParameters.idList, requestParameters.actions, requestParameters.attachments, requestParameters.attachmentFields, requestParameters.stickers, requestParameters.members, requestParameters.memberFields, requestParameters.checkItemStates, requestParameters.checklists, requestParameters.limit, requestParameters.since, requestParameters.before, requestParameters.filter, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getListsBoardByIdList()
         * @param {ListApiIdBoardGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idBoardGet(requestParameters: ListApiIdBoardGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idBoardGet(requestParameters.idList, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addListsMoveAllCardsByIdList()
         * @param {ListApiMoveAllCardsByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveAllCardsByIdList(requestParameters: ListApiMoveAllCardsByIdListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const listsMoveAllCards: ListsMoveAllCards = {
                idBoard: requestParameters.idBoard
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveAllCardsByIdList(requestParameters.idList, listsMoveAllCards, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateListsByIdList()
         * @param {ListApiUpdateByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByIdList(requestParameters: ListApiUpdateByIdListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const lists: Lists = {
                closed: requestParameters.closed,
                idBoard: requestParameters.idBoard,
                idListSource: requestParameters.idListSource,
                name: requestParameters.name,
                pos: requestParameters.pos,
                subscribed: requestParameters.subscribed
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByIdList(requestParameters.idList, lists, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateListsClosedByIdList()
         * @param {ListApiUpdateClosedByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClosedByIdList(requestParameters: ListApiUpdateClosedByIdListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const listsClosed: ListsClosed = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClosedByIdList(requestParameters.idList, listsClosed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateListsIdBoardByIdList()
         * @param {ListApiUpdateIdBoardByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIdBoardByIdList(requestParameters: ListApiUpdateIdBoardByIdListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const listsIdBoard: ListsIdBoard = {
                pos: requestParameters.pos,
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIdBoardByIdList(requestParameters.idList, listsIdBoard, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateListsNameByIdList()
         * @param {ListApiUpdateNameByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNameByIdList(requestParameters: ListApiUpdateNameByIdListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const listsName: ListsName = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNameByIdList(requestParameters.idList, listsName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateListsPosByIdList()
         * @param {ListApiUpdatePosByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePosByIdList(requestParameters: ListApiUpdatePosByIdListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const listsPos: ListsPos = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePosByIdList(requestParameters.idList, listsPos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateListsSubscribedByIdList()
         * @param {ListApiUpdateSubscribedByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscribedByIdList(requestParameters: ListApiUpdateSubscribedByIdListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const listsSubscribed: ListsSubscribed = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscribedByIdList(requestParameters.idList, listsSubscribed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListApi - factory interface
 * @export
 */
export const ListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListApiFp(configuration)
    return {
        /**
         * 
         * @summary addListsArchiveAllCardsByIdList()
         * @param {ListApiArchiveAllCardsByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveAllCardsByIdList(requestParameters: ListApiArchiveAllCardsByIdListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.archiveAllCardsByIdList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addListsCardsByIdList()
         * @param {ListApiCreateCardsByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCardsByIdList(requestParameters: ListApiCreateCardsByIdListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createCardsByIdList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addLists()
         * @param {ListApiCreateListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createList(requestParameters: ListApiCreateListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getListsActionsByIdList()
         * @param {ListApiGetActionsByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActionsByIdList(requestParameters: ListApiGetActionsByIdListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getActionsByIdList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getListsBoardByIdListByField()
         * @param {ListApiGetBoardByIdListByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdListByField(requestParameters: ListApiGetBoardByIdListByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardByIdListByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getListsByIdList()
         * @param {ListApiGetByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdList(requestParameters: ListApiGetByIdListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getByIdList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getListsByIdListByField()
         * @param {ListApiGetByIdListByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdListByField(requestParameters: ListApiGetByIdListByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getByIdListByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getListsCardsByIdListByFilter()
         * @param {ListApiGetCardsByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByFilter(requestParameters: ListApiGetCardsByFilterRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCardsByFilter(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getListsCardsByIdList()
         * @param {ListApiGetCardsByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByIdList(requestParameters: ListApiGetCardsByIdListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCardsByIdList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getListsBoardByIdList()
         * @param {ListApiIdBoardGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idBoardGet(requestParameters: ListApiIdBoardGetRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.idBoardGet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addListsMoveAllCardsByIdList()
         * @param {ListApiMoveAllCardsByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveAllCardsByIdList(requestParameters: ListApiMoveAllCardsByIdListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.moveAllCardsByIdList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateListsByIdList()
         * @param {ListApiUpdateByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdList(requestParameters: ListApiUpdateByIdListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateByIdList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateListsClosedByIdList()
         * @param {ListApiUpdateClosedByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClosedByIdList(requestParameters: ListApiUpdateClosedByIdListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateClosedByIdList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateListsIdBoardByIdList()
         * @param {ListApiUpdateIdBoardByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdBoardByIdList(requestParameters: ListApiUpdateIdBoardByIdListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateIdBoardByIdList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateListsNameByIdList()
         * @param {ListApiUpdateNameByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNameByIdList(requestParameters: ListApiUpdateNameByIdListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateNameByIdList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateListsPosByIdList()
         * @param {ListApiUpdatePosByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePosByIdList(requestParameters: ListApiUpdatePosByIdListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePosByIdList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateListsSubscribedByIdList()
         * @param {ListApiUpdateSubscribedByIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscribedByIdList(requestParameters: ListApiUpdateSubscribedByIdListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSubscribedByIdList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveAllCardsByIdList operation in ListApi.
 * @export
 * @interface ListApiArchiveAllCardsByIdListRequest
 */
export type ListApiArchiveAllCardsByIdListRequest = {
    
    /**
    * idList
    * @type {string}
    * @memberof ListApiArchiveAllCardsByIdList
    */
    readonly idList: string
    
}

/**
 * Request parameters for createCardsByIdList operation in ListApi.
 * @export
 * @interface ListApiCreateCardsByIdListRequest
 */
export type ListApiCreateCardsByIdListRequest = {
    
    /**
    * idList
    * @type {string}
    * @memberof ListApiCreateCardsByIdList
    */
    readonly idList: string
    
} & ListsCards

/**
 * Request parameters for createList operation in ListApi.
 * @export
 * @interface ListApiCreateListRequest
 */
export type ListApiCreateListRequest = {
    
} & Lists

/**
 * Request parameters for getActionsByIdList operation in ListApi.
 * @export
 * @interface ListApiGetActionsByIdListRequest
 */
export type ListApiGetActionsByIdListRequest = {
    
    /**
    * idList
    * @type {string}
    * @memberof ListApiGetActionsByIdList
    */
    readonly idList: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof ListApiGetActionsByIdList
    */
    readonly entities?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof ListApiGetActionsByIdList
    */
    readonly display?: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof ListApiGetActionsByIdList
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator or type
    * @type {string}
    * @memberof ListApiGetActionsByIdList
    */
    readonly fields?: string
    
    /**
    * a number from 0 to 1000
    * @type {string}
    * @memberof ListApiGetActionsByIdList
    */
    readonly limit?: string
    
    /**
    * One of: count, list or minimal
    * @type {string}
    * @memberof ListApiGetActionsByIdList
    */
    readonly format?: string
    
    /**
    * A date, null or lastView
    * @type {string}
    * @memberof ListApiGetActionsByIdList
    */
    readonly since?: string
    
    /**
    * A date, or null
    * @type {string}
    * @memberof ListApiGetActionsByIdList
    */
    readonly before?: string
    
    /**
    * Page * limit must be less than 1000
    * @type {string}
    * @memberof ListApiGetActionsByIdList
    */
    readonly page?: string
    
    /**
    * Only return actions related to these model ids
    * @type {string}
    * @memberof ListApiGetActionsByIdList
    */
    readonly idModels?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof ListApiGetActionsByIdList
    */
    readonly member?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof ListApiGetActionsByIdList
    */
    readonly memberFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof ListApiGetActionsByIdList
    */
    readonly memberCreator?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof ListApiGetActionsByIdList
    */
    readonly memberCreatorFields?: string
    
}

/**
 * Request parameters for getBoardByIdListByField operation in ListApi.
 * @export
 * @interface ListApiGetBoardByIdListByFieldRequest
 */
export type ListApiGetBoardByIdListByFieldRequest = {
    
    /**
    * idList
    * @type {string}
    * @memberof ListApiGetBoardByIdListByField
    */
    readonly idList: string
    
    /**
    * field
    * @type {string}
    * @memberof ListApiGetBoardByIdListByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getByIdList operation in ListApi.
 * @export
 * @interface ListApiGetByIdListRequest
 */
export type ListApiGetByIdListRequest = {
    
    /**
    * idList
    * @type {string}
    * @memberof ListApiGetByIdList
    */
    readonly idList: string
    
    /**
    * One of: all, closed, none or open
    * @type {string}
    * @memberof ListApiGetByIdList
    */
    readonly cards?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof ListApiGetByIdList
    */
    readonly cardFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof ListApiGetByIdList
    */
    readonly board?: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof ListApiGetByIdList
    */
    readonly boardFields?: string
    
    /**
    * all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    * @type {string}
    * @memberof ListApiGetByIdList
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getByIdListByField operation in ListApi.
 * @export
 * @interface ListApiGetByIdListByFieldRequest
 */
export type ListApiGetByIdListByFieldRequest = {
    
    /**
    * idList
    * @type {string}
    * @memberof ListApiGetByIdListByField
    */
    readonly idList: string
    
    /**
    * field
    * @type {string}
    * @memberof ListApiGetByIdListByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getCardsByFilter operation in ListApi.
 * @export
 * @interface ListApiGetCardsByFilterRequest
 */
export type ListApiGetCardsByFilterRequest = {
    
    /**
    * idList
    * @type {string}
    * @memberof ListApiGetCardsByFilter
    */
    readonly idList: string
    
    /**
    * filter
    * @type {string}
    * @memberof ListApiGetCardsByFilter
    */
    readonly filter: string
    
}

/**
 * Request parameters for getCardsByIdList operation in ListApi.
 * @export
 * @interface ListApiGetCardsByIdListRequest
 */
export type ListApiGetCardsByIdListRequest = {
    
    /**
    * idList
    * @type {string}
    * @memberof ListApiGetCardsByIdList
    */
    readonly idList: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof ListApiGetCardsByIdList
    */
    readonly actions?: string
    
    /**
    * A boolean value or &quot;cover&quot; for only card cover attachments
    * @type {string}
    * @memberof ListApiGetCardsByIdList
    */
    readonly attachments?: string
    
    /**
    * all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    * @type {string}
    * @memberof ListApiGetCardsByIdList
    */
    readonly attachmentFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof ListApiGetCardsByIdList
    */
    readonly stickers?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof ListApiGetCardsByIdList
    */
    readonly members?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof ListApiGetCardsByIdList
    */
    readonly memberFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof ListApiGetCardsByIdList
    */
    readonly checkItemStates?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof ListApiGetCardsByIdList
    */
    readonly checklists?: string
    
    /**
    * a number from 1 to 1000
    * @type {string}
    * @memberof ListApiGetCardsByIdList
    */
    readonly limit?: string
    
    /**
    * A date, or null
    * @type {string}
    * @memberof ListApiGetCardsByIdList
    */
    readonly since?: string
    
    /**
    * A date, or null
    * @type {string}
    * @memberof ListApiGetCardsByIdList
    */
    readonly before?: string
    
    /**
    * One of: all, closed, none or open
    * @type {string}
    * @memberof ListApiGetCardsByIdList
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof ListApiGetCardsByIdList
    */
    readonly fields?: string
    
}

/**
 * Request parameters for idBoardGet operation in ListApi.
 * @export
 * @interface ListApiIdBoardGetRequest
 */
export type ListApiIdBoardGetRequest = {
    
    /**
    * idList
    * @type {string}
    * @memberof ListApiIdBoardGet
    */
    readonly idList: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof ListApiIdBoardGet
    */
    readonly fields?: string
    
}

/**
 * Request parameters for moveAllCardsByIdList operation in ListApi.
 * @export
 * @interface ListApiMoveAllCardsByIdListRequest
 */
export type ListApiMoveAllCardsByIdListRequest = {
    
    /**
    * idList
    * @type {string}
    * @memberof ListApiMoveAllCardsByIdList
    */
    readonly idList: string
    
} & ListsMoveAllCards

/**
 * Request parameters for updateByIdList operation in ListApi.
 * @export
 * @interface ListApiUpdateByIdListRequest
 */
export type ListApiUpdateByIdListRequest = {
    
    /**
    * idList
    * @type {string}
    * @memberof ListApiUpdateByIdList
    */
    readonly idList: string
    
} & Lists

/**
 * Request parameters for updateClosedByIdList operation in ListApi.
 * @export
 * @interface ListApiUpdateClosedByIdListRequest
 */
export type ListApiUpdateClosedByIdListRequest = {
    
    /**
    * idList
    * @type {string}
    * @memberof ListApiUpdateClosedByIdList
    */
    readonly idList: string
    
} & ListsClosed

/**
 * Request parameters for updateIdBoardByIdList operation in ListApi.
 * @export
 * @interface ListApiUpdateIdBoardByIdListRequest
 */
export type ListApiUpdateIdBoardByIdListRequest = {
    
    /**
    * idList
    * @type {string}
    * @memberof ListApiUpdateIdBoardByIdList
    */
    readonly idList: string
    
} & ListsIdBoard

/**
 * Request parameters for updateNameByIdList operation in ListApi.
 * @export
 * @interface ListApiUpdateNameByIdListRequest
 */
export type ListApiUpdateNameByIdListRequest = {
    
    /**
    * idList
    * @type {string}
    * @memberof ListApiUpdateNameByIdList
    */
    readonly idList: string
    
} & ListsName

/**
 * Request parameters for updatePosByIdList operation in ListApi.
 * @export
 * @interface ListApiUpdatePosByIdListRequest
 */
export type ListApiUpdatePosByIdListRequest = {
    
    /**
    * idList
    * @type {string}
    * @memberof ListApiUpdatePosByIdList
    */
    readonly idList: string
    
} & ListsPos

/**
 * Request parameters for updateSubscribedByIdList operation in ListApi.
 * @export
 * @interface ListApiUpdateSubscribedByIdListRequest
 */
export type ListApiUpdateSubscribedByIdListRequest = {
    
    /**
    * idList
    * @type {string}
    * @memberof ListApiUpdateSubscribedByIdList
    */
    readonly idList: string
    
} & ListsSubscribed

/**
 * ListApiGenerated - object-oriented interface
 * @export
 * @class ListApiGenerated
 * @extends {BaseAPI}
 */
export class ListApiGenerated extends BaseAPI {
    /**
     * 
     * @summary addListsArchiveAllCardsByIdList()
     * @param {ListApiArchiveAllCardsByIdListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public archiveAllCardsByIdList(requestParameters: ListApiArchiveAllCardsByIdListRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).archiveAllCardsByIdList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addListsCardsByIdList()
     * @param {ListApiCreateCardsByIdListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public createCardsByIdList(requestParameters: ListApiCreateCardsByIdListRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).createCardsByIdList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addLists()
     * @param {ListApiCreateListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public createList(requestParameters: ListApiCreateListRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).createList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getListsActionsByIdList()
     * @param {ListApiGetActionsByIdListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public getActionsByIdList(requestParameters: ListApiGetActionsByIdListRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).getActionsByIdList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getListsBoardByIdListByField()
     * @param {ListApiGetBoardByIdListByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public getBoardByIdListByField(requestParameters: ListApiGetBoardByIdListByFieldRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).getBoardByIdListByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getListsByIdList()
     * @param {ListApiGetByIdListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public getByIdList(requestParameters: ListApiGetByIdListRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).getByIdList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getListsByIdListByField()
     * @param {ListApiGetByIdListByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public getByIdListByField(requestParameters: ListApiGetByIdListByFieldRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).getByIdListByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getListsCardsByIdListByFilter()
     * @param {ListApiGetCardsByFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public getCardsByFilter(requestParameters: ListApiGetCardsByFilterRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).getCardsByFilter(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getListsCardsByIdList()
     * @param {ListApiGetCardsByIdListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public getCardsByIdList(requestParameters: ListApiGetCardsByIdListRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).getCardsByIdList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getListsBoardByIdList()
     * @param {ListApiIdBoardGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public idBoardGet(requestParameters: ListApiIdBoardGetRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).idBoardGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addListsMoveAllCardsByIdList()
     * @param {ListApiMoveAllCardsByIdListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public moveAllCardsByIdList(requestParameters: ListApiMoveAllCardsByIdListRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).moveAllCardsByIdList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateListsByIdList()
     * @param {ListApiUpdateByIdListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public updateByIdList(requestParameters: ListApiUpdateByIdListRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).updateByIdList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateListsClosedByIdList()
     * @param {ListApiUpdateClosedByIdListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public updateClosedByIdList(requestParameters: ListApiUpdateClosedByIdListRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).updateClosedByIdList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateListsIdBoardByIdList()
     * @param {ListApiUpdateIdBoardByIdListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public updateIdBoardByIdList(requestParameters: ListApiUpdateIdBoardByIdListRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).updateIdBoardByIdList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateListsNameByIdList()
     * @param {ListApiUpdateNameByIdListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public updateNameByIdList(requestParameters: ListApiUpdateNameByIdListRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).updateNameByIdList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateListsPosByIdList()
     * @param {ListApiUpdatePosByIdListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public updatePosByIdList(requestParameters: ListApiUpdatePosByIdListRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).updatePosByIdList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateListsSubscribedByIdList()
     * @param {ListApiUpdateSubscribedByIdListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public updateSubscribedByIdList(requestParameters: ListApiUpdateSubscribedByIdListRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).updateSubscribedByIdList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
