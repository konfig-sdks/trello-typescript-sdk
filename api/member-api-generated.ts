/* tslint:disable */
/* eslint-disable */
/*
Trello

This document describes the REST API of Trello as published by Trello.com.
 - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>
 - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Members } from '../models';
// @ts-ignore
import { MembersAvatar } from '../models';
// @ts-ignore
import { MembersAvatarSource } from '../models';
// @ts-ignore
import { MembersBio } from '../models';
// @ts-ignore
import { MembersBoardBackgrounds } from '../models';
// @ts-ignore
import { MembersBoardStars } from '../models';
// @ts-ignore
import { MembersBoardStarsIdBoard } from '../models';
// @ts-ignore
import { MembersBoardStarsPos } from '../models';
// @ts-ignore
import { MembersCustomBoardBackgrounds } from '../models';
// @ts-ignore
import { MembersCustomEmoji } from '../models';
// @ts-ignore
import { MembersCustomStickers } from '../models';
// @ts-ignore
import { MembersFullName } from '../models';
// @ts-ignore
import { MembersInitials } from '../models';
// @ts-ignore
import { MembersOneTimeMessagesDismissed } from '../models';
// @ts-ignore
import { MembersSavedSearches } from '../models';
// @ts-ignore
import { MembersSavedSearchesName } from '../models';
// @ts-ignore
import { MembersSavedSearchesPos } from '../models';
// @ts-ignore
import { MembersSavedSearchesQuery } from '../models';
// @ts-ignore
import { MembersUsername } from '../models';
// @ts-ignore
import { PrefsColorBlind } from '../models';
// @ts-ignore
import { PrefsLocale } from '../models';
// @ts-ignore
import { PrefsMinutesBetweenSummaries } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MemberApi - axios parameter creator
 * @export
 */
export const MemberApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addMembersBoardBackgroundsByIdMember()
         * @param {string} idMember idMember or username
         * @param {MembersBoardBackgrounds} membersBoardBackgrounds Attributes of \&quot;Members Board Backgrounds\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBoardBackgrounds: async (idMember: string, membersBoardBackgrounds: MembersBoardBackgrounds, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('addBoardBackgrounds', 'idMember', idMember)
            // verify required parameter 'membersBoardBackgrounds' is not null or undefined
            assertParamExists('addBoardBackgrounds', 'membersBoardBackgrounds', membersBoardBackgrounds)
            const localVarPath = `/members/{idMember}/boardBackgrounds`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersBoardBackgrounds,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/boardBackgrounds',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersBoardBackgrounds, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addMembersBoardStarsByIdMember()
         * @param {string} idMember idMember or username
         * @param {MembersBoardStars} membersBoardStars Attributes of \&quot;Members Board Stars\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBoardStarsByIdMember: async (idMember: string, membersBoardStars: MembersBoardStars, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('addBoardStarsByIdMember', 'idMember', idMember)
            // verify required parameter 'membersBoardStars' is not null or undefined
            assertParamExists('addBoardStarsByIdMember', 'membersBoardStars', membersBoardStars)
            const localVarPath = `/members/{idMember}/boardStars`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersBoardStars,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/boardStars',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersBoardStars, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addMembersCustomBoardBackgroundsByIdMember()
         * @param {string} idMember idMember or username
         * @param {MembersCustomBoardBackgrounds} membersCustomBoardBackgrounds Attributes of \&quot;Members Custom Board Backgrounds\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomBoardBackgrounds: async (idMember: string, membersCustomBoardBackgrounds: MembersCustomBoardBackgrounds, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('addCustomBoardBackgrounds', 'idMember', idMember)
            // verify required parameter 'membersCustomBoardBackgrounds' is not null or undefined
            assertParamExists('addCustomBoardBackgrounds', 'membersCustomBoardBackgrounds', membersCustomBoardBackgrounds)
            const localVarPath = `/members/{idMember}/customBoardBackgrounds`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersCustomBoardBackgrounds,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/customBoardBackgrounds',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersCustomBoardBackgrounds, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addMembersCustomEmojiByIdMember()
         * @param {string} idMember idMember or username
         * @param {MembersCustomEmoji} membersCustomEmoji Attributes of \&quot;Members Custom Emoji\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomEmojiByIdMember: async (idMember: string, membersCustomEmoji: MembersCustomEmoji, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('addCustomEmojiByIdMember', 'idMember', idMember)
            // verify required parameter 'membersCustomEmoji' is not null or undefined
            assertParamExists('addCustomEmojiByIdMember', 'membersCustomEmoji', membersCustomEmoji)
            const localVarPath = `/members/{idMember}/customEmoji`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersCustomEmoji,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/customEmoji',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersCustomEmoji, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addMembersCustomStickersByIdMember()
         * @param {string} idMember idMember or username
         * @param {MembersCustomStickers} membersCustomStickers Attributes of \&quot;Members Custom Stickers\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomStickers: async (idMember: string, membersCustomStickers: MembersCustomStickers, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('addCustomStickers', 'idMember', idMember)
            // verify required parameter 'membersCustomStickers' is not null or undefined
            assertParamExists('addCustomStickers', 'membersCustomStickers', membersCustomStickers)
            const localVarPath = `/members/{idMember}/customStickers`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersCustomStickers,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/customStickers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersCustomStickers, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addMembersOneTimeMessagesDismissedByIdMember()
         * @param {string} idMember idMember or username
         * @param {MembersOneTimeMessagesDismissed} membersOneTimeMessagesDismissed Attributes of \&quot;Members One Time Messages Dismissed\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOneTimeMessagesDismissedByIdMember: async (idMember: string, membersOneTimeMessagesDismissed: MembersOneTimeMessagesDismissed, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('addOneTimeMessagesDismissedByIdMember', 'idMember', idMember)
            // verify required parameter 'membersOneTimeMessagesDismissed' is not null or undefined
            assertParamExists('addOneTimeMessagesDismissedByIdMember', 'membersOneTimeMessagesDismissed', membersOneTimeMessagesDismissed)
            const localVarPath = `/members/{idMember}/oneTimeMessagesDismissed`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersOneTimeMessagesDismissed,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/oneTimeMessagesDismissed',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersOneTimeMessagesDismissed, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addMembersSavedSearchesByIdMember()
         * @param {string} idMember idMember or username
         * @param {MembersSavedSearches} membersSavedSearches Attributes of \&quot;Members Saved Searches\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSavedSearch: async (idMember: string, membersSavedSearches: MembersSavedSearches, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('createSavedSearch', 'idMember', idMember)
            // verify required parameter 'membersSavedSearches' is not null or undefined
            assertParamExists('createSavedSearch', 'membersSavedSearches', membersSavedSearches)
            const localVarPath = `/members/{idMember}/savedSearches`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersSavedSearches,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/savedSearches',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersSavedSearches, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {string} idMember idMember or username
         * @param {string} idBoardBackground idBoardBackground
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBoardBackground: async (idMember: string, idBoardBackground: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('deleteBoardBackground', 'idMember', idMember)
            // verify required parameter 'idBoardBackground' is not null or undefined
            assertParamExists('deleteBoardBackground', 'idBoardBackground', idBoardBackground)
            const localVarPath = `/members/{idMember}/boardBackgrounds/{idBoardBackground}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idBoardBackground"}}`, encodeURIComponent(String(idBoardBackground !== undefined ? idBoardBackground : `-idBoardBackground-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/boardBackgrounds/{idBoardBackground}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {string} idMember idMember or username
         * @param {string} idBoardBackground idBoardBackground
         * @param {string} [fields] all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardBackgroundByIds: async (idMember: string, idBoardBackground: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getBoardBackgroundByIds', 'idMember', idMember)
            // verify required parameter 'idBoardBackground' is not null or undefined
            assertParamExists('getBoardBackgroundByIds', 'idBoardBackground', idBoardBackground)
            const localVarPath = `/members/{idMember}/boardBackgrounds/{idBoardBackground}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idBoardBackground"}}`, encodeURIComponent(String(idBoardBackground !== undefined ? idBoardBackground : `-idBoardBackground-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/boardBackgrounds/{idBoardBackground}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersBoardBackgroundsByIdMember()
         * @param {string} idMember idMember or username
         * @param {string} [filter] One of: all, custom, default, none or premium
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardBackgroundsById: async (idMember: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getBoardBackgroundsById', 'idMember', idMember)
            const localVarPath = `/members/{idMember}/boardBackgrounds`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/boardBackgrounds',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersBoardStarsByIdMemberByIdBoardStar()
         * @param {string} idMember idMember or username
         * @param {string} idBoardStar idBoardStar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardStarByIdMember: async (idMember: string, idBoardStar: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getBoardStarByIdMember', 'idMember', idMember)
            // verify required parameter 'idBoardStar' is not null or undefined
            assertParamExists('getBoardStarByIdMember', 'idBoardStar', idBoardStar)
            const localVarPath = `/members/{idMember}/boardStars/{idBoardStar}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idBoardStar"}}`, encodeURIComponent(String(idBoardStar !== undefined ? idBoardStar : `-idBoardStar-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/boardStars/{idBoardStar}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersBoardStarsByIdMember()
         * @param {string} idMember idMember or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardStarsById: async (idMember: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getBoardStarsById', 'idMember', idMember)
            const localVarPath = `/members/{idMember}/boardStars`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/boardStars',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersBoardsByIdMemberByFilter()
         * @param {string} idMember idMember or username
         * @param {string} filter filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoards: async (idMember: string, filter: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getBoards', 'idMember', idMember)
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('getBoards', 'filter', filter)
            const localVarPath = `/members/{idMember}/boards/{filter}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"filter"}}`, encodeURIComponent(String(filter !== undefined ? filter : `-filter-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/boards/{filter}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersBoardsByIdMember()
         * @param {string} idMember idMember or username
         * @param {string} [filter] all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
         * @param {string} [fields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {string} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [actionsEntities]  true or false
         * @param {string} [actionsLimit] a number from 0 to 1000
         * @param {string} [actionsFormat] One of: count, list or minimal
         * @param {string} [actionsSince] A date, null or lastView
         * @param {string} [actionFields] all or a comma-separated list of: data, date, idMemberCreator or type
         * @param {string} [memberships] all or a comma-separated list of: active, admin, deactivated, me or normal
         * @param {string} [organization]  true or false
         * @param {string} [organizationFields] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
         * @param {string} [lists] One of: all, closed, none or open
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardsByIdMember: async (idMember: string, filter?: string, fields?: string, actions?: string, actionsEntities?: string, actionsLimit?: string, actionsFormat?: string, actionsSince?: string, actionFields?: string, memberships?: string, organization?: string, organizationFields?: string, lists?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getBoardsByIdMember', 'idMember', idMember)
            const localVarPath = `/members/{idMember}/boards`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (actions !== undefined) {
                localVarQueryParameter['actions'] = actions;
            }

            if (actionsEntities !== undefined) {
                localVarQueryParameter['actions_entities'] = actionsEntities;
            }

            if (actionsLimit !== undefined) {
                localVarQueryParameter['actions_limit'] = actionsLimit;
            }

            if (actionsFormat !== undefined) {
                localVarQueryParameter['actions_format'] = actionsFormat;
            }

            if (actionsSince !== undefined) {
                localVarQueryParameter['actions_since'] = actionsSince;
            }

            if (actionFields !== undefined) {
                localVarQueryParameter['action_fields'] = actionFields;
            }

            if (memberships !== undefined) {
                localVarQueryParameter['memberships'] = memberships;
            }

            if (organization !== undefined) {
                localVarQueryParameter['organization'] = organization;
            }

            if (organizationFields !== undefined) {
                localVarQueryParameter['organization_fields'] = organizationFields;
            }

            if (lists !== undefined) {
                localVarQueryParameter['lists'] = lists;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/boards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersBoardsInvitedByIdMemberByField()
         * @param {string} idMember idMember or username
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardsInvitedByIdMemberByField: async (idMember: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getBoardsInvitedByIdMemberByField', 'idMember', idMember)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getBoardsInvitedByIdMemberByField', 'field', field)
            const localVarPath = `/members/{idMember}/boardsInvited/{field}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/boardsInvited/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersByIdMemberByField()
         * @param {string} idMember idMember or username
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByField: async (idMember: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getByField', 'idMember', idMember)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getByField', 'field', field)
            const localVarPath = `/members/{idMember}/{field}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * If you specify \'me\' as the username, this call will respond as if you had supplied the username associated with the supplied token
         * @summary getMembersByIdMember()
         * @param {string} idMember idMember or username
         * @param {string} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [actionsEntities]  true or false
         * @param {string} [actionsDisplay]  true or false
         * @param {string} [actionsLimit] a number from 0 to 1000
         * @param {string} [actionFields] all or a comma-separated list of: data, date, idMemberCreator or type
         * @param {string} [actionSince] A date, null or lastView
         * @param {string} [actionBefore] A date, or null
         * @param {string} [cards] One of: all, closed, none, open or visible
         * @param {string} [cardFields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {string} [cardMembers]  true or false
         * @param {string} [cardMemberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [cardAttachments] A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments
         * @param {string} [cardAttachmentFields] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
         * @param {string} [cardStickers]  true or false
         * @param {string} [boards] all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
         * @param {string} [boardFields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {string} [boardActions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [boardActionsEntities]  true or false
         * @param {string} [boardActionsDisplay]  true or false
         * @param {string} [boardActionsFormat] One of: count, list or minimal
         * @param {string} [boardActionsSince] A date, null or lastView
         * @param {string} [boardActionsLimit] a number from 0 to 1000
         * @param {string} [boardActionFields] all or a comma-separated list of: data, date, idMemberCreator or type
         * @param {string} [boardLists] One of: all, closed, none or open
         * @param {string} [boardMemberships] all or a comma-separated list of: active, admin, deactivated, me or normal
         * @param {string} [boardOrganization]  true or false
         * @param {string} [boardOrganizationFields] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
         * @param {string} [boardsInvited] all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
         * @param {string} [boardsInvitedFields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {string} [boardStars]  true or false
         * @param {string} [savedSearches]  true or false
         * @param {string} [organizations] One of: all, members, none or public
         * @param {string} [organizationFields] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
         * @param {string} [organizationPaidAccount]  true or false
         * @param {string} [organizationsInvited] One of: all, members, none or public
         * @param {string} [organizationsInvitedFields] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
         * @param {string} [notifications] all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
         * @param {string} [notificationsEntities]  true or false
         * @param {string} [notificationsDisplay]  true or false
         * @param {string} [notificationsLimit] a number from 1 to 1000
         * @param {string} [notificationFields] all or a comma-separated list of: data, date, idMemberCreator, type or unread
         * @param {string} [notificationMemberCreator]  true or false
         * @param {string} [notificationMemberCreatorFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [notificationBefore] An id, or null
         * @param {string} [notificationSince] An id, or null
         * @param {string} [tokens] One of: all or none
         * @param {string} [paidAccount]  true or false
         * @param {string} [boardBackgrounds] One of: all, custom, default, none or premium
         * @param {string} [customBoardBackgrounds] One of: all or none
         * @param {string} [customStickers] One of: all or none
         * @param {string} [customEmoji] One of: all or none
         * @param {string} [fields] all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (idMember: string, actions?: string, actionsEntities?: string, actionsDisplay?: string, actionsLimit?: string, actionFields?: string, actionSince?: string, actionBefore?: string, cards?: string, cardFields?: string, cardMembers?: string, cardMemberFields?: string, cardAttachments?: string, cardAttachmentFields?: string, cardStickers?: string, boards?: string, boardFields?: string, boardActions?: string, boardActionsEntities?: string, boardActionsDisplay?: string, boardActionsFormat?: string, boardActionsSince?: string, boardActionsLimit?: string, boardActionFields?: string, boardLists?: string, boardMemberships?: string, boardOrganization?: string, boardOrganizationFields?: string, boardsInvited?: string, boardsInvitedFields?: string, boardStars?: string, savedSearches?: string, organizations?: string, organizationFields?: string, organizationPaidAccount?: string, organizationsInvited?: string, organizationsInvitedFields?: string, notifications?: string, notificationsEntities?: string, notificationsDisplay?: string, notificationsLimit?: string, notificationFields?: string, notificationMemberCreator?: string, notificationMemberCreatorFields?: string, notificationBefore?: string, notificationSince?: string, tokens?: string, paidAccount?: string, boardBackgrounds?: string, customBoardBackgrounds?: string, customStickers?: string, customEmoji?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getById', 'idMember', idMember)
            const localVarPath = `/members/{idMember}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (actions !== undefined) {
                localVarQueryParameter['actions'] = actions;
            }

            if (actionsEntities !== undefined) {
                localVarQueryParameter['actions_entities'] = actionsEntities;
            }

            if (actionsDisplay !== undefined) {
                localVarQueryParameter['actions_display'] = actionsDisplay;
            }

            if (actionsLimit !== undefined) {
                localVarQueryParameter['actions_limit'] = actionsLimit;
            }

            if (actionFields !== undefined) {
                localVarQueryParameter['action_fields'] = actionFields;
            }

            if (actionSince !== undefined) {
                localVarQueryParameter['action_since'] = actionSince;
            }

            if (actionBefore !== undefined) {
                localVarQueryParameter['action_before'] = actionBefore;
            }

            if (cards !== undefined) {
                localVarQueryParameter['cards'] = cards;
            }

            if (cardFields !== undefined) {
                localVarQueryParameter['card_fields'] = cardFields;
            }

            if (cardMembers !== undefined) {
                localVarQueryParameter['card_members'] = cardMembers;
            }

            if (cardMemberFields !== undefined) {
                localVarQueryParameter['card_member_fields'] = cardMemberFields;
            }

            if (cardAttachments !== undefined) {
                localVarQueryParameter['card_attachments'] = cardAttachments;
            }

            if (cardAttachmentFields !== undefined) {
                localVarQueryParameter['card_attachment_fields'] = cardAttachmentFields;
            }

            if (cardStickers !== undefined) {
                localVarQueryParameter['card_stickers'] = cardStickers;
            }

            if (boards !== undefined) {
                localVarQueryParameter['boards'] = boards;
            }

            if (boardFields !== undefined) {
                localVarQueryParameter['board_fields'] = boardFields;
            }

            if (boardActions !== undefined) {
                localVarQueryParameter['board_actions'] = boardActions;
            }

            if (boardActionsEntities !== undefined) {
                localVarQueryParameter['board_actions_entities'] = boardActionsEntities;
            }

            if (boardActionsDisplay !== undefined) {
                localVarQueryParameter['board_actions_display'] = boardActionsDisplay;
            }

            if (boardActionsFormat !== undefined) {
                localVarQueryParameter['board_actions_format'] = boardActionsFormat;
            }

            if (boardActionsSince !== undefined) {
                localVarQueryParameter['board_actions_since'] = boardActionsSince;
            }

            if (boardActionsLimit !== undefined) {
                localVarQueryParameter['board_actions_limit'] = boardActionsLimit;
            }

            if (boardActionFields !== undefined) {
                localVarQueryParameter['board_action_fields'] = boardActionFields;
            }

            if (boardLists !== undefined) {
                localVarQueryParameter['board_lists'] = boardLists;
            }

            if (boardMemberships !== undefined) {
                localVarQueryParameter['board_memberships'] = boardMemberships;
            }

            if (boardOrganization !== undefined) {
                localVarQueryParameter['board_organization'] = boardOrganization;
            }

            if (boardOrganizationFields !== undefined) {
                localVarQueryParameter['board_organization_fields'] = boardOrganizationFields;
            }

            if (boardsInvited !== undefined) {
                localVarQueryParameter['boardsInvited'] = boardsInvited;
            }

            if (boardsInvitedFields !== undefined) {
                localVarQueryParameter['boardsInvited_fields'] = boardsInvitedFields;
            }

            if (boardStars !== undefined) {
                localVarQueryParameter['boardStars'] = boardStars;
            }

            if (savedSearches !== undefined) {
                localVarQueryParameter['savedSearches'] = savedSearches;
            }

            if (organizations !== undefined) {
                localVarQueryParameter['organizations'] = organizations;
            }

            if (organizationFields !== undefined) {
                localVarQueryParameter['organization_fields'] = organizationFields;
            }

            if (organizationPaidAccount !== undefined) {
                localVarQueryParameter['organization_paid_account'] = organizationPaidAccount;
            }

            if (organizationsInvited !== undefined) {
                localVarQueryParameter['organizationsInvited'] = organizationsInvited;
            }

            if (organizationsInvitedFields !== undefined) {
                localVarQueryParameter['organizationsInvited_fields'] = organizationsInvitedFields;
            }

            if (notifications !== undefined) {
                localVarQueryParameter['notifications'] = notifications;
            }

            if (notificationsEntities !== undefined) {
                localVarQueryParameter['notifications_entities'] = notificationsEntities;
            }

            if (notificationsDisplay !== undefined) {
                localVarQueryParameter['notifications_display'] = notificationsDisplay;
            }

            if (notificationsLimit !== undefined) {
                localVarQueryParameter['notifications_limit'] = notificationsLimit;
            }

            if (notificationFields !== undefined) {
                localVarQueryParameter['notification_fields'] = notificationFields;
            }

            if (notificationMemberCreator !== undefined) {
                localVarQueryParameter['notification_memberCreator'] = notificationMemberCreator;
            }

            if (notificationMemberCreatorFields !== undefined) {
                localVarQueryParameter['notification_memberCreator_fields'] = notificationMemberCreatorFields;
            }

            if (notificationBefore !== undefined) {
                localVarQueryParameter['notification_before'] = notificationBefore;
            }

            if (notificationSince !== undefined) {
                localVarQueryParameter['notification_since'] = notificationSince;
            }

            if (tokens !== undefined) {
                localVarQueryParameter['tokens'] = tokens;
            }

            if (paidAccount !== undefined) {
                localVarQueryParameter['paid_account'] = paidAccount;
            }

            if (boardBackgrounds !== undefined) {
                localVarQueryParameter['boardBackgrounds'] = boardBackgrounds;
            }

            if (customBoardBackgrounds !== undefined) {
                localVarQueryParameter['customBoardBackgrounds'] = customBoardBackgrounds;
            }

            if (customStickers !== undefined) {
                localVarQueryParameter['customStickers'] = customStickers;
            }

            if (customEmoji !== undefined) {
                localVarQueryParameter['customEmoji'] = customEmoji;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersCardsByIdMemberByFilter()
         * @param {string} idMember idMember or username
         * @param {string} filter filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByFilter: async (idMember: string, filter: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getCardsByFilter', 'idMember', idMember)
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('getCardsByFilter', 'filter', filter)
            const localVarPath = `/members/{idMember}/cards/{filter}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"filter"}}`, encodeURIComponent(String(filter !== undefined ? filter : `-filter-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/cards/{filter}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersCardsByIdMember()
         * @param {string} idMember idMember or username
         * @param {string} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [attachments] A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments
         * @param {string} [attachmentFields] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
         * @param {string} [stickers]  true or false
         * @param {string} [members]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [checkItemStates]  true or false
         * @param {string} [checklists] One of: all or none
         * @param {string} [limit] a number from 1 to 1000
         * @param {string} [since] A date, or null
         * @param {string} [before] A date, or null
         * @param {string} [filter] One of: all, closed, none, open or visible
         * @param {string} [fields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByIdMember: async (idMember: string, actions?: string, attachments?: string, attachmentFields?: string, stickers?: string, members?: string, memberFields?: string, checkItemStates?: string, checklists?: string, limit?: string, since?: string, before?: string, filter?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getCardsByIdMember', 'idMember', idMember)
            const localVarPath = `/members/{idMember}/cards`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (actions !== undefined) {
                localVarQueryParameter['actions'] = actions;
            }

            if (attachments !== undefined) {
                localVarQueryParameter['attachments'] = attachments;
            }

            if (attachmentFields !== undefined) {
                localVarQueryParameter['attachment_fields'] = attachmentFields;
            }

            if (stickers !== undefined) {
                localVarQueryParameter['stickers'] = stickers;
            }

            if (members !== undefined) {
                localVarQueryParameter['members'] = members;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (checkItemStates !== undefined) {
                localVarQueryParameter['checkItemStates'] = checkItemStates;
            }

            if (checklists !== undefined) {
                localVarQueryParameter['checklists'] = checklists;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/cards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {string} idMember idMember or username
         * @param {string} idBoardBackground idBoardBackground
         * @param {string} [fields] all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomBoardBackgroundByIds: async (idMember: string, idBoardBackground: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getCustomBoardBackgroundByIds', 'idMember', idMember)
            // verify required parameter 'idBoardBackground' is not null or undefined
            assertParamExists('getCustomBoardBackgroundByIds', 'idBoardBackground', idBoardBackground)
            const localVarPath = `/members/{idMember}/customBoardBackgrounds/{idBoardBackground}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idBoardBackground"}}`, encodeURIComponent(String(idBoardBackground !== undefined ? idBoardBackground : `-idBoardBackground-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/customBoardBackgrounds/{idBoardBackground}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersCustomBoardBackgroundsByIdMember()
         * @param {string} idMember idMember or username
         * @param {string} [filter] One of: all or none
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomBoardBackgroundsById: async (idMember: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getCustomBoardBackgroundsById', 'idMember', idMember)
            const localVarPath = `/members/{idMember}/customBoardBackgrounds`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/customBoardBackgrounds',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersCustomEmojiByIdMemberByIdCustomEmoji()
         * @param {string} idMember idMember or username
         * @param {string} idCustomEmoji idCustomEmoji
         * @param {string} [fields] all or a comma-separated list of: name or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomEmojiByIds: async (idMember: string, idCustomEmoji: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getCustomEmojiByIds', 'idMember', idMember)
            // verify required parameter 'idCustomEmoji' is not null or undefined
            assertParamExists('getCustomEmojiByIds', 'idCustomEmoji', idCustomEmoji)
            const localVarPath = `/members/{idMember}/customEmoji/{idCustomEmoji}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idCustomEmoji"}}`, encodeURIComponent(String(idCustomEmoji !== undefined ? idCustomEmoji : `-idCustomEmoji-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/customEmoji/{idCustomEmoji}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersCustomStickersByIdMemberByIdCustomSticker()
         * @param {string} idMember idMember or username
         * @param {string} idCustomSticker idCustomSticker
         * @param {string} [fields] all or a comma-separated list of: scaled or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomStickerByIds: async (idMember: string, idCustomSticker: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getCustomStickerByIds', 'idMember', idMember)
            // verify required parameter 'idCustomSticker' is not null or undefined
            assertParamExists('getCustomStickerByIds', 'idCustomSticker', idCustomSticker)
            const localVarPath = `/members/{idMember}/customStickers/{idCustomSticker}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idCustomSticker"}}`, encodeURIComponent(String(idCustomSticker !== undefined ? idCustomSticker : `-idCustomSticker-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/customStickers/{idCustomSticker}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This gets a list of all of the user’s uploaded stickers
         * @summary getMembersCustomStickersByIdMember()
         * @param {string} idMember idMember or username
         * @param {string} [filter] One of: all or none
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomStickersByIdMember: async (idMember: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getCustomStickersByIdMember', 'idMember', idMember)
            const localVarPath = `/members/{idMember}/customStickers`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/customStickers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersDeltasByIdMember()
         * @param {string} idMember idMember or username
         * @param {string} tags A valid tag for subscribing
         * @param {string} ixLastUpdate a number from -1 to Infinity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeltasByIdMember: async (idMember: string, tags: string, ixLastUpdate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getDeltasByIdMember', 'idMember', idMember)
            // verify required parameter 'tags' is not null or undefined
            assertParamExists('getDeltasByIdMember', 'tags', tags)
            // verify required parameter 'ixLastUpdate' is not null or undefined
            assertParamExists('getDeltasByIdMember', 'ixLastUpdate', ixLastUpdate)
            const localVarPath = `/members/{idMember}/deltas`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (ixLastUpdate !== undefined) {
                localVarQueryParameter['ixLastUpdate'] = ixLastUpdate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/deltas',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersBoardsInvitedByIdMember()
         * @param {string} idMember idMember or username
         * @param {string} [fields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitedBoards: async (idMember: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getInvitedBoards', 'idMember', idMember)
            const localVarPath = `/members/{idMember}/boardsInvited`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/boardsInvited',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * You can only read the notifications for the member associated with the supplied token
         * @summary getMembersNotificationsByIdMember()
         * @param {string} idMember idMember or username
         * @param {string} [entities]  true or false
         * @param {string} [display]  true or false
         * @param {string} [filter] all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
         * @param {string} [readFilter] One of: all, read or unread
         * @param {string} [fields] all or a comma-separated list of: data, date, idMemberCreator, type or unread
         * @param {string} [limit] a number from 1 to 1000
         * @param {string} [page] a number from 0 to 100
         * @param {string} [before] An id, or null
         * @param {string} [since] An id, or null
         * @param {string} [memberCreator]  true or false
         * @param {string} [memberCreatorFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsByIdMember: async (idMember: string, entities?: string, display?: string, filter?: string, readFilter?: string, fields?: string, limit?: string, page?: string, before?: string, since?: string, memberCreator?: string, memberCreatorFields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getNotificationsByIdMember', 'idMember', idMember)
            const localVarPath = `/members/{idMember}/notifications`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (entities !== undefined) {
                localVarQueryParameter['entities'] = entities;
            }

            if (display !== undefined) {
                localVarQueryParameter['display'] = display;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (readFilter !== undefined) {
                localVarQueryParameter['read_filter'] = readFilter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (memberCreator !== undefined) {
                localVarQueryParameter['memberCreator'] = memberCreator;
            }

            if (memberCreatorFields !== undefined) {
                localVarQueryParameter['memberCreator_fields'] = memberCreatorFields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/notifications',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersNotificationsByIdMemberByFilter()
         * @param {string} idMember idMember or username
         * @param {string} filter filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsByIdMemberByFilter: async (idMember: string, filter: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getNotificationsByIdMemberByFilter', 'idMember', idMember)
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('getNotificationsByIdMemberByFilter', 'filter', filter)
            const localVarPath = `/members/{idMember}/notifications/{filter}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"filter"}}`, encodeURIComponent(String(filter !== undefined ? filter : `-filter-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/notifications/{filter}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersOrganizationsByIdMemberByFilter()
         * @param {string} idMember idMember or username
         * @param {string} filter filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizations: async (idMember: string, filter: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getOrganizations', 'idMember', idMember)
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('getOrganizations', 'filter', filter)
            const localVarPath = `/members/{idMember}/organizations/{filter}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"filter"}}`, encodeURIComponent(String(filter !== undefined ? filter : `-filter-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/organizations/{filter}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersSavedSearchesByIdMemberByIdSavedSearch()
         * @param {string} idMember idMember or username
         * @param {string} idSavedSearch idSavedSearch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedSearchByIds: async (idMember: string, idSavedSearch: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getSavedSearchByIds', 'idMember', idMember)
            // verify required parameter 'idSavedSearch' is not null or undefined
            assertParamExists('getSavedSearchByIds', 'idSavedSearch', idSavedSearch)
            const localVarPath = `/members/{idMember}/savedSearches/{idSavedSearch}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idSavedSearch"}}`, encodeURIComponent(String(idSavedSearch !== undefined ? idSavedSearch : `-idSavedSearch-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/savedSearches/{idSavedSearch}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersSavedSearchesByIdMember()
         * @param {string} idMember idMember or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedSearchesByIdMember: async (idMember: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getSavedSearchesByIdMember', 'idMember', idMember)
            const localVarPath = `/members/{idMember}/savedSearches`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/savedSearches',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersTokensByIdMember()
         * @param {string} idMember idMember or username
         * @param {string} [filter] One of: all or none
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokensByIdMember: async (idMember: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getTokensByIdMember', 'idMember', idMember)
            const localVarPath = `/members/{idMember}/tokens`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/tokens',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersActionsByIdMember()
         * @param {string} idMember idMember or username
         * @param {string} [entities]  true or false
         * @param {string} [display]  true or false
         * @param {string} [filter] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [fields] all or a comma-separated list of: data, date, idMemberCreator or type
         * @param {string} [limit] a number from 0 to 1000
         * @param {string} [format] One of: count, list or minimal
         * @param {string} [since] A date, null or lastView
         * @param {string} [before] A date, or null
         * @param {string} [page] Page * limit must be less than 1000
         * @param {string} [idModels] Only return actions related to these model ids
         * @param {string} [member]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [memberCreator]  true or false
         * @param {string} [memberCreatorFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActionsByIdMember: async (idMember: string, entities?: string, display?: string, filter?: string, fields?: string, limit?: string, format?: string, since?: string, before?: string, page?: string, idModels?: string, member?: string, memberFields?: string, memberCreator?: string, memberCreatorFields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('listActionsByIdMember', 'idMember', idMember)
            const localVarPath = `/members/{idMember}/actions`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (entities !== undefined) {
                localVarQueryParameter['entities'] = entities;
            }

            if (display !== undefined) {
                localVarQueryParameter['display'] = display;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (idModels !== undefined) {
                localVarQueryParameter['idModels'] = idModels;
            }

            if (member !== undefined) {
                localVarQueryParameter['member'] = member;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (memberCreator !== undefined) {
                localVarQueryParameter['memberCreator'] = memberCreator;
            }

            if (memberCreatorFields !== undefined) {
                localVarQueryParameter['memberCreator_fields'] = memberCreatorFields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/actions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This gets the list of all of the user’s uploaded emoji
         * @summary getMembersCustomEmojiByIdMember()
         * @param {string} idMember idMember or username
         * @param {string} [filter] One of: all or none
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomEmojiByIdMember: async (idMember: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('listCustomEmojiByIdMember', 'idMember', idMember)
            const localVarPath = `/members/{idMember}/customEmoji`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/customEmoji',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersOrganizationsInvitedByIdMember()
         * @param {string} idMember idMember or username
         * @param {string} [fields] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInvitedOrganizationsById: async (idMember: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('listInvitedOrganizationsById', 'idMember', idMember)
            const localVarPath = `/members/{idMember}/organizationsInvited`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/organizationsInvited',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersOrganizationsByIdMember()
         * @param {string} idMember idMember or username
         * @param {string} [filter] One of: all, members, none or public
         * @param {string} [fields] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
         * @param {string} [paidAccount]  true or false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationsById: async (idMember: string, filter?: string, fields?: string, paidAccount?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('listOrganizationsById', 'idMember', idMember)
            const localVarPath = `/members/{idMember}/organizations`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (paidAccount !== undefined) {
                localVarQueryParameter['paid_account'] = paidAccount;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/organizations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMembersOrganizationsInvitedByIdMemberByField()
         * @param {string} idMember idMember or username
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationsInvitedByIdMemberByField: async (idMember: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('listOrganizationsInvitedByIdMemberByField', 'idMember', idMember)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('listOrganizationsInvitedByIdMemberByField', 'field', field)
            const localVarPath = `/members/{idMember}/organizationsInvited/{field}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/organizationsInvited/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteMembersBoardStarsByIdMemberByIdBoardStar()
         * @param {string} idMember idMember or username
         * @param {string} idBoardStar idBoardStar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBoardStarByIdMemberByIdBoardStar: async (idMember: string, idBoardStar: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('removeBoardStarByIdMemberByIdBoardStar', 'idMember', idMember)
            // verify required parameter 'idBoardStar' is not null or undefined
            assertParamExists('removeBoardStarByIdMemberByIdBoardStar', 'idBoardStar', idBoardStar)
            const localVarPath = `/members/{idMember}/boardStars/{idBoardStar}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idBoardStar"}}`, encodeURIComponent(String(idBoardStar !== undefined ? idBoardStar : `-idBoardStar-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/boardStars/{idBoardStar}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {string} idMember idMember or username
         * @param {string} idBoardBackground idBoardBackground
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomBoardBackgroundById: async (idMember: string, idBoardBackground: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('removeCustomBoardBackgroundById', 'idMember', idMember)
            // verify required parameter 'idBoardBackground' is not null or undefined
            assertParamExists('removeCustomBoardBackgroundById', 'idBoardBackground', idBoardBackground)
            const localVarPath = `/members/{idMember}/customBoardBackgrounds/{idBoardBackground}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idBoardBackground"}}`, encodeURIComponent(String(idBoardBackground !== undefined ? idBoardBackground : `-idBoardBackground-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/customBoardBackgrounds/{idBoardBackground}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteMembersCustomStickersByIdMemberByIdCustomSticker()
         * @param {string} idMember idMember or username
         * @param {string} idCustomSticker idCustomSticker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomStickerByIds: async (idMember: string, idCustomSticker: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('removeCustomStickerByIds', 'idMember', idMember)
            // verify required parameter 'idCustomSticker' is not null or undefined
            assertParamExists('removeCustomStickerByIds', 'idCustomSticker', idCustomSticker)
            const localVarPath = `/members/{idMember}/customStickers/{idCustomSticker}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idCustomSticker"}}`, encodeURIComponent(String(idCustomSticker !== undefined ? idCustomSticker : `-idCustomSticker-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/customStickers/{idCustomSticker}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteMembersSavedSearchesByIdMemberByIdSavedSearch()
         * @param {string} idMember idMember or username
         * @param {string} idSavedSearch idSavedSearch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSavedSearchByIds: async (idMember: string, idSavedSearch: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('removeSavedSearchByIds', 'idMember', idMember)
            // verify required parameter 'idSavedSearch' is not null or undefined
            assertParamExists('removeSavedSearchByIds', 'idSavedSearch', idSavedSearch)
            const localVarPath = `/members/{idMember}/savedSearches/{idSavedSearch}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idSavedSearch"}}`, encodeURIComponent(String(idSavedSearch !== undefined ? idSavedSearch : `-idSavedSearch-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/savedSearches/{idSavedSearch}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersAvatarSourceByIdMember()
         * @param {string} idMember idMember or username
         * @param {MembersAvatarSource} membersAvatarSource Attributes of \&quot;Members Avatar Source\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAvatarSource: async (idMember: string, membersAvatarSource: MembersAvatarSource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateAvatarSource', 'idMember', idMember)
            // verify required parameter 'membersAvatarSource' is not null or undefined
            assertParamExists('updateAvatarSource', 'membersAvatarSource', membersAvatarSource)
            const localVarPath = `/members/{idMember}/avatarSource`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersAvatarSource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/avatarSource',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersAvatarSource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersBioByIdMember()
         * @param {string} idMember idMember or username
         * @param {MembersBio} membersBio Attributes of \&quot;Members Bio\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBioById: async (idMember: string, membersBio: MembersBio, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateBioById', 'idMember', idMember)
            // verify required parameter 'membersBio' is not null or undefined
            assertParamExists('updateBioById', 'membersBio', membersBio)
            const localVarPath = `/members/{idMember}/bio`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersBio,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/bio',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersBio, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {string} idMember idMember or username
         * @param {string} idBoardBackground idBoardBackground
         * @param {MembersBoardBackgrounds} membersBoardBackgrounds Attributes of \&quot;Members Board Backgrounds\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBoardBackgroundsById: async (idMember: string, idBoardBackground: string, membersBoardBackgrounds: MembersBoardBackgrounds, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateBoardBackgroundsById', 'idMember', idMember)
            // verify required parameter 'idBoardBackground' is not null or undefined
            assertParamExists('updateBoardBackgroundsById', 'idBoardBackground', idBoardBackground)
            // verify required parameter 'membersBoardBackgrounds' is not null or undefined
            assertParamExists('updateBoardBackgroundsById', 'membersBoardBackgrounds', membersBoardBackgrounds)
            const localVarPath = `/members/{idMember}/boardBackgrounds/{idBoardBackground}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idBoardBackground"}}`, encodeURIComponent(String(idBoardBackground !== undefined ? idBoardBackground : `-idBoardBackground-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersBoardBackgrounds,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/boardBackgrounds/{idBoardBackground}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersBoardBackgrounds, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersBoardStarsByIdMemberByIdBoardStar()
         * @param {string} idMember idMember or username
         * @param {string} idBoardStar idBoardStar
         * @param {MembersBoardStars} membersBoardStars Attributes of \&quot;Members Board Stars\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBoardStar: async (idMember: string, idBoardStar: string, membersBoardStars: MembersBoardStars, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateBoardStar', 'idMember', idMember)
            // verify required parameter 'idBoardStar' is not null or undefined
            assertParamExists('updateBoardStar', 'idBoardStar', idBoardStar)
            // verify required parameter 'membersBoardStars' is not null or undefined
            assertParamExists('updateBoardStar', 'membersBoardStars', membersBoardStars)
            const localVarPath = `/members/{idMember}/boardStars/{idBoardStar}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idBoardStar"}}`, encodeURIComponent(String(idBoardStar !== undefined ? idBoardStar : `-idBoardStar-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersBoardStars,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/boardStars/{idBoardStar}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersBoardStars, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersBoardStarsPosByIdMemberByIdBoardStar()
         * @param {string} idMember idMember or username
         * @param {string} idBoardStar idBoardStar
         * @param {MembersBoardStarsPos} membersBoardStarsPos Attributes of \&quot;Members Board Stars Pos\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBoardStarPosByIdMemberByIdBoardStar: async (idMember: string, idBoardStar: string, membersBoardStarsPos: MembersBoardStarsPos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateBoardStarPosByIdMemberByIdBoardStar', 'idMember', idMember)
            // verify required parameter 'idBoardStar' is not null or undefined
            assertParamExists('updateBoardStarPosByIdMemberByIdBoardStar', 'idBoardStar', idBoardStar)
            // verify required parameter 'membersBoardStarsPos' is not null or undefined
            assertParamExists('updateBoardStarPosByIdMemberByIdBoardStar', 'membersBoardStarsPos', membersBoardStarsPos)
            const localVarPath = `/members/{idMember}/boardStars/{idBoardStar}/pos`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idBoardStar"}}`, encodeURIComponent(String(idBoardStar !== undefined ? idBoardStar : `-idBoardStar-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersBoardStarsPos,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/boardStars/{idBoardStar}/pos',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersBoardStarsPos, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar()
         * @param {string} idMember idMember or username
         * @param {string} idBoardStar idBoardStar
         * @param {MembersBoardStarsIdBoard} membersBoardStarsIdBoard Attributes of \&quot;Members Board Stars Id Board\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBoardStarsIdBoard: async (idMember: string, idBoardStar: string, membersBoardStarsIdBoard: MembersBoardStarsIdBoard, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateBoardStarsIdBoard', 'idMember', idMember)
            // verify required parameter 'idBoardStar' is not null or undefined
            assertParamExists('updateBoardStarsIdBoard', 'idBoardStar', idBoardStar)
            // verify required parameter 'membersBoardStarsIdBoard' is not null or undefined
            assertParamExists('updateBoardStarsIdBoard', 'membersBoardStarsIdBoard', membersBoardStarsIdBoard)
            const localVarPath = `/members/{idMember}/boardStars/{idBoardStar}/idBoard`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idBoardStar"}}`, encodeURIComponent(String(idBoardStar !== undefined ? idBoardStar : `-idBoardStar-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersBoardStarsIdBoard,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/boardStars/{idBoardStar}/idBoard',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersBoardStarsIdBoard, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersByIdMember()
         * @param {string} idMember idMember or username
         * @param {Members} members Attributes of \&quot;Members\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdMember: async (idMember: string, members: Members, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateByIdMember', 'idMember', idMember)
            // verify required parameter 'members' is not null or undefined
            assertParamExists('updateByIdMember', 'members', members)
            const localVarPath = `/members/{idMember}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: members,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(members, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {string} idMember idMember or username
         * @param {string} idBoardBackground idBoardBackground
         * @param {MembersCustomBoardBackgrounds} membersCustomBoardBackgrounds Attributes of \&quot;Members Custom Board Backgrounds\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomBoardBackgrounds: async (idMember: string, idBoardBackground: string, membersCustomBoardBackgrounds: MembersCustomBoardBackgrounds, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateCustomBoardBackgrounds', 'idMember', idMember)
            // verify required parameter 'idBoardBackground' is not null or undefined
            assertParamExists('updateCustomBoardBackgrounds', 'idBoardBackground', idBoardBackground)
            // verify required parameter 'membersCustomBoardBackgrounds' is not null or undefined
            assertParamExists('updateCustomBoardBackgrounds', 'membersCustomBoardBackgrounds', membersCustomBoardBackgrounds)
            const localVarPath = `/members/{idMember}/customBoardBackgrounds/{idBoardBackground}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idBoardBackground"}}`, encodeURIComponent(String(idBoardBackground !== undefined ? idBoardBackground : `-idBoardBackground-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersCustomBoardBackgrounds,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/customBoardBackgrounds/{idBoardBackground}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersCustomBoardBackgrounds, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersFullNameByIdMember()
         * @param {string} idMember idMember or username
         * @param {MembersFullName} membersFullName Attributes of \&quot;Members Full Name\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFullName: async (idMember: string, membersFullName: MembersFullName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateFullName', 'idMember', idMember)
            // verify required parameter 'membersFullName' is not null or undefined
            assertParamExists('updateFullName', 'membersFullName', membersFullName)
            const localVarPath = `/members/{idMember}/fullName`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersFullName,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/fullName',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersFullName, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersInitialsByIdMember()
         * @param {string} idMember idMember or username
         * @param {MembersInitials} membersInitials Attributes of \&quot;Members Initials\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInitialsByIdMember: async (idMember: string, membersInitials: MembersInitials, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateInitialsByIdMember', 'idMember', idMember)
            // verify required parameter 'membersInitials' is not null or undefined
            assertParamExists('updateInitialsByIdMember', 'membersInitials', membersInitials)
            const localVarPath = `/members/{idMember}/initials`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersInitials,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/initials',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersInitials, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersPrefsColorBlindByIdMember()
         * @param {string} idMember idMember or username
         * @param {PrefsColorBlind} prefsColorBlind Attributes of \&quot;Prefs Color Blind\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsColorBlindByIdMember: async (idMember: string, prefsColorBlind: PrefsColorBlind, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updatePrefsColorBlindByIdMember', 'idMember', idMember)
            // verify required parameter 'prefsColorBlind' is not null or undefined
            assertParamExists('updatePrefsColorBlindByIdMember', 'prefsColorBlind', prefsColorBlind)
            const localVarPath = `/members/{idMember}/prefs/colorBlind`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsColorBlind,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/prefs/colorBlind',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsColorBlind, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersPrefsLocaleByIdMember()
         * @param {string} idMember idMember or username
         * @param {PrefsLocale} prefsLocale Attributes of \&quot;Prefs Locale\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsLocaleByIdMember: async (idMember: string, prefsLocale: PrefsLocale, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updatePrefsLocaleByIdMember', 'idMember', idMember)
            // verify required parameter 'prefsLocale' is not null or undefined
            assertParamExists('updatePrefsLocaleByIdMember', 'prefsLocale', prefsLocale)
            const localVarPath = `/members/{idMember}/prefs/locale`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsLocale,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/prefs/locale',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsLocale, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersPrefsMinutesBetweenSummariesByIdMember()
         * @param {string} idMember idMember or username
         * @param {PrefsMinutesBetweenSummaries} prefsMinutesBetweenSummaries Attributes of \&quot;Prefs Minutes Between Summaries\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsMinutesBetweenSummariesById: async (idMember: string, prefsMinutesBetweenSummaries: PrefsMinutesBetweenSummaries, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updatePrefsMinutesBetweenSummariesById', 'idMember', idMember)
            // verify required parameter 'prefsMinutesBetweenSummaries' is not null or undefined
            assertParamExists('updatePrefsMinutesBetweenSummariesById', 'prefsMinutesBetweenSummaries', prefsMinutesBetweenSummaries)
            const localVarPath = `/members/{idMember}/prefs/minutesBetweenSummaries`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsMinutesBetweenSummaries,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/prefs/minutesBetweenSummaries',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsMinutesBetweenSummaries, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch()
         * @param {string} idMember idMember or username
         * @param {string} idSavedSearch idSavedSearch
         * @param {MembersSavedSearchesQuery} membersSavedSearchesQuery Attributes of \&quot;Members Saved Searches Query\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSavedSearchQueryByIdMemberByIdSavedSearch: async (idMember: string, idSavedSearch: string, membersSavedSearchesQuery: MembersSavedSearchesQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateSavedSearchQueryByIdMemberByIdSavedSearch', 'idMember', idMember)
            // verify required parameter 'idSavedSearch' is not null or undefined
            assertParamExists('updateSavedSearchQueryByIdMemberByIdSavedSearch', 'idSavedSearch', idSavedSearch)
            // verify required parameter 'membersSavedSearchesQuery' is not null or undefined
            assertParamExists('updateSavedSearchQueryByIdMemberByIdSavedSearch', 'membersSavedSearchesQuery', membersSavedSearchesQuery)
            const localVarPath = `/members/{idMember}/savedSearches/{idSavedSearch}/query`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idSavedSearch"}}`, encodeURIComponent(String(idSavedSearch !== undefined ? idSavedSearch : `-idSavedSearch-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersSavedSearchesQuery,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/savedSearches/{idSavedSearch}/query',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersSavedSearchesQuery, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersSavedSearchesByIdMemberByIdSavedSearch()
         * @param {string} idMember idMember or username
         * @param {string} idSavedSearch idSavedSearch
         * @param {MembersSavedSearches} membersSavedSearches Attributes of \&quot;Members Saved Searches\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSavedSearchesByIdMemberByIdSavedSearch: async (idMember: string, idSavedSearch: string, membersSavedSearches: MembersSavedSearches, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateSavedSearchesByIdMemberByIdSavedSearch', 'idMember', idMember)
            // verify required parameter 'idSavedSearch' is not null or undefined
            assertParamExists('updateSavedSearchesByIdMemberByIdSavedSearch', 'idSavedSearch', idSavedSearch)
            // verify required parameter 'membersSavedSearches' is not null or undefined
            assertParamExists('updateSavedSearchesByIdMemberByIdSavedSearch', 'membersSavedSearches', membersSavedSearches)
            const localVarPath = `/members/{idMember}/savedSearches/{idSavedSearch}`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idSavedSearch"}}`, encodeURIComponent(String(idSavedSearch !== undefined ? idSavedSearch : `-idSavedSearch-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersSavedSearches,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/savedSearches/{idSavedSearch}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersSavedSearches, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersSavedSearchesNameByIdMemberByIdSavedSearch()
         * @param {string} idMember idMember or username
         * @param {string} idSavedSearch idSavedSearch
         * @param {MembersSavedSearchesName} membersSavedSearchesName Attributes of \&quot;Members Saved Searches Name\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSavedSearchesNameByIdMemberByIdSavedSearch: async (idMember: string, idSavedSearch: string, membersSavedSearchesName: MembersSavedSearchesName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateSavedSearchesNameByIdMemberByIdSavedSearch', 'idMember', idMember)
            // verify required parameter 'idSavedSearch' is not null or undefined
            assertParamExists('updateSavedSearchesNameByIdMemberByIdSavedSearch', 'idSavedSearch', idSavedSearch)
            // verify required parameter 'membersSavedSearchesName' is not null or undefined
            assertParamExists('updateSavedSearchesNameByIdMemberByIdSavedSearch', 'membersSavedSearchesName', membersSavedSearchesName)
            const localVarPath = `/members/{idMember}/savedSearches/{idSavedSearch}/name`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idSavedSearch"}}`, encodeURIComponent(String(idSavedSearch !== undefined ? idSavedSearch : `-idSavedSearch-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersSavedSearchesName,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/savedSearches/{idSavedSearch}/name',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersSavedSearchesName, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersSavedSearchesPosByIdMemberByIdSavedSearch()
         * @param {string} idMember idMember or username
         * @param {string} idSavedSearch idSavedSearch
         * @param {MembersSavedSearchesPos} membersSavedSearchesPos Attributes of \&quot;Members Saved Searches Pos\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSavedSearchesPosByIdMemberByIdSavedSearch: async (idMember: string, idSavedSearch: string, membersSavedSearchesPos: MembersSavedSearchesPos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateSavedSearchesPosByIdMemberByIdSavedSearch', 'idMember', idMember)
            // verify required parameter 'idSavedSearch' is not null or undefined
            assertParamExists('updateSavedSearchesPosByIdMemberByIdSavedSearch', 'idSavedSearch', idSavedSearch)
            // verify required parameter 'membersSavedSearchesPos' is not null or undefined
            assertParamExists('updateSavedSearchesPosByIdMemberByIdSavedSearch', 'membersSavedSearchesPos', membersSavedSearchesPos)
            const localVarPath = `/members/{idMember}/savedSearches/{idSavedSearch}/pos`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)))
                .replace(`{${"idSavedSearch"}}`, encodeURIComponent(String(idSavedSearch !== undefined ? idSavedSearch : `-idSavedSearch-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersSavedSearchesPos,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/savedSearches/{idSavedSearch}/pos',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersSavedSearchesPos, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateMembersUsernameByIdMember()
         * @param {string} idMember idMember or username
         * @param {MembersUsername} membersUsername Attributes of \&quot;Members Username\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsernameById: async (idMember: string, membersUsername: MembersUsername, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateUsernameById', 'idMember', idMember)
            // verify required parameter 'membersUsername' is not null or undefined
            assertParamExists('updateUsernameById', 'membersUsername', membersUsername)
            const localVarPath = `/members/{idMember}/username`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersUsername,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/username',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersUsername, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addMembersAvatarByIdMember()
         * @param {string} idMember idMember or username
         * @param {MembersAvatar} membersAvatar Attributes of \&quot;Members Avatar\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAvatarById: async (idMember: string, membersAvatar: MembersAvatar, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('uploadAvatarById', 'idMember', idMember)
            // verify required parameter 'membersAvatar' is not null or undefined
            assertParamExists('uploadAvatarById', 'membersAvatar', membersAvatar)
            const localVarPath = `/members/{idMember}/avatar`
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersAvatar,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{idMember}/avatar',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersAvatar, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberApi - functional programming interface
 * @export
 */
export const MemberApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary addMembersBoardBackgroundsByIdMember()
         * @param {MemberApiAddBoardBackgroundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBoardBackgrounds(requestParameters: MemberApiAddBoardBackgroundsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersBoardBackgrounds: MembersBoardBackgrounds = {
                brightness: requestParameters.brightness,
                file: requestParameters.file,
                tile: requestParameters.tile
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBoardBackgrounds(requestParameters.idMember, membersBoardBackgrounds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addMembersBoardStarsByIdMember()
         * @param {MemberApiAddBoardStarsByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBoardStarsByIdMember(requestParameters: MemberApiAddBoardStarsByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersBoardStars: MembersBoardStars = {
                idBoard: requestParameters.idBoard,
                pos: requestParameters.pos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBoardStarsByIdMember(requestParameters.idMember, membersBoardStars, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addMembersCustomBoardBackgroundsByIdMember()
         * @param {MemberApiAddCustomBoardBackgroundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCustomBoardBackgrounds(requestParameters: MemberApiAddCustomBoardBackgroundsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersCustomBoardBackgrounds: MembersCustomBoardBackgrounds = {
                brightness: requestParameters.brightness,
                file: requestParameters.file,
                tile: requestParameters.tile
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCustomBoardBackgrounds(requestParameters.idMember, membersCustomBoardBackgrounds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addMembersCustomEmojiByIdMember()
         * @param {MemberApiAddCustomEmojiByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCustomEmojiByIdMember(requestParameters: MemberApiAddCustomEmojiByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersCustomEmoji: MembersCustomEmoji = {
                file: requestParameters.file,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCustomEmojiByIdMember(requestParameters.idMember, membersCustomEmoji, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addMembersCustomStickersByIdMember()
         * @param {MemberApiAddCustomStickersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCustomStickers(requestParameters: MemberApiAddCustomStickersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersCustomStickers: MembersCustomStickers = {
                file: requestParameters.file
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCustomStickers(requestParameters.idMember, membersCustomStickers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addMembersOneTimeMessagesDismissedByIdMember()
         * @param {MemberApiAddOneTimeMessagesDismissedByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOneTimeMessagesDismissedByIdMember(requestParameters: MemberApiAddOneTimeMessagesDismissedByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersOneTimeMessagesDismissed: MembersOneTimeMessagesDismissed = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOneTimeMessagesDismissedByIdMember(requestParameters.idMember, membersOneTimeMessagesDismissed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addMembersSavedSearchesByIdMember()
         * @param {MemberApiCreateSavedSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSavedSearch(requestParameters: MemberApiCreateSavedSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersSavedSearches: MembersSavedSearches = {
                name: requestParameters.name,
                pos: requestParameters.pos,
                query: requestParameters.query
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSavedSearch(requestParameters.idMember, membersSavedSearches, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {MemberApiDeleteBoardBackgroundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBoardBackground(requestParameters: MemberApiDeleteBoardBackgroundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBoardBackground(requestParameters.idMember, requestParameters.idBoardBackground, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {MemberApiGetBoardBackgroundByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardBackgroundByIds(requestParameters: MemberApiGetBoardBackgroundByIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardBackgroundByIds(requestParameters.idMember, requestParameters.idBoardBackground, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersBoardBackgroundsByIdMember()
         * @param {MemberApiGetBoardBackgroundsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardBackgroundsById(requestParameters: MemberApiGetBoardBackgroundsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardBackgroundsById(requestParameters.idMember, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersBoardStarsByIdMemberByIdBoardStar()
         * @param {MemberApiGetBoardStarByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardStarByIdMember(requestParameters: MemberApiGetBoardStarByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardStarByIdMember(requestParameters.idMember, requestParameters.idBoardStar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersBoardStarsByIdMember()
         * @param {MemberApiGetBoardStarsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardStarsById(requestParameters: MemberApiGetBoardStarsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardStarsById(requestParameters.idMember, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersBoardsByIdMemberByFilter()
         * @param {MemberApiGetBoardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoards(requestParameters: MemberApiGetBoardsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoards(requestParameters.idMember, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersBoardsByIdMember()
         * @param {MemberApiGetBoardsByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardsByIdMember(requestParameters: MemberApiGetBoardsByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardsByIdMember(requestParameters.idMember, requestParameters.filter, requestParameters.fields, requestParameters.actions, requestParameters.actionsEntities, requestParameters.actionsLimit, requestParameters.actionsFormat, requestParameters.actionsSince, requestParameters.actionFields, requestParameters.memberships, requestParameters.organization, requestParameters.organizationFields, requestParameters.lists, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersBoardsInvitedByIdMemberByField()
         * @param {MemberApiGetBoardsInvitedByIdMemberByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardsInvitedByIdMemberByField(requestParameters: MemberApiGetBoardsInvitedByIdMemberByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardsInvitedByIdMemberByField(requestParameters.idMember, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersByIdMemberByField()
         * @param {MemberApiGetByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByField(requestParameters: MemberApiGetByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByField(requestParameters.idMember, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * If you specify \'me\' as the username, this call will respond as if you had supplied the username associated with the supplied token
         * @summary getMembersByIdMember()
         * @param {MemberApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: MemberApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.idMember, requestParameters.actions, requestParameters.actionsEntities, requestParameters.actionsDisplay, requestParameters.actionsLimit, requestParameters.actionFields, requestParameters.actionSince, requestParameters.actionBefore, requestParameters.cards, requestParameters.cardFields, requestParameters.cardMembers, requestParameters.cardMemberFields, requestParameters.cardAttachments, requestParameters.cardAttachmentFields, requestParameters.cardStickers, requestParameters.boards, requestParameters.boardFields, requestParameters.boardActions, requestParameters.boardActionsEntities, requestParameters.boardActionsDisplay, requestParameters.boardActionsFormat, requestParameters.boardActionsSince, requestParameters.boardActionsLimit, requestParameters.boardActionFields, requestParameters.boardLists, requestParameters.boardMemberships, requestParameters.boardOrganization, requestParameters.boardOrganizationFields, requestParameters.boardsInvited, requestParameters.boardsInvitedFields, requestParameters.boardStars, requestParameters.savedSearches, requestParameters.organizations, requestParameters.organizationFields, requestParameters.organizationPaidAccount, requestParameters.organizationsInvited, requestParameters.organizationsInvitedFields, requestParameters.notifications, requestParameters.notificationsEntities, requestParameters.notificationsDisplay, requestParameters.notificationsLimit, requestParameters.notificationFields, requestParameters.notificationMemberCreator, requestParameters.notificationMemberCreatorFields, requestParameters.notificationBefore, requestParameters.notificationSince, requestParameters.tokens, requestParameters.paidAccount, requestParameters.boardBackgrounds, requestParameters.customBoardBackgrounds, requestParameters.customStickers, requestParameters.customEmoji, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersCardsByIdMemberByFilter()
         * @param {MemberApiGetCardsByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardsByFilter(requestParameters: MemberApiGetCardsByFilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardsByFilter(requestParameters.idMember, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersCardsByIdMember()
         * @param {MemberApiGetCardsByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardsByIdMember(requestParameters: MemberApiGetCardsByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardsByIdMember(requestParameters.idMember, requestParameters.actions, requestParameters.attachments, requestParameters.attachmentFields, requestParameters.stickers, requestParameters.members, requestParameters.memberFields, requestParameters.checkItemStates, requestParameters.checklists, requestParameters.limit, requestParameters.since, requestParameters.before, requestParameters.filter, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {MemberApiGetCustomBoardBackgroundByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomBoardBackgroundByIds(requestParameters: MemberApiGetCustomBoardBackgroundByIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomBoardBackgroundByIds(requestParameters.idMember, requestParameters.idBoardBackground, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersCustomBoardBackgroundsByIdMember()
         * @param {MemberApiGetCustomBoardBackgroundsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomBoardBackgroundsById(requestParameters: MemberApiGetCustomBoardBackgroundsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomBoardBackgroundsById(requestParameters.idMember, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersCustomEmojiByIdMemberByIdCustomEmoji()
         * @param {MemberApiGetCustomEmojiByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomEmojiByIds(requestParameters: MemberApiGetCustomEmojiByIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomEmojiByIds(requestParameters.idMember, requestParameters.idCustomEmoji, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersCustomStickersByIdMemberByIdCustomSticker()
         * @param {MemberApiGetCustomStickerByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomStickerByIds(requestParameters: MemberApiGetCustomStickerByIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomStickerByIds(requestParameters.idMember, requestParameters.idCustomSticker, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This gets a list of all of the user’s uploaded stickers
         * @summary getMembersCustomStickersByIdMember()
         * @param {MemberApiGetCustomStickersByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomStickersByIdMember(requestParameters: MemberApiGetCustomStickersByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomStickersByIdMember(requestParameters.idMember, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersDeltasByIdMember()
         * @param {MemberApiGetDeltasByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeltasByIdMember(requestParameters: MemberApiGetDeltasByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeltasByIdMember(requestParameters.idMember, requestParameters.tags, requestParameters.ixLastUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersBoardsInvitedByIdMember()
         * @param {MemberApiGetInvitedBoardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvitedBoards(requestParameters: MemberApiGetInvitedBoardsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvitedBoards(requestParameters.idMember, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * You can only read the notifications for the member associated with the supplied token
         * @summary getMembersNotificationsByIdMember()
         * @param {MemberApiGetNotificationsByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotificationsByIdMember(requestParameters: MemberApiGetNotificationsByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotificationsByIdMember(requestParameters.idMember, requestParameters.entities, requestParameters.display, requestParameters.filter, requestParameters.readFilter, requestParameters.fields, requestParameters.limit, requestParameters.page, requestParameters.before, requestParameters.since, requestParameters.memberCreator, requestParameters.memberCreatorFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersNotificationsByIdMemberByFilter()
         * @param {MemberApiGetNotificationsByIdMemberByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotificationsByIdMemberByFilter(requestParameters: MemberApiGetNotificationsByIdMemberByFilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotificationsByIdMemberByFilter(requestParameters.idMember, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersOrganizationsByIdMemberByFilter()
         * @param {MemberApiGetOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizations(requestParameters: MemberApiGetOrganizationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizations(requestParameters.idMember, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersSavedSearchesByIdMemberByIdSavedSearch()
         * @param {MemberApiGetSavedSearchByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSavedSearchByIds(requestParameters: MemberApiGetSavedSearchByIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSavedSearchByIds(requestParameters.idMember, requestParameters.idSavedSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersSavedSearchesByIdMember()
         * @param {MemberApiGetSavedSearchesByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSavedSearchesByIdMember(requestParameters: MemberApiGetSavedSearchesByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSavedSearchesByIdMember(requestParameters.idMember, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersTokensByIdMember()
         * @param {MemberApiGetTokensByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTokensByIdMember(requestParameters: MemberApiGetTokensByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTokensByIdMember(requestParameters.idMember, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersActionsByIdMember()
         * @param {MemberApiListActionsByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listActionsByIdMember(requestParameters: MemberApiListActionsByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listActionsByIdMember(requestParameters.idMember, requestParameters.entities, requestParameters.display, requestParameters.filter, requestParameters.fields, requestParameters.limit, requestParameters.format, requestParameters.since, requestParameters.before, requestParameters.page, requestParameters.idModels, requestParameters.member, requestParameters.memberFields, requestParameters.memberCreator, requestParameters.memberCreatorFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This gets the list of all of the user’s uploaded emoji
         * @summary getMembersCustomEmojiByIdMember()
         * @param {MemberApiListCustomEmojiByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomEmojiByIdMember(requestParameters: MemberApiListCustomEmojiByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCustomEmojiByIdMember(requestParameters.idMember, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersOrganizationsInvitedByIdMember()
         * @param {MemberApiListInvitedOrganizationsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInvitedOrganizationsById(requestParameters: MemberApiListInvitedOrganizationsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInvitedOrganizationsById(requestParameters.idMember, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersOrganizationsByIdMember()
         * @param {MemberApiListOrganizationsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrganizationsById(requestParameters: MemberApiListOrganizationsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationsById(requestParameters.idMember, requestParameters.filter, requestParameters.fields, requestParameters.paidAccount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getMembersOrganizationsInvitedByIdMemberByField()
         * @param {MemberApiListOrganizationsInvitedByIdMemberByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrganizationsInvitedByIdMemberByField(requestParameters: MemberApiListOrganizationsInvitedByIdMemberByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationsInvitedByIdMemberByField(requestParameters.idMember, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteMembersBoardStarsByIdMemberByIdBoardStar()
         * @param {MemberApiRemoveBoardStarByIdMemberByIdBoardStarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeBoardStarByIdMemberByIdBoardStar(requestParameters: MemberApiRemoveBoardStarByIdMemberByIdBoardStarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeBoardStarByIdMemberByIdBoardStar(requestParameters.idMember, requestParameters.idBoardStar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {MemberApiRemoveCustomBoardBackgroundByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCustomBoardBackgroundById(requestParameters: MemberApiRemoveCustomBoardBackgroundByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeCustomBoardBackgroundById(requestParameters.idMember, requestParameters.idBoardBackground, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteMembersCustomStickersByIdMemberByIdCustomSticker()
         * @param {MemberApiRemoveCustomStickerByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCustomStickerByIds(requestParameters: MemberApiRemoveCustomStickerByIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeCustomStickerByIds(requestParameters.idMember, requestParameters.idCustomSticker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteMembersSavedSearchesByIdMemberByIdSavedSearch()
         * @param {MemberApiRemoveSavedSearchByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSavedSearchByIds(requestParameters: MemberApiRemoveSavedSearchByIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSavedSearchByIds(requestParameters.idMember, requestParameters.idSavedSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersAvatarSourceByIdMember()
         * @param {MemberApiUpdateAvatarSourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAvatarSource(requestParameters: MemberApiUpdateAvatarSourceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersAvatarSource: MembersAvatarSource = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAvatarSource(requestParameters.idMember, membersAvatarSource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersBioByIdMember()
         * @param {MemberApiUpdateBioByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBioById(requestParameters: MemberApiUpdateBioByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersBio: MembersBio = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBioById(requestParameters.idMember, membersBio, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {MemberApiUpdateBoardBackgroundsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBoardBackgroundsById(requestParameters: MemberApiUpdateBoardBackgroundsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersBoardBackgrounds: MembersBoardBackgrounds = {
                brightness: requestParameters.brightness,
                file: requestParameters.file,
                tile: requestParameters.tile
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBoardBackgroundsById(requestParameters.idMember, requestParameters.idBoardBackground, membersBoardBackgrounds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersBoardStarsByIdMemberByIdBoardStar()
         * @param {MemberApiUpdateBoardStarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBoardStar(requestParameters: MemberApiUpdateBoardStarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersBoardStars: MembersBoardStars = {
                idBoard: requestParameters.idBoard,
                pos: requestParameters.pos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBoardStar(requestParameters.idMember, requestParameters.idBoardStar, membersBoardStars, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersBoardStarsPosByIdMemberByIdBoardStar()
         * @param {MemberApiUpdateBoardStarPosByIdMemberByIdBoardStarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBoardStarPosByIdMemberByIdBoardStar(requestParameters: MemberApiUpdateBoardStarPosByIdMemberByIdBoardStarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersBoardStarsPos: MembersBoardStarsPos = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBoardStarPosByIdMemberByIdBoardStar(requestParameters.idMember, requestParameters.idBoardStar, membersBoardStarsPos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar()
         * @param {MemberApiUpdateBoardStarsIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBoardStarsIdBoard(requestParameters: MemberApiUpdateBoardStarsIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersBoardStarsIdBoard: MembersBoardStarsIdBoard = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBoardStarsIdBoard(requestParameters.idMember, requestParameters.idBoardStar, membersBoardStarsIdBoard, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersByIdMember()
         * @param {MemberApiUpdateByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByIdMember(requestParameters: MemberApiUpdateByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const members: Members = {
                avatarSource: requestParameters.avatarSource,
                bio: requestParameters.bio,
                fullName: requestParameters.fullName,
                initials: requestParameters.initials,
                prefs/colorBlind: requestParameters.prefs/colorBlind,
                prefs/locale: requestParameters.prefs/locale,
                prefs/minutesBetweenSummaries: requestParameters.prefs/minutesBetweenSummaries,
                username: requestParameters.username
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByIdMember(requestParameters.idMember, members, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {MemberApiUpdateCustomBoardBackgroundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomBoardBackgrounds(requestParameters: MemberApiUpdateCustomBoardBackgroundsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersCustomBoardBackgrounds: MembersCustomBoardBackgrounds = {
                brightness: requestParameters.brightness,
                file: requestParameters.file,
                tile: requestParameters.tile
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomBoardBackgrounds(requestParameters.idMember, requestParameters.idBoardBackground, membersCustomBoardBackgrounds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersFullNameByIdMember()
         * @param {MemberApiUpdateFullNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFullName(requestParameters: MemberApiUpdateFullNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersFullName: MembersFullName = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFullName(requestParameters.idMember, membersFullName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersInitialsByIdMember()
         * @param {MemberApiUpdateInitialsByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInitialsByIdMember(requestParameters: MemberApiUpdateInitialsByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersInitials: MembersInitials = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInitialsByIdMember(requestParameters.idMember, membersInitials, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersPrefsColorBlindByIdMember()
         * @param {MemberApiUpdatePrefsColorBlindByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsColorBlindByIdMember(requestParameters: MemberApiUpdatePrefsColorBlindByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsColorBlind: PrefsColorBlind = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsColorBlindByIdMember(requestParameters.idMember, prefsColorBlind, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersPrefsLocaleByIdMember()
         * @param {MemberApiUpdatePrefsLocaleByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsLocaleByIdMember(requestParameters: MemberApiUpdatePrefsLocaleByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsLocale: PrefsLocale = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsLocaleByIdMember(requestParameters.idMember, prefsLocale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersPrefsMinutesBetweenSummariesByIdMember()
         * @param {MemberApiUpdatePrefsMinutesBetweenSummariesByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsMinutesBetweenSummariesById(requestParameters: MemberApiUpdatePrefsMinutesBetweenSummariesByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsMinutesBetweenSummaries: PrefsMinutesBetweenSummaries = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsMinutesBetweenSummariesById(requestParameters.idMember, prefsMinutesBetweenSummaries, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch()
         * @param {MemberApiUpdateSavedSearchQueryByIdMemberByIdSavedSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSavedSearchQueryByIdMemberByIdSavedSearch(requestParameters: MemberApiUpdateSavedSearchQueryByIdMemberByIdSavedSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersSavedSearchesQuery: MembersSavedSearchesQuery = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSavedSearchQueryByIdMemberByIdSavedSearch(requestParameters.idMember, requestParameters.idSavedSearch, membersSavedSearchesQuery, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersSavedSearchesByIdMemberByIdSavedSearch()
         * @param {MemberApiUpdateSavedSearchesByIdMemberByIdSavedSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSavedSearchesByIdMemberByIdSavedSearch(requestParameters: MemberApiUpdateSavedSearchesByIdMemberByIdSavedSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersSavedSearches: MembersSavedSearches = {
                name: requestParameters.name,
                pos: requestParameters.pos,
                query: requestParameters.query
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSavedSearchesByIdMemberByIdSavedSearch(requestParameters.idMember, requestParameters.idSavedSearch, membersSavedSearches, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersSavedSearchesNameByIdMemberByIdSavedSearch()
         * @param {MemberApiUpdateSavedSearchesNameByIdMemberByIdSavedSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSavedSearchesNameByIdMemberByIdSavedSearch(requestParameters: MemberApiUpdateSavedSearchesNameByIdMemberByIdSavedSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersSavedSearchesName: MembersSavedSearchesName = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSavedSearchesNameByIdMemberByIdSavedSearch(requestParameters.idMember, requestParameters.idSavedSearch, membersSavedSearchesName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersSavedSearchesPosByIdMemberByIdSavedSearch()
         * @param {MemberApiUpdateSavedSearchesPosByIdMemberByIdSavedSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSavedSearchesPosByIdMemberByIdSavedSearch(requestParameters: MemberApiUpdateSavedSearchesPosByIdMemberByIdSavedSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersSavedSearchesPos: MembersSavedSearchesPos = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSavedSearchesPosByIdMemberByIdSavedSearch(requestParameters.idMember, requestParameters.idSavedSearch, membersSavedSearchesPos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateMembersUsernameByIdMember()
         * @param {MemberApiUpdateUsernameByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsernameById(requestParameters: MemberApiUpdateUsernameByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersUsername: MembersUsername = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsernameById(requestParameters.idMember, membersUsername, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addMembersAvatarByIdMember()
         * @param {MemberApiUploadAvatarByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadAvatarById(requestParameters: MemberApiUploadAvatarByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const membersAvatar: MembersAvatar = {
                file: requestParameters.file
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadAvatarById(requestParameters.idMember, membersAvatar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MemberApi - factory interface
 * @export
 */
export const MemberApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberApiFp(configuration)
    return {
        /**
         * 
         * @summary addMembersBoardBackgroundsByIdMember()
         * @param {MemberApiAddBoardBackgroundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBoardBackgrounds(requestParameters: MemberApiAddBoardBackgroundsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addBoardBackgrounds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addMembersBoardStarsByIdMember()
         * @param {MemberApiAddBoardStarsByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBoardStarsByIdMember(requestParameters: MemberApiAddBoardStarsByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addBoardStarsByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addMembersCustomBoardBackgroundsByIdMember()
         * @param {MemberApiAddCustomBoardBackgroundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomBoardBackgrounds(requestParameters: MemberApiAddCustomBoardBackgroundsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addCustomBoardBackgrounds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addMembersCustomEmojiByIdMember()
         * @param {MemberApiAddCustomEmojiByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomEmojiByIdMember(requestParameters: MemberApiAddCustomEmojiByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addCustomEmojiByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addMembersCustomStickersByIdMember()
         * @param {MemberApiAddCustomStickersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomStickers(requestParameters: MemberApiAddCustomStickersRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addCustomStickers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addMembersOneTimeMessagesDismissedByIdMember()
         * @param {MemberApiAddOneTimeMessagesDismissedByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOneTimeMessagesDismissedByIdMember(requestParameters: MemberApiAddOneTimeMessagesDismissedByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addOneTimeMessagesDismissedByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addMembersSavedSearchesByIdMember()
         * @param {MemberApiCreateSavedSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSavedSearch(requestParameters: MemberApiCreateSavedSearchRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createSavedSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {MemberApiDeleteBoardBackgroundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBoardBackground(requestParameters: MemberApiDeleteBoardBackgroundRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteBoardBackground(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {MemberApiGetBoardBackgroundByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardBackgroundByIds(requestParameters: MemberApiGetBoardBackgroundByIdsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardBackgroundByIds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersBoardBackgroundsByIdMember()
         * @param {MemberApiGetBoardBackgroundsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardBackgroundsById(requestParameters: MemberApiGetBoardBackgroundsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardBackgroundsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersBoardStarsByIdMemberByIdBoardStar()
         * @param {MemberApiGetBoardStarByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardStarByIdMember(requestParameters: MemberApiGetBoardStarByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardStarByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersBoardStarsByIdMember()
         * @param {MemberApiGetBoardStarsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardStarsById(requestParameters: MemberApiGetBoardStarsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardStarsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersBoardsByIdMemberByFilter()
         * @param {MemberApiGetBoardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoards(requestParameters: MemberApiGetBoardsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoards(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersBoardsByIdMember()
         * @param {MemberApiGetBoardsByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardsByIdMember(requestParameters: MemberApiGetBoardsByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardsByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersBoardsInvitedByIdMemberByField()
         * @param {MemberApiGetBoardsInvitedByIdMemberByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardsInvitedByIdMemberByField(requestParameters: MemberApiGetBoardsInvitedByIdMemberByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardsInvitedByIdMemberByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersByIdMemberByField()
         * @param {MemberApiGetByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByField(requestParameters: MemberApiGetByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * If you specify \'me\' as the username, this call will respond as if you had supplied the username associated with the supplied token
         * @summary getMembersByIdMember()
         * @param {MemberApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: MemberApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersCardsByIdMemberByFilter()
         * @param {MemberApiGetCardsByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByFilter(requestParameters: MemberApiGetCardsByFilterRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCardsByFilter(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersCardsByIdMember()
         * @param {MemberApiGetCardsByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByIdMember(requestParameters: MemberApiGetCardsByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCardsByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {MemberApiGetCustomBoardBackgroundByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomBoardBackgroundByIds(requestParameters: MemberApiGetCustomBoardBackgroundByIdsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCustomBoardBackgroundByIds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersCustomBoardBackgroundsByIdMember()
         * @param {MemberApiGetCustomBoardBackgroundsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomBoardBackgroundsById(requestParameters: MemberApiGetCustomBoardBackgroundsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCustomBoardBackgroundsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersCustomEmojiByIdMemberByIdCustomEmoji()
         * @param {MemberApiGetCustomEmojiByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomEmojiByIds(requestParameters: MemberApiGetCustomEmojiByIdsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCustomEmojiByIds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersCustomStickersByIdMemberByIdCustomSticker()
         * @param {MemberApiGetCustomStickerByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomStickerByIds(requestParameters: MemberApiGetCustomStickerByIdsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCustomStickerByIds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This gets a list of all of the user’s uploaded stickers
         * @summary getMembersCustomStickersByIdMember()
         * @param {MemberApiGetCustomStickersByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomStickersByIdMember(requestParameters: MemberApiGetCustomStickersByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCustomStickersByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersDeltasByIdMember()
         * @param {MemberApiGetDeltasByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeltasByIdMember(requestParameters: MemberApiGetDeltasByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDeltasByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersBoardsInvitedByIdMember()
         * @param {MemberApiGetInvitedBoardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitedBoards(requestParameters: MemberApiGetInvitedBoardsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getInvitedBoards(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * You can only read the notifications for the member associated with the supplied token
         * @summary getMembersNotificationsByIdMember()
         * @param {MemberApiGetNotificationsByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsByIdMember(requestParameters: MemberApiGetNotificationsByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getNotificationsByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersNotificationsByIdMemberByFilter()
         * @param {MemberApiGetNotificationsByIdMemberByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsByIdMemberByFilter(requestParameters: MemberApiGetNotificationsByIdMemberByFilterRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getNotificationsByIdMemberByFilter(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersOrganizationsByIdMemberByFilter()
         * @param {MemberApiGetOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizations(requestParameters: MemberApiGetOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getOrganizations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersSavedSearchesByIdMemberByIdSavedSearch()
         * @param {MemberApiGetSavedSearchByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedSearchByIds(requestParameters: MemberApiGetSavedSearchByIdsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getSavedSearchByIds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersSavedSearchesByIdMember()
         * @param {MemberApiGetSavedSearchesByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedSearchesByIdMember(requestParameters: MemberApiGetSavedSearchesByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getSavedSearchesByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersTokensByIdMember()
         * @param {MemberApiGetTokensByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokensByIdMember(requestParameters: MemberApiGetTokensByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getTokensByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersActionsByIdMember()
         * @param {MemberApiListActionsByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActionsByIdMember(requestParameters: MemberApiListActionsByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listActionsByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This gets the list of all of the user’s uploaded emoji
         * @summary getMembersCustomEmojiByIdMember()
         * @param {MemberApiListCustomEmojiByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomEmojiByIdMember(requestParameters: MemberApiListCustomEmojiByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listCustomEmojiByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersOrganizationsInvitedByIdMember()
         * @param {MemberApiListInvitedOrganizationsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInvitedOrganizationsById(requestParameters: MemberApiListInvitedOrganizationsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listInvitedOrganizationsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersOrganizationsByIdMember()
         * @param {MemberApiListOrganizationsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationsById(requestParameters: MemberApiListOrganizationsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listOrganizationsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMembersOrganizationsInvitedByIdMemberByField()
         * @param {MemberApiListOrganizationsInvitedByIdMemberByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationsInvitedByIdMemberByField(requestParameters: MemberApiListOrganizationsInvitedByIdMemberByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listOrganizationsInvitedByIdMemberByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteMembersBoardStarsByIdMemberByIdBoardStar()
         * @param {MemberApiRemoveBoardStarByIdMemberByIdBoardStarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBoardStarByIdMemberByIdBoardStar(requestParameters: MemberApiRemoveBoardStarByIdMemberByIdBoardStarRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeBoardStarByIdMemberByIdBoardStar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {MemberApiRemoveCustomBoardBackgroundByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomBoardBackgroundById(requestParameters: MemberApiRemoveCustomBoardBackgroundByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeCustomBoardBackgroundById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteMembersCustomStickersByIdMemberByIdCustomSticker()
         * @param {MemberApiRemoveCustomStickerByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomStickerByIds(requestParameters: MemberApiRemoveCustomStickerByIdsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeCustomStickerByIds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteMembersSavedSearchesByIdMemberByIdSavedSearch()
         * @param {MemberApiRemoveSavedSearchByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSavedSearchByIds(requestParameters: MemberApiRemoveSavedSearchByIdsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeSavedSearchByIds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersAvatarSourceByIdMember()
         * @param {MemberApiUpdateAvatarSourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAvatarSource(requestParameters: MemberApiUpdateAvatarSourceRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateAvatarSource(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersBioByIdMember()
         * @param {MemberApiUpdateBioByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBioById(requestParameters: MemberApiUpdateBioByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateBioById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {MemberApiUpdateBoardBackgroundsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBoardBackgroundsById(requestParameters: MemberApiUpdateBoardBackgroundsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateBoardBackgroundsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersBoardStarsByIdMemberByIdBoardStar()
         * @param {MemberApiUpdateBoardStarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBoardStar(requestParameters: MemberApiUpdateBoardStarRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateBoardStar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersBoardStarsPosByIdMemberByIdBoardStar()
         * @param {MemberApiUpdateBoardStarPosByIdMemberByIdBoardStarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBoardStarPosByIdMemberByIdBoardStar(requestParameters: MemberApiUpdateBoardStarPosByIdMemberByIdBoardStarRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateBoardStarPosByIdMemberByIdBoardStar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar()
         * @param {MemberApiUpdateBoardStarsIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBoardStarsIdBoard(requestParameters: MemberApiUpdateBoardStarsIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateBoardStarsIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersByIdMember()
         * @param {MemberApiUpdateByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdMember(requestParameters: MemberApiUpdateByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
         * @param {MemberApiUpdateCustomBoardBackgroundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomBoardBackgrounds(requestParameters: MemberApiUpdateCustomBoardBackgroundsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateCustomBoardBackgrounds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersFullNameByIdMember()
         * @param {MemberApiUpdateFullNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFullName(requestParameters: MemberApiUpdateFullNameRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateFullName(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersInitialsByIdMember()
         * @param {MemberApiUpdateInitialsByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInitialsByIdMember(requestParameters: MemberApiUpdateInitialsByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateInitialsByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersPrefsColorBlindByIdMember()
         * @param {MemberApiUpdatePrefsColorBlindByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsColorBlindByIdMember(requestParameters: MemberApiUpdatePrefsColorBlindByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsColorBlindByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersPrefsLocaleByIdMember()
         * @param {MemberApiUpdatePrefsLocaleByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsLocaleByIdMember(requestParameters: MemberApiUpdatePrefsLocaleByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsLocaleByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersPrefsMinutesBetweenSummariesByIdMember()
         * @param {MemberApiUpdatePrefsMinutesBetweenSummariesByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsMinutesBetweenSummariesById(requestParameters: MemberApiUpdatePrefsMinutesBetweenSummariesByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsMinutesBetweenSummariesById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch()
         * @param {MemberApiUpdateSavedSearchQueryByIdMemberByIdSavedSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSavedSearchQueryByIdMemberByIdSavedSearch(requestParameters: MemberApiUpdateSavedSearchQueryByIdMemberByIdSavedSearchRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSavedSearchQueryByIdMemberByIdSavedSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersSavedSearchesByIdMemberByIdSavedSearch()
         * @param {MemberApiUpdateSavedSearchesByIdMemberByIdSavedSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSavedSearchesByIdMemberByIdSavedSearch(requestParameters: MemberApiUpdateSavedSearchesByIdMemberByIdSavedSearchRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSavedSearchesByIdMemberByIdSavedSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersSavedSearchesNameByIdMemberByIdSavedSearch()
         * @param {MemberApiUpdateSavedSearchesNameByIdMemberByIdSavedSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSavedSearchesNameByIdMemberByIdSavedSearch(requestParameters: MemberApiUpdateSavedSearchesNameByIdMemberByIdSavedSearchRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSavedSearchesNameByIdMemberByIdSavedSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersSavedSearchesPosByIdMemberByIdSavedSearch()
         * @param {MemberApiUpdateSavedSearchesPosByIdMemberByIdSavedSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSavedSearchesPosByIdMemberByIdSavedSearch(requestParameters: MemberApiUpdateSavedSearchesPosByIdMemberByIdSavedSearchRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSavedSearchesPosByIdMemberByIdSavedSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateMembersUsernameByIdMember()
         * @param {MemberApiUpdateUsernameByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsernameById(requestParameters: MemberApiUpdateUsernameByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateUsernameById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addMembersAvatarByIdMember()
         * @param {MemberApiUploadAvatarByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAvatarById(requestParameters: MemberApiUploadAvatarByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uploadAvatarById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addBoardBackgrounds operation in MemberApi.
 * @export
 * @interface MemberApiAddBoardBackgroundsRequest
 */
export type MemberApiAddBoardBackgroundsRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiAddBoardBackgrounds
    */
    readonly idMember: string
    
} & MembersBoardBackgrounds

/**
 * Request parameters for addBoardStarsByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiAddBoardStarsByIdMemberRequest
 */
export type MemberApiAddBoardStarsByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiAddBoardStarsByIdMember
    */
    readonly idMember: string
    
} & MembersBoardStars

/**
 * Request parameters for addCustomBoardBackgrounds operation in MemberApi.
 * @export
 * @interface MemberApiAddCustomBoardBackgroundsRequest
 */
export type MemberApiAddCustomBoardBackgroundsRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiAddCustomBoardBackgrounds
    */
    readonly idMember: string
    
} & MembersCustomBoardBackgrounds

/**
 * Request parameters for addCustomEmojiByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiAddCustomEmojiByIdMemberRequest
 */
export type MemberApiAddCustomEmojiByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiAddCustomEmojiByIdMember
    */
    readonly idMember: string
    
} & MembersCustomEmoji

/**
 * Request parameters for addCustomStickers operation in MemberApi.
 * @export
 * @interface MemberApiAddCustomStickersRequest
 */
export type MemberApiAddCustomStickersRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiAddCustomStickers
    */
    readonly idMember: string
    
} & MembersCustomStickers

/**
 * Request parameters for addOneTimeMessagesDismissedByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiAddOneTimeMessagesDismissedByIdMemberRequest
 */
export type MemberApiAddOneTimeMessagesDismissedByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiAddOneTimeMessagesDismissedByIdMember
    */
    readonly idMember: string
    
} & MembersOneTimeMessagesDismissed

/**
 * Request parameters for createSavedSearch operation in MemberApi.
 * @export
 * @interface MemberApiCreateSavedSearchRequest
 */
export type MemberApiCreateSavedSearchRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiCreateSavedSearch
    */
    readonly idMember: string
    
} & MembersSavedSearches

/**
 * Request parameters for deleteBoardBackground operation in MemberApi.
 * @export
 * @interface MemberApiDeleteBoardBackgroundRequest
 */
export type MemberApiDeleteBoardBackgroundRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiDeleteBoardBackground
    */
    readonly idMember: string
    
    /**
    * idBoardBackground
    * @type {string}
    * @memberof MemberApiDeleteBoardBackground
    */
    readonly idBoardBackground: string
    
}

/**
 * Request parameters for getBoardBackgroundByIds operation in MemberApi.
 * @export
 * @interface MemberApiGetBoardBackgroundByIdsRequest
 */
export type MemberApiGetBoardBackgroundByIdsRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetBoardBackgroundByIds
    */
    readonly idMember: string
    
    /**
    * idBoardBackground
    * @type {string}
    * @memberof MemberApiGetBoardBackgroundByIds
    */
    readonly idBoardBackground: string
    
    /**
    * all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile
    * @type {string}
    * @memberof MemberApiGetBoardBackgroundByIds
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getBoardBackgroundsById operation in MemberApi.
 * @export
 * @interface MemberApiGetBoardBackgroundsByIdRequest
 */
export type MemberApiGetBoardBackgroundsByIdRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetBoardBackgroundsById
    */
    readonly idMember: string
    
    /**
    * One of: all, custom, default, none or premium
    * @type {string}
    * @memberof MemberApiGetBoardBackgroundsById
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getBoardStarByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiGetBoardStarByIdMemberRequest
 */
export type MemberApiGetBoardStarByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetBoardStarByIdMember
    */
    readonly idMember: string
    
    /**
    * idBoardStar
    * @type {string}
    * @memberof MemberApiGetBoardStarByIdMember
    */
    readonly idBoardStar: string
    
}

/**
 * Request parameters for getBoardStarsById operation in MemberApi.
 * @export
 * @interface MemberApiGetBoardStarsByIdRequest
 */
export type MemberApiGetBoardStarsByIdRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetBoardStarsById
    */
    readonly idMember: string
    
}

/**
 * Request parameters for getBoards operation in MemberApi.
 * @export
 * @interface MemberApiGetBoardsRequest
 */
export type MemberApiGetBoardsRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetBoards
    */
    readonly idMember: string
    
    /**
    * filter
    * @type {string}
    * @memberof MemberApiGetBoards
    */
    readonly filter: string
    
}

/**
 * Request parameters for getBoardsByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiGetBoardsByIdMemberRequest
 */
export type MemberApiGetBoardsByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetBoardsByIdMember
    */
    readonly idMember: string
    
    /**
    * all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
    * @type {string}
    * @memberof MemberApiGetBoardsByIdMember
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof MemberApiGetBoardsByIdMember
    */
    readonly fields?: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof MemberApiGetBoardsByIdMember
    */
    readonly actions?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetBoardsByIdMember
    */
    readonly actionsEntities?: string
    
    /**
    * a number from 0 to 1000
    * @type {string}
    * @memberof MemberApiGetBoardsByIdMember
    */
    readonly actionsLimit?: string
    
    /**
    * One of: count, list or minimal
    * @type {string}
    * @memberof MemberApiGetBoardsByIdMember
    */
    readonly actionsFormat?: string
    
    /**
    * A date, null or lastView
    * @type {string}
    * @memberof MemberApiGetBoardsByIdMember
    */
    readonly actionsSince?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator or type
    * @type {string}
    * @memberof MemberApiGetBoardsByIdMember
    */
    readonly actionFields?: string
    
    /**
    * all or a comma-separated list of: active, admin, deactivated, me or normal
    * @type {string}
    * @memberof MemberApiGetBoardsByIdMember
    */
    readonly memberships?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetBoardsByIdMember
    */
    readonly organization?: string
    
    /**
    * all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    * @type {string}
    * @memberof MemberApiGetBoardsByIdMember
    */
    readonly organizationFields?: string
    
    /**
    * One of: all, closed, none or open
    * @type {string}
    * @memberof MemberApiGetBoardsByIdMember
    */
    readonly lists?: string
    
}

/**
 * Request parameters for getBoardsInvitedByIdMemberByField operation in MemberApi.
 * @export
 * @interface MemberApiGetBoardsInvitedByIdMemberByFieldRequest
 */
export type MemberApiGetBoardsInvitedByIdMemberByFieldRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetBoardsInvitedByIdMemberByField
    */
    readonly idMember: string
    
    /**
    * field
    * @type {string}
    * @memberof MemberApiGetBoardsInvitedByIdMemberByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getByField operation in MemberApi.
 * @export
 * @interface MemberApiGetByFieldRequest
 */
export type MemberApiGetByFieldRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetByField
    */
    readonly idMember: string
    
    /**
    * field
    * @type {string}
    * @memberof MemberApiGetByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getById operation in MemberApi.
 * @export
 * @interface MemberApiGetByIdRequest
 */
export type MemberApiGetByIdRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly idMember: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly actions?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly actionsEntities?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly actionsDisplay?: string
    
    /**
    * a number from 0 to 1000
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly actionsLimit?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator or type
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly actionFields?: string
    
    /**
    * A date, null or lastView
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly actionSince?: string
    
    /**
    * A date, or null
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly actionBefore?: string
    
    /**
    * One of: all, closed, none, open or visible
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly cards?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly cardFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly cardMembers?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly cardMemberFields?: string
    
    /**
    * A boolean value or &quot;cover&quot; for only card cover attachments
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly cardAttachments?: string
    
    /**
    * all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly cardAttachmentFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly cardStickers?: string
    
    /**
    * all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boards?: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boardFields?: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boardActions?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boardActionsEntities?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boardActionsDisplay?: string
    
    /**
    * One of: count, list or minimal
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boardActionsFormat?: string
    
    /**
    * A date, null or lastView
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boardActionsSince?: string
    
    /**
    * a number from 0 to 1000
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boardActionsLimit?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator or type
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boardActionFields?: string
    
    /**
    * One of: all, closed, none or open
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boardLists?: string
    
    /**
    * all or a comma-separated list of: active, admin, deactivated, me or normal
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boardMemberships?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boardOrganization?: string
    
    /**
    * all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boardOrganizationFields?: string
    
    /**
    * all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boardsInvited?: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boardsInvitedFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boardStars?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly savedSearches?: string
    
    /**
    * One of: all, members, none or public
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly organizations?: string
    
    /**
    * all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly organizationFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly organizationPaidAccount?: string
    
    /**
    * One of: all, members, none or public
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly organizationsInvited?: string
    
    /**
    * all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly organizationsInvitedFields?: string
    
    /**
    * all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly notifications?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly notificationsEntities?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly notificationsDisplay?: string
    
    /**
    * a number from 1 to 1000
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly notificationsLimit?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator, type or unread
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly notificationFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly notificationMemberCreator?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly notificationMemberCreatorFields?: string
    
    /**
    * An id, or null
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly notificationBefore?: string
    
    /**
    * An id, or null
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly notificationSince?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly tokens?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly paidAccount?: string
    
    /**
    * One of: all, custom, default, none or premium
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly boardBackgrounds?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly customBoardBackgrounds?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly customStickers?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly customEmoji?: string
    
    /**
    * all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
    * @type {string}
    * @memberof MemberApiGetById
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getCardsByFilter operation in MemberApi.
 * @export
 * @interface MemberApiGetCardsByFilterRequest
 */
export type MemberApiGetCardsByFilterRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetCardsByFilter
    */
    readonly idMember: string
    
    /**
    * filter
    * @type {string}
    * @memberof MemberApiGetCardsByFilter
    */
    readonly filter: string
    
}

/**
 * Request parameters for getCardsByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiGetCardsByIdMemberRequest
 */
export type MemberApiGetCardsByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetCardsByIdMember
    */
    readonly idMember: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof MemberApiGetCardsByIdMember
    */
    readonly actions?: string
    
    /**
    * A boolean value or &quot;cover&quot; for only card cover attachments
    * @type {string}
    * @memberof MemberApiGetCardsByIdMember
    */
    readonly attachments?: string
    
    /**
    * all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    * @type {string}
    * @memberof MemberApiGetCardsByIdMember
    */
    readonly attachmentFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetCardsByIdMember
    */
    readonly stickers?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetCardsByIdMember
    */
    readonly members?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof MemberApiGetCardsByIdMember
    */
    readonly memberFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetCardsByIdMember
    */
    readonly checkItemStates?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof MemberApiGetCardsByIdMember
    */
    readonly checklists?: string
    
    /**
    * a number from 1 to 1000
    * @type {string}
    * @memberof MemberApiGetCardsByIdMember
    */
    readonly limit?: string
    
    /**
    * A date, or null
    * @type {string}
    * @memberof MemberApiGetCardsByIdMember
    */
    readonly since?: string
    
    /**
    * A date, or null
    * @type {string}
    * @memberof MemberApiGetCardsByIdMember
    */
    readonly before?: string
    
    /**
    * One of: all, closed, none, open or visible
    * @type {string}
    * @memberof MemberApiGetCardsByIdMember
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof MemberApiGetCardsByIdMember
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getCustomBoardBackgroundByIds operation in MemberApi.
 * @export
 * @interface MemberApiGetCustomBoardBackgroundByIdsRequest
 */
export type MemberApiGetCustomBoardBackgroundByIdsRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetCustomBoardBackgroundByIds
    */
    readonly idMember: string
    
    /**
    * idBoardBackground
    * @type {string}
    * @memberof MemberApiGetCustomBoardBackgroundByIds
    */
    readonly idBoardBackground: string
    
    /**
    * all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile
    * @type {string}
    * @memberof MemberApiGetCustomBoardBackgroundByIds
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getCustomBoardBackgroundsById operation in MemberApi.
 * @export
 * @interface MemberApiGetCustomBoardBackgroundsByIdRequest
 */
export type MemberApiGetCustomBoardBackgroundsByIdRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetCustomBoardBackgroundsById
    */
    readonly idMember: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof MemberApiGetCustomBoardBackgroundsById
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getCustomEmojiByIds operation in MemberApi.
 * @export
 * @interface MemberApiGetCustomEmojiByIdsRequest
 */
export type MemberApiGetCustomEmojiByIdsRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetCustomEmojiByIds
    */
    readonly idMember: string
    
    /**
    * idCustomEmoji
    * @type {string}
    * @memberof MemberApiGetCustomEmojiByIds
    */
    readonly idCustomEmoji: string
    
    /**
    * all or a comma-separated list of: name or url
    * @type {string}
    * @memberof MemberApiGetCustomEmojiByIds
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getCustomStickerByIds operation in MemberApi.
 * @export
 * @interface MemberApiGetCustomStickerByIdsRequest
 */
export type MemberApiGetCustomStickerByIdsRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetCustomStickerByIds
    */
    readonly idMember: string
    
    /**
    * idCustomSticker
    * @type {string}
    * @memberof MemberApiGetCustomStickerByIds
    */
    readonly idCustomSticker: string
    
    /**
    * all or a comma-separated list of: scaled or url
    * @type {string}
    * @memberof MemberApiGetCustomStickerByIds
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getCustomStickersByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiGetCustomStickersByIdMemberRequest
 */
export type MemberApiGetCustomStickersByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetCustomStickersByIdMember
    */
    readonly idMember: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof MemberApiGetCustomStickersByIdMember
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getDeltasByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiGetDeltasByIdMemberRequest
 */
export type MemberApiGetDeltasByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetDeltasByIdMember
    */
    readonly idMember: string
    
    /**
    * A valid tag for subscribing
    * @type {string}
    * @memberof MemberApiGetDeltasByIdMember
    */
    readonly tags: string
    
    /**
    * a number from -1 to Infinity
    * @type {string}
    * @memberof MemberApiGetDeltasByIdMember
    */
    readonly ixLastUpdate: string
    
}

/**
 * Request parameters for getInvitedBoards operation in MemberApi.
 * @export
 * @interface MemberApiGetInvitedBoardsRequest
 */
export type MemberApiGetInvitedBoardsRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetInvitedBoards
    */
    readonly idMember: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof MemberApiGetInvitedBoards
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getNotificationsByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiGetNotificationsByIdMemberRequest
 */
export type MemberApiGetNotificationsByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetNotificationsByIdMember
    */
    readonly idMember: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetNotificationsByIdMember
    */
    readonly entities?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetNotificationsByIdMember
    */
    readonly display?: string
    
    /**
    * all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
    * @type {string}
    * @memberof MemberApiGetNotificationsByIdMember
    */
    readonly filter?: string
    
    /**
    * One of: all, read or unread
    * @type {string}
    * @memberof MemberApiGetNotificationsByIdMember
    */
    readonly readFilter?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator, type or unread
    * @type {string}
    * @memberof MemberApiGetNotificationsByIdMember
    */
    readonly fields?: string
    
    /**
    * a number from 1 to 1000
    * @type {string}
    * @memberof MemberApiGetNotificationsByIdMember
    */
    readonly limit?: string
    
    /**
    * a number from 0 to 100
    * @type {string}
    * @memberof MemberApiGetNotificationsByIdMember
    */
    readonly page?: string
    
    /**
    * An id, or null
    * @type {string}
    * @memberof MemberApiGetNotificationsByIdMember
    */
    readonly before?: string
    
    /**
    * An id, or null
    * @type {string}
    * @memberof MemberApiGetNotificationsByIdMember
    */
    readonly since?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiGetNotificationsByIdMember
    */
    readonly memberCreator?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof MemberApiGetNotificationsByIdMember
    */
    readonly memberCreatorFields?: string
    
}

/**
 * Request parameters for getNotificationsByIdMemberByFilter operation in MemberApi.
 * @export
 * @interface MemberApiGetNotificationsByIdMemberByFilterRequest
 */
export type MemberApiGetNotificationsByIdMemberByFilterRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetNotificationsByIdMemberByFilter
    */
    readonly idMember: string
    
    /**
    * filter
    * @type {string}
    * @memberof MemberApiGetNotificationsByIdMemberByFilter
    */
    readonly filter: string
    
}

/**
 * Request parameters for getOrganizations operation in MemberApi.
 * @export
 * @interface MemberApiGetOrganizationsRequest
 */
export type MemberApiGetOrganizationsRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetOrganizations
    */
    readonly idMember: string
    
    /**
    * filter
    * @type {string}
    * @memberof MemberApiGetOrganizations
    */
    readonly filter: string
    
}

/**
 * Request parameters for getSavedSearchByIds operation in MemberApi.
 * @export
 * @interface MemberApiGetSavedSearchByIdsRequest
 */
export type MemberApiGetSavedSearchByIdsRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetSavedSearchByIds
    */
    readonly idMember: string
    
    /**
    * idSavedSearch
    * @type {string}
    * @memberof MemberApiGetSavedSearchByIds
    */
    readonly idSavedSearch: string
    
}

/**
 * Request parameters for getSavedSearchesByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiGetSavedSearchesByIdMemberRequest
 */
export type MemberApiGetSavedSearchesByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetSavedSearchesByIdMember
    */
    readonly idMember: string
    
}

/**
 * Request parameters for getTokensByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiGetTokensByIdMemberRequest
 */
export type MemberApiGetTokensByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiGetTokensByIdMember
    */
    readonly idMember: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof MemberApiGetTokensByIdMember
    */
    readonly filter?: string
    
}

/**
 * Request parameters for listActionsByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiListActionsByIdMemberRequest
 */
export type MemberApiListActionsByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiListActionsByIdMember
    */
    readonly idMember: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiListActionsByIdMember
    */
    readonly entities?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiListActionsByIdMember
    */
    readonly display?: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof MemberApiListActionsByIdMember
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator or type
    * @type {string}
    * @memberof MemberApiListActionsByIdMember
    */
    readonly fields?: string
    
    /**
    * a number from 0 to 1000
    * @type {string}
    * @memberof MemberApiListActionsByIdMember
    */
    readonly limit?: string
    
    /**
    * One of: count, list or minimal
    * @type {string}
    * @memberof MemberApiListActionsByIdMember
    */
    readonly format?: string
    
    /**
    * A date, null or lastView
    * @type {string}
    * @memberof MemberApiListActionsByIdMember
    */
    readonly since?: string
    
    /**
    * A date, or null
    * @type {string}
    * @memberof MemberApiListActionsByIdMember
    */
    readonly before?: string
    
    /**
    * Page * limit must be less than 1000
    * @type {string}
    * @memberof MemberApiListActionsByIdMember
    */
    readonly page?: string
    
    /**
    * Only return actions related to these model ids
    * @type {string}
    * @memberof MemberApiListActionsByIdMember
    */
    readonly idModels?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiListActionsByIdMember
    */
    readonly member?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof MemberApiListActionsByIdMember
    */
    readonly memberFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiListActionsByIdMember
    */
    readonly memberCreator?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof MemberApiListActionsByIdMember
    */
    readonly memberCreatorFields?: string
    
}

/**
 * Request parameters for listCustomEmojiByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiListCustomEmojiByIdMemberRequest
 */
export type MemberApiListCustomEmojiByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiListCustomEmojiByIdMember
    */
    readonly idMember: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof MemberApiListCustomEmojiByIdMember
    */
    readonly filter?: string
    
}

/**
 * Request parameters for listInvitedOrganizationsById operation in MemberApi.
 * @export
 * @interface MemberApiListInvitedOrganizationsByIdRequest
 */
export type MemberApiListInvitedOrganizationsByIdRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiListInvitedOrganizationsById
    */
    readonly idMember: string
    
    /**
    * all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    * @type {string}
    * @memberof MemberApiListInvitedOrganizationsById
    */
    readonly fields?: string
    
}

/**
 * Request parameters for listOrganizationsById operation in MemberApi.
 * @export
 * @interface MemberApiListOrganizationsByIdRequest
 */
export type MemberApiListOrganizationsByIdRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiListOrganizationsById
    */
    readonly idMember: string
    
    /**
    * One of: all, members, none or public
    * @type {string}
    * @memberof MemberApiListOrganizationsById
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    * @type {string}
    * @memberof MemberApiListOrganizationsById
    */
    readonly fields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof MemberApiListOrganizationsById
    */
    readonly paidAccount?: string
    
}

/**
 * Request parameters for listOrganizationsInvitedByIdMemberByField operation in MemberApi.
 * @export
 * @interface MemberApiListOrganizationsInvitedByIdMemberByFieldRequest
 */
export type MemberApiListOrganizationsInvitedByIdMemberByFieldRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiListOrganizationsInvitedByIdMemberByField
    */
    readonly idMember: string
    
    /**
    * field
    * @type {string}
    * @memberof MemberApiListOrganizationsInvitedByIdMemberByField
    */
    readonly field: string
    
}

/**
 * Request parameters for removeBoardStarByIdMemberByIdBoardStar operation in MemberApi.
 * @export
 * @interface MemberApiRemoveBoardStarByIdMemberByIdBoardStarRequest
 */
export type MemberApiRemoveBoardStarByIdMemberByIdBoardStarRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiRemoveBoardStarByIdMemberByIdBoardStar
    */
    readonly idMember: string
    
    /**
    * idBoardStar
    * @type {string}
    * @memberof MemberApiRemoveBoardStarByIdMemberByIdBoardStar
    */
    readonly idBoardStar: string
    
}

/**
 * Request parameters for removeCustomBoardBackgroundById operation in MemberApi.
 * @export
 * @interface MemberApiRemoveCustomBoardBackgroundByIdRequest
 */
export type MemberApiRemoveCustomBoardBackgroundByIdRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiRemoveCustomBoardBackgroundById
    */
    readonly idMember: string
    
    /**
    * idBoardBackground
    * @type {string}
    * @memberof MemberApiRemoveCustomBoardBackgroundById
    */
    readonly idBoardBackground: string
    
}

/**
 * Request parameters for removeCustomStickerByIds operation in MemberApi.
 * @export
 * @interface MemberApiRemoveCustomStickerByIdsRequest
 */
export type MemberApiRemoveCustomStickerByIdsRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiRemoveCustomStickerByIds
    */
    readonly idMember: string
    
    /**
    * idCustomSticker
    * @type {string}
    * @memberof MemberApiRemoveCustomStickerByIds
    */
    readonly idCustomSticker: string
    
}

/**
 * Request parameters for removeSavedSearchByIds operation in MemberApi.
 * @export
 * @interface MemberApiRemoveSavedSearchByIdsRequest
 */
export type MemberApiRemoveSavedSearchByIdsRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiRemoveSavedSearchByIds
    */
    readonly idMember: string
    
    /**
    * idSavedSearch
    * @type {string}
    * @memberof MemberApiRemoveSavedSearchByIds
    */
    readonly idSavedSearch: string
    
}

/**
 * Request parameters for updateAvatarSource operation in MemberApi.
 * @export
 * @interface MemberApiUpdateAvatarSourceRequest
 */
export type MemberApiUpdateAvatarSourceRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdateAvatarSource
    */
    readonly idMember: string
    
} & MembersAvatarSource

/**
 * Request parameters for updateBioById operation in MemberApi.
 * @export
 * @interface MemberApiUpdateBioByIdRequest
 */
export type MemberApiUpdateBioByIdRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdateBioById
    */
    readonly idMember: string
    
} & MembersBio

/**
 * Request parameters for updateBoardBackgroundsById operation in MemberApi.
 * @export
 * @interface MemberApiUpdateBoardBackgroundsByIdRequest
 */
export type MemberApiUpdateBoardBackgroundsByIdRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdateBoardBackgroundsById
    */
    readonly idMember: string
    
    /**
    * idBoardBackground
    * @type {string}
    * @memberof MemberApiUpdateBoardBackgroundsById
    */
    readonly idBoardBackground: string
    
} & MembersBoardBackgrounds

/**
 * Request parameters for updateBoardStar operation in MemberApi.
 * @export
 * @interface MemberApiUpdateBoardStarRequest
 */
export type MemberApiUpdateBoardStarRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdateBoardStar
    */
    readonly idMember: string
    
    /**
    * idBoardStar
    * @type {string}
    * @memberof MemberApiUpdateBoardStar
    */
    readonly idBoardStar: string
    
} & MembersBoardStars

/**
 * Request parameters for updateBoardStarPosByIdMemberByIdBoardStar operation in MemberApi.
 * @export
 * @interface MemberApiUpdateBoardStarPosByIdMemberByIdBoardStarRequest
 */
export type MemberApiUpdateBoardStarPosByIdMemberByIdBoardStarRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdateBoardStarPosByIdMemberByIdBoardStar
    */
    readonly idMember: string
    
    /**
    * idBoardStar
    * @type {string}
    * @memberof MemberApiUpdateBoardStarPosByIdMemberByIdBoardStar
    */
    readonly idBoardStar: string
    
} & MembersBoardStarsPos

/**
 * Request parameters for updateBoardStarsIdBoard operation in MemberApi.
 * @export
 * @interface MemberApiUpdateBoardStarsIdBoardRequest
 */
export type MemberApiUpdateBoardStarsIdBoardRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdateBoardStarsIdBoard
    */
    readonly idMember: string
    
    /**
    * idBoardStar
    * @type {string}
    * @memberof MemberApiUpdateBoardStarsIdBoard
    */
    readonly idBoardStar: string
    
} & MembersBoardStarsIdBoard

/**
 * Request parameters for updateByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiUpdateByIdMemberRequest
 */
export type MemberApiUpdateByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdateByIdMember
    */
    readonly idMember: string
    
} & Members

/**
 * Request parameters for updateCustomBoardBackgrounds operation in MemberApi.
 * @export
 * @interface MemberApiUpdateCustomBoardBackgroundsRequest
 */
export type MemberApiUpdateCustomBoardBackgroundsRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdateCustomBoardBackgrounds
    */
    readonly idMember: string
    
    /**
    * idBoardBackground
    * @type {string}
    * @memberof MemberApiUpdateCustomBoardBackgrounds
    */
    readonly idBoardBackground: string
    
} & MembersCustomBoardBackgrounds

/**
 * Request parameters for updateFullName operation in MemberApi.
 * @export
 * @interface MemberApiUpdateFullNameRequest
 */
export type MemberApiUpdateFullNameRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdateFullName
    */
    readonly idMember: string
    
} & MembersFullName

/**
 * Request parameters for updateInitialsByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiUpdateInitialsByIdMemberRequest
 */
export type MemberApiUpdateInitialsByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdateInitialsByIdMember
    */
    readonly idMember: string
    
} & MembersInitials

/**
 * Request parameters for updatePrefsColorBlindByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiUpdatePrefsColorBlindByIdMemberRequest
 */
export type MemberApiUpdatePrefsColorBlindByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdatePrefsColorBlindByIdMember
    */
    readonly idMember: string
    
} & PrefsColorBlind

/**
 * Request parameters for updatePrefsLocaleByIdMember operation in MemberApi.
 * @export
 * @interface MemberApiUpdatePrefsLocaleByIdMemberRequest
 */
export type MemberApiUpdatePrefsLocaleByIdMemberRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdatePrefsLocaleByIdMember
    */
    readonly idMember: string
    
} & PrefsLocale

/**
 * Request parameters for updatePrefsMinutesBetweenSummariesById operation in MemberApi.
 * @export
 * @interface MemberApiUpdatePrefsMinutesBetweenSummariesByIdRequest
 */
export type MemberApiUpdatePrefsMinutesBetweenSummariesByIdRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdatePrefsMinutesBetweenSummariesById
    */
    readonly idMember: string
    
} & PrefsMinutesBetweenSummaries

/**
 * Request parameters for updateSavedSearchQueryByIdMemberByIdSavedSearch operation in MemberApi.
 * @export
 * @interface MemberApiUpdateSavedSearchQueryByIdMemberByIdSavedSearchRequest
 */
export type MemberApiUpdateSavedSearchQueryByIdMemberByIdSavedSearchRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdateSavedSearchQueryByIdMemberByIdSavedSearch
    */
    readonly idMember: string
    
    /**
    * idSavedSearch
    * @type {string}
    * @memberof MemberApiUpdateSavedSearchQueryByIdMemberByIdSavedSearch
    */
    readonly idSavedSearch: string
    
} & MembersSavedSearchesQuery

/**
 * Request parameters for updateSavedSearchesByIdMemberByIdSavedSearch operation in MemberApi.
 * @export
 * @interface MemberApiUpdateSavedSearchesByIdMemberByIdSavedSearchRequest
 */
export type MemberApiUpdateSavedSearchesByIdMemberByIdSavedSearchRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdateSavedSearchesByIdMemberByIdSavedSearch
    */
    readonly idMember: string
    
    /**
    * idSavedSearch
    * @type {string}
    * @memberof MemberApiUpdateSavedSearchesByIdMemberByIdSavedSearch
    */
    readonly idSavedSearch: string
    
} & MembersSavedSearches

/**
 * Request parameters for updateSavedSearchesNameByIdMemberByIdSavedSearch operation in MemberApi.
 * @export
 * @interface MemberApiUpdateSavedSearchesNameByIdMemberByIdSavedSearchRequest
 */
export type MemberApiUpdateSavedSearchesNameByIdMemberByIdSavedSearchRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdateSavedSearchesNameByIdMemberByIdSavedSearch
    */
    readonly idMember: string
    
    /**
    * idSavedSearch
    * @type {string}
    * @memberof MemberApiUpdateSavedSearchesNameByIdMemberByIdSavedSearch
    */
    readonly idSavedSearch: string
    
} & MembersSavedSearchesName

/**
 * Request parameters for updateSavedSearchesPosByIdMemberByIdSavedSearch operation in MemberApi.
 * @export
 * @interface MemberApiUpdateSavedSearchesPosByIdMemberByIdSavedSearchRequest
 */
export type MemberApiUpdateSavedSearchesPosByIdMemberByIdSavedSearchRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdateSavedSearchesPosByIdMemberByIdSavedSearch
    */
    readonly idMember: string
    
    /**
    * idSavedSearch
    * @type {string}
    * @memberof MemberApiUpdateSavedSearchesPosByIdMemberByIdSavedSearch
    */
    readonly idSavedSearch: string
    
} & MembersSavedSearchesPos

/**
 * Request parameters for updateUsernameById operation in MemberApi.
 * @export
 * @interface MemberApiUpdateUsernameByIdRequest
 */
export type MemberApiUpdateUsernameByIdRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUpdateUsernameById
    */
    readonly idMember: string
    
} & MembersUsername

/**
 * Request parameters for uploadAvatarById operation in MemberApi.
 * @export
 * @interface MemberApiUploadAvatarByIdRequest
 */
export type MemberApiUploadAvatarByIdRequest = {
    
    /**
    * idMember or username
    * @type {string}
    * @memberof MemberApiUploadAvatarById
    */
    readonly idMember: string
    
} & MembersAvatar

/**
 * MemberApiGenerated - object-oriented interface
 * @export
 * @class MemberApiGenerated
 * @extends {BaseAPI}
 */
export class MemberApiGenerated extends BaseAPI {
    /**
     * 
     * @summary addMembersBoardBackgroundsByIdMember()
     * @param {MemberApiAddBoardBackgroundsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public addBoardBackgrounds(requestParameters: MemberApiAddBoardBackgroundsRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).addBoardBackgrounds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addMembersBoardStarsByIdMember()
     * @param {MemberApiAddBoardStarsByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public addBoardStarsByIdMember(requestParameters: MemberApiAddBoardStarsByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).addBoardStarsByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addMembersCustomBoardBackgroundsByIdMember()
     * @param {MemberApiAddCustomBoardBackgroundsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public addCustomBoardBackgrounds(requestParameters: MemberApiAddCustomBoardBackgroundsRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).addCustomBoardBackgrounds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addMembersCustomEmojiByIdMember()
     * @param {MemberApiAddCustomEmojiByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public addCustomEmojiByIdMember(requestParameters: MemberApiAddCustomEmojiByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).addCustomEmojiByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addMembersCustomStickersByIdMember()
     * @param {MemberApiAddCustomStickersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public addCustomStickers(requestParameters: MemberApiAddCustomStickersRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).addCustomStickers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addMembersOneTimeMessagesDismissedByIdMember()
     * @param {MemberApiAddOneTimeMessagesDismissedByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public addOneTimeMessagesDismissedByIdMember(requestParameters: MemberApiAddOneTimeMessagesDismissedByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).addOneTimeMessagesDismissedByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addMembersSavedSearchesByIdMember()
     * @param {MemberApiCreateSavedSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public createSavedSearch(requestParameters: MemberApiCreateSavedSearchRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).createSavedSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     * @param {MemberApiDeleteBoardBackgroundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public deleteBoardBackground(requestParameters: MemberApiDeleteBoardBackgroundRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).deleteBoardBackground(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     * @param {MemberApiGetBoardBackgroundByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getBoardBackgroundByIds(requestParameters: MemberApiGetBoardBackgroundByIdsRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getBoardBackgroundByIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersBoardBackgroundsByIdMember()
     * @param {MemberApiGetBoardBackgroundsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getBoardBackgroundsById(requestParameters: MemberApiGetBoardBackgroundsByIdRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getBoardBackgroundsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersBoardStarsByIdMemberByIdBoardStar()
     * @param {MemberApiGetBoardStarByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getBoardStarByIdMember(requestParameters: MemberApiGetBoardStarByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getBoardStarByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersBoardStarsByIdMember()
     * @param {MemberApiGetBoardStarsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getBoardStarsById(requestParameters: MemberApiGetBoardStarsByIdRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getBoardStarsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersBoardsByIdMemberByFilter()
     * @param {MemberApiGetBoardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getBoards(requestParameters: MemberApiGetBoardsRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getBoards(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersBoardsByIdMember()
     * @param {MemberApiGetBoardsByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getBoardsByIdMember(requestParameters: MemberApiGetBoardsByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getBoardsByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersBoardsInvitedByIdMemberByField()
     * @param {MemberApiGetBoardsInvitedByIdMemberByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getBoardsInvitedByIdMemberByField(requestParameters: MemberApiGetBoardsInvitedByIdMemberByFieldRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getBoardsInvitedByIdMemberByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersByIdMemberByField()
     * @param {MemberApiGetByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getByField(requestParameters: MemberApiGetByFieldRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * If you specify \'me\' as the username, this call will respond as if you had supplied the username associated with the supplied token
     * @summary getMembersByIdMember()
     * @param {MemberApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getById(requestParameters: MemberApiGetByIdRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersCardsByIdMemberByFilter()
     * @param {MemberApiGetCardsByFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getCardsByFilter(requestParameters: MemberApiGetCardsByFilterRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getCardsByFilter(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersCardsByIdMember()
     * @param {MemberApiGetCardsByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getCardsByIdMember(requestParameters: MemberApiGetCardsByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getCardsByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     * @param {MemberApiGetCustomBoardBackgroundByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getCustomBoardBackgroundByIds(requestParameters: MemberApiGetCustomBoardBackgroundByIdsRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getCustomBoardBackgroundByIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersCustomBoardBackgroundsByIdMember()
     * @param {MemberApiGetCustomBoardBackgroundsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getCustomBoardBackgroundsById(requestParameters: MemberApiGetCustomBoardBackgroundsByIdRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getCustomBoardBackgroundsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersCustomEmojiByIdMemberByIdCustomEmoji()
     * @param {MemberApiGetCustomEmojiByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getCustomEmojiByIds(requestParameters: MemberApiGetCustomEmojiByIdsRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getCustomEmojiByIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersCustomStickersByIdMemberByIdCustomSticker()
     * @param {MemberApiGetCustomStickerByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getCustomStickerByIds(requestParameters: MemberApiGetCustomStickerByIdsRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getCustomStickerByIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This gets a list of all of the user’s uploaded stickers
     * @summary getMembersCustomStickersByIdMember()
     * @param {MemberApiGetCustomStickersByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getCustomStickersByIdMember(requestParameters: MemberApiGetCustomStickersByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getCustomStickersByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersDeltasByIdMember()
     * @param {MemberApiGetDeltasByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getDeltasByIdMember(requestParameters: MemberApiGetDeltasByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getDeltasByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersBoardsInvitedByIdMember()
     * @param {MemberApiGetInvitedBoardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getInvitedBoards(requestParameters: MemberApiGetInvitedBoardsRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getInvitedBoards(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * You can only read the notifications for the member associated with the supplied token
     * @summary getMembersNotificationsByIdMember()
     * @param {MemberApiGetNotificationsByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getNotificationsByIdMember(requestParameters: MemberApiGetNotificationsByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getNotificationsByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersNotificationsByIdMemberByFilter()
     * @param {MemberApiGetNotificationsByIdMemberByFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getNotificationsByIdMemberByFilter(requestParameters: MemberApiGetNotificationsByIdMemberByFilterRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getNotificationsByIdMemberByFilter(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersOrganizationsByIdMemberByFilter()
     * @param {MemberApiGetOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getOrganizations(requestParameters: MemberApiGetOrganizationsRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getOrganizations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersSavedSearchesByIdMemberByIdSavedSearch()
     * @param {MemberApiGetSavedSearchByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getSavedSearchByIds(requestParameters: MemberApiGetSavedSearchByIdsRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getSavedSearchByIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersSavedSearchesByIdMember()
     * @param {MemberApiGetSavedSearchesByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getSavedSearchesByIdMember(requestParameters: MemberApiGetSavedSearchesByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getSavedSearchesByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersTokensByIdMember()
     * @param {MemberApiGetTokensByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public getTokensByIdMember(requestParameters: MemberApiGetTokensByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getTokensByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersActionsByIdMember()
     * @param {MemberApiListActionsByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public listActionsByIdMember(requestParameters: MemberApiListActionsByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).listActionsByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This gets the list of all of the user’s uploaded emoji
     * @summary getMembersCustomEmojiByIdMember()
     * @param {MemberApiListCustomEmojiByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public listCustomEmojiByIdMember(requestParameters: MemberApiListCustomEmojiByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).listCustomEmojiByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersOrganizationsInvitedByIdMember()
     * @param {MemberApiListInvitedOrganizationsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public listInvitedOrganizationsById(requestParameters: MemberApiListInvitedOrganizationsByIdRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).listInvitedOrganizationsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersOrganizationsByIdMember()
     * @param {MemberApiListOrganizationsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public listOrganizationsById(requestParameters: MemberApiListOrganizationsByIdRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).listOrganizationsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMembersOrganizationsInvitedByIdMemberByField()
     * @param {MemberApiListOrganizationsInvitedByIdMemberByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public listOrganizationsInvitedByIdMemberByField(requestParameters: MemberApiListOrganizationsInvitedByIdMemberByFieldRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).listOrganizationsInvitedByIdMemberByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteMembersBoardStarsByIdMemberByIdBoardStar()
     * @param {MemberApiRemoveBoardStarByIdMemberByIdBoardStarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public removeBoardStarByIdMemberByIdBoardStar(requestParameters: MemberApiRemoveBoardStarByIdMemberByIdBoardStarRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).removeBoardStarByIdMemberByIdBoardStar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     * @param {MemberApiRemoveCustomBoardBackgroundByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public removeCustomBoardBackgroundById(requestParameters: MemberApiRemoveCustomBoardBackgroundByIdRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).removeCustomBoardBackgroundById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteMembersCustomStickersByIdMemberByIdCustomSticker()
     * @param {MemberApiRemoveCustomStickerByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public removeCustomStickerByIds(requestParameters: MemberApiRemoveCustomStickerByIdsRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).removeCustomStickerByIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteMembersSavedSearchesByIdMemberByIdSavedSearch()
     * @param {MemberApiRemoveSavedSearchByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public removeSavedSearchByIds(requestParameters: MemberApiRemoveSavedSearchByIdsRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).removeSavedSearchByIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersAvatarSourceByIdMember()
     * @param {MemberApiUpdateAvatarSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updateAvatarSource(requestParameters: MemberApiUpdateAvatarSourceRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateAvatarSource(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersBioByIdMember()
     * @param {MemberApiUpdateBioByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updateBioById(requestParameters: MemberApiUpdateBioByIdRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateBioById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     * @param {MemberApiUpdateBoardBackgroundsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updateBoardBackgroundsById(requestParameters: MemberApiUpdateBoardBackgroundsByIdRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateBoardBackgroundsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersBoardStarsByIdMemberByIdBoardStar()
     * @param {MemberApiUpdateBoardStarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updateBoardStar(requestParameters: MemberApiUpdateBoardStarRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateBoardStar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersBoardStarsPosByIdMemberByIdBoardStar()
     * @param {MemberApiUpdateBoardStarPosByIdMemberByIdBoardStarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updateBoardStarPosByIdMemberByIdBoardStar(requestParameters: MemberApiUpdateBoardStarPosByIdMemberByIdBoardStarRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateBoardStarPosByIdMemberByIdBoardStar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar()
     * @param {MemberApiUpdateBoardStarsIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updateBoardStarsIdBoard(requestParameters: MemberApiUpdateBoardStarsIdBoardRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateBoardStarsIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersByIdMember()
     * @param {MemberApiUpdateByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updateByIdMember(requestParameters: MemberApiUpdateByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     * @param {MemberApiUpdateCustomBoardBackgroundsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updateCustomBoardBackgrounds(requestParameters: MemberApiUpdateCustomBoardBackgroundsRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateCustomBoardBackgrounds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersFullNameByIdMember()
     * @param {MemberApiUpdateFullNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updateFullName(requestParameters: MemberApiUpdateFullNameRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateFullName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersInitialsByIdMember()
     * @param {MemberApiUpdateInitialsByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updateInitialsByIdMember(requestParameters: MemberApiUpdateInitialsByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateInitialsByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersPrefsColorBlindByIdMember()
     * @param {MemberApiUpdatePrefsColorBlindByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updatePrefsColorBlindByIdMember(requestParameters: MemberApiUpdatePrefsColorBlindByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updatePrefsColorBlindByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersPrefsLocaleByIdMember()
     * @param {MemberApiUpdatePrefsLocaleByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updatePrefsLocaleByIdMember(requestParameters: MemberApiUpdatePrefsLocaleByIdMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updatePrefsLocaleByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersPrefsMinutesBetweenSummariesByIdMember()
     * @param {MemberApiUpdatePrefsMinutesBetweenSummariesByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updatePrefsMinutesBetweenSummariesById(requestParameters: MemberApiUpdatePrefsMinutesBetweenSummariesByIdRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updatePrefsMinutesBetweenSummariesById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch()
     * @param {MemberApiUpdateSavedSearchQueryByIdMemberByIdSavedSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updateSavedSearchQueryByIdMemberByIdSavedSearch(requestParameters: MemberApiUpdateSavedSearchQueryByIdMemberByIdSavedSearchRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateSavedSearchQueryByIdMemberByIdSavedSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersSavedSearchesByIdMemberByIdSavedSearch()
     * @param {MemberApiUpdateSavedSearchesByIdMemberByIdSavedSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updateSavedSearchesByIdMemberByIdSavedSearch(requestParameters: MemberApiUpdateSavedSearchesByIdMemberByIdSavedSearchRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateSavedSearchesByIdMemberByIdSavedSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersSavedSearchesNameByIdMemberByIdSavedSearch()
     * @param {MemberApiUpdateSavedSearchesNameByIdMemberByIdSavedSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updateSavedSearchesNameByIdMemberByIdSavedSearch(requestParameters: MemberApiUpdateSavedSearchesNameByIdMemberByIdSavedSearchRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateSavedSearchesNameByIdMemberByIdSavedSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersSavedSearchesPosByIdMemberByIdSavedSearch()
     * @param {MemberApiUpdateSavedSearchesPosByIdMemberByIdSavedSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updateSavedSearchesPosByIdMemberByIdSavedSearch(requestParameters: MemberApiUpdateSavedSearchesPosByIdMemberByIdSavedSearchRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateSavedSearchesPosByIdMemberByIdSavedSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateMembersUsernameByIdMember()
     * @param {MemberApiUpdateUsernameByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public updateUsernameById(requestParameters: MemberApiUpdateUsernameByIdRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateUsernameById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addMembersAvatarByIdMember()
     * @param {MemberApiUploadAvatarByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiGenerated
     */
    public uploadAvatarById(requestParameters: MemberApiUploadAvatarByIdRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).uploadAvatarById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
