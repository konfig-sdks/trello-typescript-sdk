/* tslint:disable */
/* eslint-disable */
/*
Trello

This document describes the REST API of Trello as published by Trello.com.
 - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>
 - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Labels } from '../models';
// @ts-ignore
import { LabelsColor } from '../models';
// @ts-ignore
import { LabelsName } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LabelApi - axios parameter creator
 * @export
 */
export const LabelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addLabels()
         * @param {Labels} labels Attributes of \&quot;Labels\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLabels: async (labels: Labels, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'labels' is not null or undefined
            assertParamExists('createLabels', 'labels', labels)
            const localVarPath = `/labels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: labels,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/labels',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(labels, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLabelsBoardByIdLabel()
         * @param {string} idLabel idLabel
         * @param {string} [fields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdLabel: async (idLabel: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idLabel' is not null or undefined
            assertParamExists('getBoardByIdLabel', 'idLabel', idLabel)
            const localVarPath = `/labels/{idLabel}/board`
                .replace(`{${"idLabel"}}`, encodeURIComponent(String(idLabel !== undefined ? idLabel : `-idLabel-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/labels/{idLabel}/board',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLabelsBoardByIdLabelByField()
         * @param {string} idLabel idLabel
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdLabelByField: async (idLabel: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idLabel' is not null or undefined
            assertParamExists('getBoardByIdLabelByField', 'idLabel', idLabel)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getBoardByIdLabelByField', 'field', field)
            const localVarPath = `/labels/{idLabel}/board/{field}`
                .replace(`{${"idLabel"}}`, encodeURIComponent(String(idLabel !== undefined ? idLabel : `-idLabel-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/labels/{idLabel}/board/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLabelsByIdLabel()
         * @param {string} idLabel idLabel
         * @param {string} [fields] all or a comma-separated list of: color, idBoard, name or uses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdLabel: async (idLabel: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idLabel' is not null or undefined
            assertParamExists('getByIdLabel', 'idLabel', idLabel)
            const localVarPath = `/labels/{idLabel}`
                .replace(`{${"idLabel"}}`, encodeURIComponent(String(idLabel !== undefined ? idLabel : `-idLabel-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/labels/{idLabel}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteLabelsByIdLabel()
         * @param {string} idLabel idLabel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByIdLabel: async (idLabel: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idLabel' is not null or undefined
            assertParamExists('removeByIdLabel', 'idLabel', idLabel)
            const localVarPath = `/labels/{idLabel}`
                .replace(`{${"idLabel"}}`, encodeURIComponent(String(idLabel !== undefined ? idLabel : `-idLabel-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/labels/{idLabel}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateLabelsByIdLabel()
         * @param {string} idLabel idLabel
         * @param {Labels} labels Attributes of \&quot;Labels\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdLabel: async (idLabel: string, labels: Labels, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idLabel' is not null or undefined
            assertParamExists('updateByIdLabel', 'idLabel', idLabel)
            // verify required parameter 'labels' is not null or undefined
            assertParamExists('updateByIdLabel', 'labels', labels)
            const localVarPath = `/labels/{idLabel}`
                .replace(`{${"idLabel"}}`, encodeURIComponent(String(idLabel !== undefined ? idLabel : `-idLabel-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: labels,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/labels/{idLabel}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(labels, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateLabelsColorByIdLabel()
         * @param {string} idLabel idLabel
         * @param {LabelsColor} labelsColor Attributes of \&quot;Labels Color\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateColorByIdLabel: async (idLabel: string, labelsColor: LabelsColor, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idLabel' is not null or undefined
            assertParamExists('updateColorByIdLabel', 'idLabel', idLabel)
            // verify required parameter 'labelsColor' is not null or undefined
            assertParamExists('updateColorByIdLabel', 'labelsColor', labelsColor)
            const localVarPath = `/labels/{idLabel}/color`
                .replace(`{${"idLabel"}}`, encodeURIComponent(String(idLabel !== undefined ? idLabel : `-idLabel-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: labelsColor,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/labels/{idLabel}/color',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(labelsColor, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateLabelsNameByIdLabel()
         * @param {string} idLabel idLabel
         * @param {LabelsName} labelsName Attributes of \&quot;Labels Name\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNameByIdLabel: async (idLabel: string, labelsName: LabelsName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idLabel' is not null or undefined
            assertParamExists('updateNameByIdLabel', 'idLabel', idLabel)
            // verify required parameter 'labelsName' is not null or undefined
            assertParamExists('updateNameByIdLabel', 'labelsName', labelsName)
            const localVarPath = `/labels/{idLabel}/name`
                .replace(`{${"idLabel"}}`, encodeURIComponent(String(idLabel !== undefined ? idLabel : `-idLabel-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: labelsName,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/labels/{idLabel}/name',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(labelsName, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LabelApi - functional programming interface
 * @export
 */
export const LabelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LabelApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary addLabels()
         * @param {LabelApiCreateLabelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLabels(requestParameters: LabelApiCreateLabelsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const labels: Labels = {
                color: requestParameters.color,
                idBoard: requestParameters.idBoard,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLabels(labels, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getLabelsBoardByIdLabel()
         * @param {LabelApiGetBoardByIdLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardByIdLabel(requestParameters: LabelApiGetBoardByIdLabelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardByIdLabel(requestParameters.idLabel, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getLabelsBoardByIdLabelByField()
         * @param {LabelApiGetBoardByIdLabelByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardByIdLabelByField(requestParameters: LabelApiGetBoardByIdLabelByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardByIdLabelByField(requestParameters.idLabel, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getLabelsByIdLabel()
         * @param {LabelApiGetByIdLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdLabel(requestParameters: LabelApiGetByIdLabelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdLabel(requestParameters.idLabel, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteLabelsByIdLabel()
         * @param {LabelApiRemoveByIdLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeByIdLabel(requestParameters: LabelApiRemoveByIdLabelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeByIdLabel(requestParameters.idLabel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateLabelsByIdLabel()
         * @param {LabelApiUpdateByIdLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByIdLabel(requestParameters: LabelApiUpdateByIdLabelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const labels: Labels = {
                color: requestParameters.color,
                idBoard: requestParameters.idBoard,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByIdLabel(requestParameters.idLabel, labels, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateLabelsColorByIdLabel()
         * @param {LabelApiUpdateColorByIdLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateColorByIdLabel(requestParameters: LabelApiUpdateColorByIdLabelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const labelsColor: LabelsColor = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateColorByIdLabel(requestParameters.idLabel, labelsColor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateLabelsNameByIdLabel()
         * @param {LabelApiUpdateNameByIdLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNameByIdLabel(requestParameters: LabelApiUpdateNameByIdLabelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const labelsName: LabelsName = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNameByIdLabel(requestParameters.idLabel, labelsName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LabelApi - factory interface
 * @export
 */
export const LabelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LabelApiFp(configuration)
    return {
        /**
         * 
         * @summary addLabels()
         * @param {LabelApiCreateLabelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLabels(requestParameters: LabelApiCreateLabelsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createLabels(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLabelsBoardByIdLabel()
         * @param {LabelApiGetBoardByIdLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdLabel(requestParameters: LabelApiGetBoardByIdLabelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardByIdLabel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLabelsBoardByIdLabelByField()
         * @param {LabelApiGetBoardByIdLabelByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdLabelByField(requestParameters: LabelApiGetBoardByIdLabelByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardByIdLabelByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLabelsByIdLabel()
         * @param {LabelApiGetByIdLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdLabel(requestParameters: LabelApiGetByIdLabelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getByIdLabel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteLabelsByIdLabel()
         * @param {LabelApiRemoveByIdLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByIdLabel(requestParameters: LabelApiRemoveByIdLabelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeByIdLabel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateLabelsByIdLabel()
         * @param {LabelApiUpdateByIdLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdLabel(requestParameters: LabelApiUpdateByIdLabelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateByIdLabel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateLabelsColorByIdLabel()
         * @param {LabelApiUpdateColorByIdLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateColorByIdLabel(requestParameters: LabelApiUpdateColorByIdLabelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateColorByIdLabel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateLabelsNameByIdLabel()
         * @param {LabelApiUpdateNameByIdLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNameByIdLabel(requestParameters: LabelApiUpdateNameByIdLabelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateNameByIdLabel(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createLabels operation in LabelApi.
 * @export
 * @interface LabelApiCreateLabelsRequest
 */
export type LabelApiCreateLabelsRequest = {
    
} & Labels

/**
 * Request parameters for getBoardByIdLabel operation in LabelApi.
 * @export
 * @interface LabelApiGetBoardByIdLabelRequest
 */
export type LabelApiGetBoardByIdLabelRequest = {
    
    /**
    * idLabel
    * @type {string}
    * @memberof LabelApiGetBoardByIdLabel
    */
    readonly idLabel: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof LabelApiGetBoardByIdLabel
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getBoardByIdLabelByField operation in LabelApi.
 * @export
 * @interface LabelApiGetBoardByIdLabelByFieldRequest
 */
export type LabelApiGetBoardByIdLabelByFieldRequest = {
    
    /**
    * idLabel
    * @type {string}
    * @memberof LabelApiGetBoardByIdLabelByField
    */
    readonly idLabel: string
    
    /**
    * field
    * @type {string}
    * @memberof LabelApiGetBoardByIdLabelByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getByIdLabel operation in LabelApi.
 * @export
 * @interface LabelApiGetByIdLabelRequest
 */
export type LabelApiGetByIdLabelRequest = {
    
    /**
    * idLabel
    * @type {string}
    * @memberof LabelApiGetByIdLabel
    */
    readonly idLabel: string
    
    /**
    * all or a comma-separated list of: color, idBoard, name or uses
    * @type {string}
    * @memberof LabelApiGetByIdLabel
    */
    readonly fields?: string
    
}

/**
 * Request parameters for removeByIdLabel operation in LabelApi.
 * @export
 * @interface LabelApiRemoveByIdLabelRequest
 */
export type LabelApiRemoveByIdLabelRequest = {
    
    /**
    * idLabel
    * @type {string}
    * @memberof LabelApiRemoveByIdLabel
    */
    readonly idLabel: string
    
}

/**
 * Request parameters for updateByIdLabel operation in LabelApi.
 * @export
 * @interface LabelApiUpdateByIdLabelRequest
 */
export type LabelApiUpdateByIdLabelRequest = {
    
    /**
    * idLabel
    * @type {string}
    * @memberof LabelApiUpdateByIdLabel
    */
    readonly idLabel: string
    
} & Labels

/**
 * Request parameters for updateColorByIdLabel operation in LabelApi.
 * @export
 * @interface LabelApiUpdateColorByIdLabelRequest
 */
export type LabelApiUpdateColorByIdLabelRequest = {
    
    /**
    * idLabel
    * @type {string}
    * @memberof LabelApiUpdateColorByIdLabel
    */
    readonly idLabel: string
    
} & LabelsColor

/**
 * Request parameters for updateNameByIdLabel operation in LabelApi.
 * @export
 * @interface LabelApiUpdateNameByIdLabelRequest
 */
export type LabelApiUpdateNameByIdLabelRequest = {
    
    /**
    * idLabel
    * @type {string}
    * @memberof LabelApiUpdateNameByIdLabel
    */
    readonly idLabel: string
    
} & LabelsName

/**
 * LabelApiGenerated - object-oriented interface
 * @export
 * @class LabelApiGenerated
 * @extends {BaseAPI}
 */
export class LabelApiGenerated extends BaseAPI {
    /**
     * 
     * @summary addLabels()
     * @param {LabelApiCreateLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelApiGenerated
     */
    public createLabels(requestParameters: LabelApiCreateLabelsRequest, options?: AxiosRequestConfig) {
        return LabelApiFp(this.configuration).createLabels(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLabelsBoardByIdLabel()
     * @param {LabelApiGetBoardByIdLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelApiGenerated
     */
    public getBoardByIdLabel(requestParameters: LabelApiGetBoardByIdLabelRequest, options?: AxiosRequestConfig) {
        return LabelApiFp(this.configuration).getBoardByIdLabel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLabelsBoardByIdLabelByField()
     * @param {LabelApiGetBoardByIdLabelByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelApiGenerated
     */
    public getBoardByIdLabelByField(requestParameters: LabelApiGetBoardByIdLabelByFieldRequest, options?: AxiosRequestConfig) {
        return LabelApiFp(this.configuration).getBoardByIdLabelByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLabelsByIdLabel()
     * @param {LabelApiGetByIdLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelApiGenerated
     */
    public getByIdLabel(requestParameters: LabelApiGetByIdLabelRequest, options?: AxiosRequestConfig) {
        return LabelApiFp(this.configuration).getByIdLabel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteLabelsByIdLabel()
     * @param {LabelApiRemoveByIdLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelApiGenerated
     */
    public removeByIdLabel(requestParameters: LabelApiRemoveByIdLabelRequest, options?: AxiosRequestConfig) {
        return LabelApiFp(this.configuration).removeByIdLabel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateLabelsByIdLabel()
     * @param {LabelApiUpdateByIdLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelApiGenerated
     */
    public updateByIdLabel(requestParameters: LabelApiUpdateByIdLabelRequest, options?: AxiosRequestConfig) {
        return LabelApiFp(this.configuration).updateByIdLabel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateLabelsColorByIdLabel()
     * @param {LabelApiUpdateColorByIdLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelApiGenerated
     */
    public updateColorByIdLabel(requestParameters: LabelApiUpdateColorByIdLabelRequest, options?: AxiosRequestConfig) {
        return LabelApiFp(this.configuration).updateColorByIdLabel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateLabelsNameByIdLabel()
     * @param {LabelApiUpdateNameByIdLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelApiGenerated
     */
    public updateNameByIdLabel(requestParameters: LabelApiUpdateNameByIdLabelRequest, options?: AxiosRequestConfig) {
        return LabelApiFp(this.configuration).updateNameByIdLabel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
