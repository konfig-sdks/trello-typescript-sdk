/* tslint:disable */
/* eslint-disable */
/*
Trello

This document describes the REST API of Trello as published by Trello.com.
 - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>
 - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Actions } from '../models';
// @ts-ignore
import { ActionsText } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ActionApi - axios parameter creator
 * @export
 */
export const ActionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getActionsBoardByIdAction()
         * @param {string} idAction idAction
         * @param {string} [fields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdAction: async (idAction: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('getBoardByIdAction', 'idAction', idAction)
            const localVarPath = `/actions/{idAction}/board`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}/board',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActionsBoardByIdActionByField()
         * @param {string} idAction idAction
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdActionByField: async (idAction: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('getBoardByIdActionByField', 'idAction', idAction)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getBoardByIdActionByField', 'field', field)
            const localVarPath = `/actions/{idAction}/board/{field}`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}/board/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActionsByIdAction()
         * @param {string} idAction idAction
         * @param {string} [display]  true or false
         * @param {string} [entities]  true or false
         * @param {string} [fields] all or a comma-separated list of: data, date, idMemberCreator or type
         * @param {string} [member]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [memberCreator]  true or false
         * @param {string} [memberCreatorFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (idAction: string, display?: string, entities?: string, fields?: string, member?: string, memberFields?: string, memberCreator?: string, memberCreatorFields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('getById', 'idAction', idAction)
            const localVarPath = `/actions/{idAction}`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (display !== undefined) {
                localVarQueryParameter['display'] = display;
            }

            if (entities !== undefined) {
                localVarQueryParameter['entities'] = entities;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (member !== undefined) {
                localVarQueryParameter['member'] = member;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (memberCreator !== undefined) {
                localVarQueryParameter['memberCreator'] = memberCreator;
            }

            if (memberCreatorFields !== undefined) {
                localVarQueryParameter['memberCreator_fields'] = memberCreatorFields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActionsByIdActionByField()
         * @param {string} idAction idAction
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdActionField: async (idAction: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('getByIdActionField', 'idAction', idAction)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getByIdActionField', 'field', field)
            const localVarPath = `/actions/{idAction}/{field}`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActionsCardByIdAction()
         * @param {string} idAction idAction
         * @param {string} [fields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardByIdAction: async (idAction: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('getCardByIdAction', 'idAction', idAction)
            const localVarPath = `/actions/{idAction}/card`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}/card',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActionsCardByIdActionByField()
         * @param {string} idAction idAction
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardByIdActionByField: async (idAction: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('getCardByIdActionByField', 'idAction', idAction)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getCardByIdActionByField', 'field', field)
            const localVarPath = `/actions/{idAction}/card/{field}`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}/card/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActionsDisplayByIdAction()
         * @param {string} idAction idAction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDisplayByIdAction: async (idAction: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('getDisplayByIdAction', 'idAction', idAction)
            const localVarPath = `/actions/{idAction}/display`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}/display',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActionsEntitiesByIdAction()
         * @param {string} idAction idAction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesByIdAction: async (idAction: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('getEntitiesByIdAction', 'idAction', idAction)
            const localVarPath = `/actions/{idAction}/entities`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}/entities',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActionsListByIdAction()
         * @param {string} idAction idAction
         * @param {string} [fields] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListByIdAction: async (idAction: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('getListByIdAction', 'idAction', idAction)
            const localVarPath = `/actions/{idAction}/list`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}/list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActionsListByIdActionByField()
         * @param {string} idAction idAction
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListByIdActionByField: async (idAction: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('getListByIdActionByField', 'idAction', idAction)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getListByIdActionByField', 'field', field)
            const localVarPath = `/actions/{idAction}/list/{field}`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}/list/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActionsMemberByIdActionByField()
         * @param {string} idAction idAction
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberByField: async (idAction: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('getMemberByField', 'idAction', idAction)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getMemberByField', 'field', field)
            const localVarPath = `/actions/{idAction}/member/{field}`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}/member/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActionsMemberByIdAction()
         * @param {string} idAction idAction
         * @param {string} [fields] all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberByIdAction: async (idAction: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('getMemberByIdAction', 'idAction', idAction)
            const localVarPath = `/actions/{idAction}/member`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}/member',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActionsMemberCreatorByIdActionByField()
         * @param {string} idAction idAction
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberByIdActionByField: async (idAction: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('getMemberByIdActionByField', 'idAction', idAction)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getMemberByIdActionByField', 'field', field)
            const localVarPath = `/actions/{idAction}/memberCreator/{field}`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}/memberCreator/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActionsMemberCreatorByIdAction()
         * @param {string} idAction idAction
         * @param {string} [fields] all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberCreatorByIdAction: async (idAction: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('getMemberCreatorByIdAction', 'idAction', idAction)
            const localVarPath = `/actions/{idAction}/memberCreator`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}/memberCreator',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActionsOrganizationByIdActionByField()
         * @param {string} idAction idAction
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgByIdActionByField: async (idAction: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('getOrgByIdActionByField', 'idAction', idAction)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getOrgByIdActionByField', 'field', field)
            const localVarPath = `/actions/{idAction}/organization/{field}`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}/organization/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActionsOrganizationByIdAction()
         * @param {string} idAction idAction
         * @param {string} [fields] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationByIdAction: async (idAction: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('getOrganizationByIdAction', 'idAction', idAction)
            const localVarPath = `/actions/{idAction}/organization`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}/organization',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteActionsByIdAction()
         * @param {string} idAction idAction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByIdAction: async (idAction: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('removeByIdAction', 'idAction', idAction)
            const localVarPath = `/actions/{idAction}`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateActionsByIdAction()
         * @param {string} idAction idAction
         * @param {Actions} actions Attributes of \&quot;Actions\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdAction: async (idAction: string, actions: Actions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('updateByIdAction', 'idAction', idAction)
            // verify required parameter 'actions' is not null or undefined
            assertParamExists('updateByIdAction', 'actions', actions)
            const localVarPath = `/actions/{idAction}`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: actions,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(actions, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateActionsTextByIdAction()
         * @param {string} idAction idAction
         * @param {ActionsText} actionsText Attributes of \&quot;Actions Text\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTextByIdAction: async (idAction: string, actionsText: ActionsText, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idAction' is not null or undefined
            assertParamExists('updateTextByIdAction', 'idAction', idAction)
            // verify required parameter 'actionsText' is not null or undefined
            assertParamExists('updateTextByIdAction', 'actionsText', actionsText)
            const localVarPath = `/actions/{idAction}/text`
                .replace(`{${"idAction"}}`, encodeURIComponent(String(idAction !== undefined ? idAction : `-idAction-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: actionsText,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/actions/{idAction}/text',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(actionsText, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActionApi - functional programming interface
 * @export
 */
export const ActionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary getActionsBoardByIdAction()
         * @param {ActionApiGetBoardByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardByIdAction(requestParameters: ActionApiGetBoardByIdActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardByIdAction(requestParameters.idAction, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getActionsBoardByIdActionByField()
         * @param {ActionApiGetBoardByIdActionByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardByIdActionByField(requestParameters: ActionApiGetBoardByIdActionByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardByIdActionByField(requestParameters.idAction, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getActionsByIdAction()
         * @param {ActionApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ActionApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.idAction, requestParameters.display, requestParameters.entities, requestParameters.fields, requestParameters.member, requestParameters.memberFields, requestParameters.memberCreator, requestParameters.memberCreatorFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getActionsByIdActionByField()
         * @param {ActionApiGetByIdActionFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdActionField(requestParameters: ActionApiGetByIdActionFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdActionField(requestParameters.idAction, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getActionsCardByIdAction()
         * @param {ActionApiGetCardByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardByIdAction(requestParameters: ActionApiGetCardByIdActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardByIdAction(requestParameters.idAction, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getActionsCardByIdActionByField()
         * @param {ActionApiGetCardByIdActionByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardByIdActionByField(requestParameters: ActionApiGetCardByIdActionByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardByIdActionByField(requestParameters.idAction, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getActionsDisplayByIdAction()
         * @param {ActionApiGetDisplayByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDisplayByIdAction(requestParameters: ActionApiGetDisplayByIdActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDisplayByIdAction(requestParameters.idAction, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getActionsEntitiesByIdAction()
         * @param {ActionApiGetEntitiesByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntitiesByIdAction(requestParameters: ActionApiGetEntitiesByIdActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntitiesByIdAction(requestParameters.idAction, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getActionsListByIdAction()
         * @param {ActionApiGetListByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListByIdAction(requestParameters: ActionApiGetListByIdActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListByIdAction(requestParameters.idAction, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getActionsListByIdActionByField()
         * @param {ActionApiGetListByIdActionByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListByIdActionByField(requestParameters: ActionApiGetListByIdActionByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListByIdActionByField(requestParameters.idAction, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getActionsMemberByIdActionByField()
         * @param {ActionApiGetMemberByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberByField(requestParameters: ActionApiGetMemberByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberByField(requestParameters.idAction, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getActionsMemberByIdAction()
         * @param {ActionApiGetMemberByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberByIdAction(requestParameters: ActionApiGetMemberByIdActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberByIdAction(requestParameters.idAction, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getActionsMemberCreatorByIdActionByField()
         * @param {ActionApiGetMemberByIdActionByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberByIdActionByField(requestParameters: ActionApiGetMemberByIdActionByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberByIdActionByField(requestParameters.idAction, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getActionsMemberCreatorByIdAction()
         * @param {ActionApiGetMemberCreatorByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberCreatorByIdAction(requestParameters: ActionApiGetMemberCreatorByIdActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberCreatorByIdAction(requestParameters.idAction, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getActionsOrganizationByIdActionByField()
         * @param {ActionApiGetOrgByIdActionByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgByIdActionByField(requestParameters: ActionApiGetOrgByIdActionByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrgByIdActionByField(requestParameters.idAction, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getActionsOrganizationByIdAction()
         * @param {ActionApiGetOrganizationByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationByIdAction(requestParameters: ActionApiGetOrganizationByIdActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationByIdAction(requestParameters.idAction, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteActionsByIdAction()
         * @param {ActionApiRemoveByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeByIdAction(requestParameters: ActionApiRemoveByIdActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeByIdAction(requestParameters.idAction, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateActionsByIdAction()
         * @param {ActionApiUpdateByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByIdAction(requestParameters: ActionApiUpdateByIdActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const actions: Actions = {
                text: requestParameters.text
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByIdAction(requestParameters.idAction, actions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateActionsTextByIdAction()
         * @param {ActionApiUpdateTextByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTextByIdAction(requestParameters: ActionApiUpdateTextByIdActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const actionsText: ActionsText = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTextByIdAction(requestParameters.idAction, actionsText, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ActionApi - factory interface
 * @export
 */
export const ActionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActionApiFp(configuration)
    return {
        /**
         * 
         * @summary getActionsBoardByIdAction()
         * @param {ActionApiGetBoardByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdAction(requestParameters: ActionApiGetBoardByIdActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardByIdAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getActionsBoardByIdActionByField()
         * @param {ActionApiGetBoardByIdActionByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardByIdActionByField(requestParameters: ActionApiGetBoardByIdActionByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardByIdActionByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getActionsByIdAction()
         * @param {ActionApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ActionApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getActionsByIdActionByField()
         * @param {ActionApiGetByIdActionFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdActionField(requestParameters: ActionApiGetByIdActionFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getByIdActionField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getActionsCardByIdAction()
         * @param {ActionApiGetCardByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardByIdAction(requestParameters: ActionApiGetCardByIdActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCardByIdAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getActionsCardByIdActionByField()
         * @param {ActionApiGetCardByIdActionByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardByIdActionByField(requestParameters: ActionApiGetCardByIdActionByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCardByIdActionByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getActionsDisplayByIdAction()
         * @param {ActionApiGetDisplayByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDisplayByIdAction(requestParameters: ActionApiGetDisplayByIdActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDisplayByIdAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getActionsEntitiesByIdAction()
         * @param {ActionApiGetEntitiesByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesByIdAction(requestParameters: ActionApiGetEntitiesByIdActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getEntitiesByIdAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getActionsListByIdAction()
         * @param {ActionApiGetListByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListByIdAction(requestParameters: ActionApiGetListByIdActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getListByIdAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getActionsListByIdActionByField()
         * @param {ActionApiGetListByIdActionByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListByIdActionByField(requestParameters: ActionApiGetListByIdActionByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getListByIdActionByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getActionsMemberByIdActionByField()
         * @param {ActionApiGetMemberByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberByField(requestParameters: ActionApiGetMemberByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMemberByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getActionsMemberByIdAction()
         * @param {ActionApiGetMemberByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberByIdAction(requestParameters: ActionApiGetMemberByIdActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMemberByIdAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getActionsMemberCreatorByIdActionByField()
         * @param {ActionApiGetMemberByIdActionByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberByIdActionByField(requestParameters: ActionApiGetMemberByIdActionByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMemberByIdActionByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getActionsMemberCreatorByIdAction()
         * @param {ActionApiGetMemberCreatorByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberCreatorByIdAction(requestParameters: ActionApiGetMemberCreatorByIdActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMemberCreatorByIdAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getActionsOrganizationByIdActionByField()
         * @param {ActionApiGetOrgByIdActionByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgByIdActionByField(requestParameters: ActionApiGetOrgByIdActionByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getOrgByIdActionByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getActionsOrganizationByIdAction()
         * @param {ActionApiGetOrganizationByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationByIdAction(requestParameters: ActionApiGetOrganizationByIdActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getOrganizationByIdAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteActionsByIdAction()
         * @param {ActionApiRemoveByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByIdAction(requestParameters: ActionApiRemoveByIdActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeByIdAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateActionsByIdAction()
         * @param {ActionApiUpdateByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdAction(requestParameters: ActionApiUpdateByIdActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateByIdAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateActionsTextByIdAction()
         * @param {ActionApiUpdateTextByIdActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTextByIdAction(requestParameters: ActionApiUpdateTextByIdActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateTextByIdAction(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBoardByIdAction operation in ActionApi.
 * @export
 * @interface ActionApiGetBoardByIdActionRequest
 */
export type ActionApiGetBoardByIdActionRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiGetBoardByIdAction
    */
    readonly idAction: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof ActionApiGetBoardByIdAction
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getBoardByIdActionByField operation in ActionApi.
 * @export
 * @interface ActionApiGetBoardByIdActionByFieldRequest
 */
export type ActionApiGetBoardByIdActionByFieldRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiGetBoardByIdActionByField
    */
    readonly idAction: string
    
    /**
    * field
    * @type {string}
    * @memberof ActionApiGetBoardByIdActionByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getById operation in ActionApi.
 * @export
 * @interface ActionApiGetByIdRequest
 */
export type ActionApiGetByIdRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiGetById
    */
    readonly idAction: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof ActionApiGetById
    */
    readonly display?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof ActionApiGetById
    */
    readonly entities?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator or type
    * @type {string}
    * @memberof ActionApiGetById
    */
    readonly fields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof ActionApiGetById
    */
    readonly member?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof ActionApiGetById
    */
    readonly memberFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof ActionApiGetById
    */
    readonly memberCreator?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof ActionApiGetById
    */
    readonly memberCreatorFields?: string
    
}

/**
 * Request parameters for getByIdActionField operation in ActionApi.
 * @export
 * @interface ActionApiGetByIdActionFieldRequest
 */
export type ActionApiGetByIdActionFieldRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiGetByIdActionField
    */
    readonly idAction: string
    
    /**
    * field
    * @type {string}
    * @memberof ActionApiGetByIdActionField
    */
    readonly field: string
    
}

/**
 * Request parameters for getCardByIdAction operation in ActionApi.
 * @export
 * @interface ActionApiGetCardByIdActionRequest
 */
export type ActionApiGetCardByIdActionRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiGetCardByIdAction
    */
    readonly idAction: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof ActionApiGetCardByIdAction
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getCardByIdActionByField operation in ActionApi.
 * @export
 * @interface ActionApiGetCardByIdActionByFieldRequest
 */
export type ActionApiGetCardByIdActionByFieldRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiGetCardByIdActionByField
    */
    readonly idAction: string
    
    /**
    * field
    * @type {string}
    * @memberof ActionApiGetCardByIdActionByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getDisplayByIdAction operation in ActionApi.
 * @export
 * @interface ActionApiGetDisplayByIdActionRequest
 */
export type ActionApiGetDisplayByIdActionRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiGetDisplayByIdAction
    */
    readonly idAction: string
    
}

/**
 * Request parameters for getEntitiesByIdAction operation in ActionApi.
 * @export
 * @interface ActionApiGetEntitiesByIdActionRequest
 */
export type ActionApiGetEntitiesByIdActionRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiGetEntitiesByIdAction
    */
    readonly idAction: string
    
}

/**
 * Request parameters for getListByIdAction operation in ActionApi.
 * @export
 * @interface ActionApiGetListByIdActionRequest
 */
export type ActionApiGetListByIdActionRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiGetListByIdAction
    */
    readonly idAction: string
    
    /**
    * all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    * @type {string}
    * @memberof ActionApiGetListByIdAction
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getListByIdActionByField operation in ActionApi.
 * @export
 * @interface ActionApiGetListByIdActionByFieldRequest
 */
export type ActionApiGetListByIdActionByFieldRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiGetListByIdActionByField
    */
    readonly idAction: string
    
    /**
    * field
    * @type {string}
    * @memberof ActionApiGetListByIdActionByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getMemberByField operation in ActionApi.
 * @export
 * @interface ActionApiGetMemberByFieldRequest
 */
export type ActionApiGetMemberByFieldRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiGetMemberByField
    */
    readonly idAction: string
    
    /**
    * field
    * @type {string}
    * @memberof ActionApiGetMemberByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getMemberByIdAction operation in ActionApi.
 * @export
 * @interface ActionApiGetMemberByIdActionRequest
 */
export type ActionApiGetMemberByIdActionRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiGetMemberByIdAction
    */
    readonly idAction: string
    
    /**
    * all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
    * @type {string}
    * @memberof ActionApiGetMemberByIdAction
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getMemberByIdActionByField operation in ActionApi.
 * @export
 * @interface ActionApiGetMemberByIdActionByFieldRequest
 */
export type ActionApiGetMemberByIdActionByFieldRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiGetMemberByIdActionByField
    */
    readonly idAction: string
    
    /**
    * field
    * @type {string}
    * @memberof ActionApiGetMemberByIdActionByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getMemberCreatorByIdAction operation in ActionApi.
 * @export
 * @interface ActionApiGetMemberCreatorByIdActionRequest
 */
export type ActionApiGetMemberCreatorByIdActionRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiGetMemberCreatorByIdAction
    */
    readonly idAction: string
    
    /**
    * all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
    * @type {string}
    * @memberof ActionApiGetMemberCreatorByIdAction
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getOrgByIdActionByField operation in ActionApi.
 * @export
 * @interface ActionApiGetOrgByIdActionByFieldRequest
 */
export type ActionApiGetOrgByIdActionByFieldRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiGetOrgByIdActionByField
    */
    readonly idAction: string
    
    /**
    * field
    * @type {string}
    * @memberof ActionApiGetOrgByIdActionByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getOrganizationByIdAction operation in ActionApi.
 * @export
 * @interface ActionApiGetOrganizationByIdActionRequest
 */
export type ActionApiGetOrganizationByIdActionRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiGetOrganizationByIdAction
    */
    readonly idAction: string
    
    /**
    * all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    * @type {string}
    * @memberof ActionApiGetOrganizationByIdAction
    */
    readonly fields?: string
    
}

/**
 * Request parameters for removeByIdAction operation in ActionApi.
 * @export
 * @interface ActionApiRemoveByIdActionRequest
 */
export type ActionApiRemoveByIdActionRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiRemoveByIdAction
    */
    readonly idAction: string
    
}

/**
 * Request parameters for updateByIdAction operation in ActionApi.
 * @export
 * @interface ActionApiUpdateByIdActionRequest
 */
export type ActionApiUpdateByIdActionRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiUpdateByIdAction
    */
    readonly idAction: string
    
} & Actions

/**
 * Request parameters for updateTextByIdAction operation in ActionApi.
 * @export
 * @interface ActionApiUpdateTextByIdActionRequest
 */
export type ActionApiUpdateTextByIdActionRequest = {
    
    /**
    * idAction
    * @type {string}
    * @memberof ActionApiUpdateTextByIdAction
    */
    readonly idAction: string
    
} & ActionsText

/**
 * ActionApiGenerated - object-oriented interface
 * @export
 * @class ActionApiGenerated
 * @extends {BaseAPI}
 */
export class ActionApiGenerated extends BaseAPI {
    /**
     * 
     * @summary getActionsBoardByIdAction()
     * @param {ActionApiGetBoardByIdActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public getBoardByIdAction(requestParameters: ActionApiGetBoardByIdActionRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).getBoardByIdAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getActionsBoardByIdActionByField()
     * @param {ActionApiGetBoardByIdActionByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public getBoardByIdActionByField(requestParameters: ActionApiGetBoardByIdActionByFieldRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).getBoardByIdActionByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getActionsByIdAction()
     * @param {ActionApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public getById(requestParameters: ActionApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getActionsByIdActionByField()
     * @param {ActionApiGetByIdActionFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public getByIdActionField(requestParameters: ActionApiGetByIdActionFieldRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).getByIdActionField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getActionsCardByIdAction()
     * @param {ActionApiGetCardByIdActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public getCardByIdAction(requestParameters: ActionApiGetCardByIdActionRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).getCardByIdAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getActionsCardByIdActionByField()
     * @param {ActionApiGetCardByIdActionByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public getCardByIdActionByField(requestParameters: ActionApiGetCardByIdActionByFieldRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).getCardByIdActionByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getActionsDisplayByIdAction()
     * @param {ActionApiGetDisplayByIdActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public getDisplayByIdAction(requestParameters: ActionApiGetDisplayByIdActionRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).getDisplayByIdAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getActionsEntitiesByIdAction()
     * @param {ActionApiGetEntitiesByIdActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public getEntitiesByIdAction(requestParameters: ActionApiGetEntitiesByIdActionRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).getEntitiesByIdAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getActionsListByIdAction()
     * @param {ActionApiGetListByIdActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public getListByIdAction(requestParameters: ActionApiGetListByIdActionRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).getListByIdAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getActionsListByIdActionByField()
     * @param {ActionApiGetListByIdActionByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public getListByIdActionByField(requestParameters: ActionApiGetListByIdActionByFieldRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).getListByIdActionByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getActionsMemberByIdActionByField()
     * @param {ActionApiGetMemberByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public getMemberByField(requestParameters: ActionApiGetMemberByFieldRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).getMemberByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getActionsMemberByIdAction()
     * @param {ActionApiGetMemberByIdActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public getMemberByIdAction(requestParameters: ActionApiGetMemberByIdActionRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).getMemberByIdAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getActionsMemberCreatorByIdActionByField()
     * @param {ActionApiGetMemberByIdActionByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public getMemberByIdActionByField(requestParameters: ActionApiGetMemberByIdActionByFieldRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).getMemberByIdActionByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getActionsMemberCreatorByIdAction()
     * @param {ActionApiGetMemberCreatorByIdActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public getMemberCreatorByIdAction(requestParameters: ActionApiGetMemberCreatorByIdActionRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).getMemberCreatorByIdAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getActionsOrganizationByIdActionByField()
     * @param {ActionApiGetOrgByIdActionByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public getOrgByIdActionByField(requestParameters: ActionApiGetOrgByIdActionByFieldRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).getOrgByIdActionByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getActionsOrganizationByIdAction()
     * @param {ActionApiGetOrganizationByIdActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public getOrganizationByIdAction(requestParameters: ActionApiGetOrganizationByIdActionRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).getOrganizationByIdAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteActionsByIdAction()
     * @param {ActionApiRemoveByIdActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public removeByIdAction(requestParameters: ActionApiRemoveByIdActionRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).removeByIdAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateActionsByIdAction()
     * @param {ActionApiUpdateByIdActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public updateByIdAction(requestParameters: ActionApiUpdateByIdActionRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).updateByIdAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateActionsTextByIdAction()
     * @param {ActionApiUpdateTextByIdActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public updateTextByIdAction(requestParameters: ActionApiUpdateTextByIdActionRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).updateTextByIdAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
