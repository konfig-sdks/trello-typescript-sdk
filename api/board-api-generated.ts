/* tslint:disable */
/* eslint-disable */
/*
Trello

This document describes the REST API of Trello as published by Trello.com.
 - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>
 - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Boards } from '../models';
// @ts-ignore
import { BoardsChecklists } from '../models';
// @ts-ignore
import { BoardsClosed } from '../models';
// @ts-ignore
import { BoardsDesc } from '../models';
// @ts-ignore
import { BoardsIdOrganization } from '../models';
// @ts-ignore
import { BoardsLabels } from '../models';
// @ts-ignore
import { BoardsLists } from '../models';
// @ts-ignore
import { BoardsMembers } from '../models';
// @ts-ignore
import { BoardsMemberships } from '../models';
// @ts-ignore
import { BoardsName } from '../models';
// @ts-ignore
import { BoardsPowerUps } from '../models';
// @ts-ignore
import { BoardsSubscribed } from '../models';
// @ts-ignore
import { LabelNamesBlue } from '../models';
// @ts-ignore
import { LabelNamesGreen } from '../models';
// @ts-ignore
import { LabelNamesOrange } from '../models';
// @ts-ignore
import { LabelNamesPurple } from '../models';
// @ts-ignore
import { LabelNamesRed } from '../models';
// @ts-ignore
import { LabelNamesYellow } from '../models';
// @ts-ignore
import { MyPrefsEmailPosition } from '../models';
// @ts-ignore
import { MyPrefsIdEmailList } from '../models';
// @ts-ignore
import { MyPrefsShowListGuide } from '../models';
// @ts-ignore
import { MyPrefsShowSidebar } from '../models';
// @ts-ignore
import { MyPrefsShowSidebarActivity } from '../models';
// @ts-ignore
import { MyPrefsShowSidebarBoardActions } from '../models';
// @ts-ignore
import { MyPrefsShowSidebarMembers } from '../models';
// @ts-ignore
import { PrefsBackground } from '../models';
// @ts-ignore
import { PrefsCalendarFeedEnabled } from '../models';
// @ts-ignore
import { PrefsCardAging } from '../models';
// @ts-ignore
import { PrefsCardCovers } from '../models';
// @ts-ignore
import { PrefsComments } from '../models';
// @ts-ignore
import { PrefsInvitations } from '../models';
// @ts-ignore
import { PrefsPermissionLevel } from '../models';
// @ts-ignore
import { PrefsSelfJoin } from '../models';
// @ts-ignore
import { PrefsVoting } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BoardApi - axios parameter creator
 * @export
 */
export const BoardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addBoardsChecklistsByIdBoard()
         * @param {string} idBoard board_id
         * @param {BoardsChecklists} boardsChecklists Attributes of \&quot;Boards Checklists\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addChecklists: async (idBoard: string, boardsChecklists: BoardsChecklists, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('addChecklists', 'idBoard', idBoard)
            // verify required parameter 'boardsChecklists' is not null or undefined
            assertParamExists('addChecklists', 'boardsChecklists', boardsChecklists)
            const localVarPath = `/boards/{idBoard}/checklists`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: boardsChecklists,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/checklists',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(boardsChecklists, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addBoardsLabelsByIdBoard()
         * @param {string} idBoard board_id
         * @param {BoardsLabels} boardsLabels Attributes of \&quot;Boards Labels\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLabelsByIdBoard: async (idBoard: string, boardsLabels: BoardsLabels, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('addLabelsByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'boardsLabels' is not null or undefined
            assertParamExists('addLabelsByIdBoard', 'boardsLabels', boardsLabels)
            const localVarPath = `/boards/{idBoard}/labels`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: boardsLabels,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/labels',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(boardsLabels, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addBoardsPowerUpsByIdBoard()
         * @param {string} idBoard board_id
         * @param {BoardsPowerUps} boardsPowerUps Attributes of \&quot;Boards Power Ups\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPowerUpsByIdBoard: async (idBoard: string, boardsPowerUps: BoardsPowerUps, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('addPowerUpsByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'boardsPowerUps' is not null or undefined
            assertParamExists('addPowerUpsByIdBoard', 'boardsPowerUps', boardsPowerUps)
            const localVarPath = `/boards/{idBoard}/powerUps`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: boardsPowerUps,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/powerUps',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(boardsPowerUps, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addBoards()
         * @param {Boards} boards Attributes of \&quot;Boards\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBoard: async (boards: Boards, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boards' is not null or undefined
            assertParamExists('createBoard', 'boards', boards)
            const localVarPath = `/boards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: boards,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(boards, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addBoardsListsByIdBoard()
         * @param {string} idBoard board_id
         * @param {BoardsLists} boardsLists Attributes of \&quot;Boards Lists\&quot; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createListsByIdBoard: async (idBoard: string, boardsLists: BoardsLists, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('createListsByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'boardsLists' is not null or undefined
            assertParamExists('createListsByIdBoard', 'boardsLists', boardsLists)
            const localVarPath = `/boards/{idBoard}/lists`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: boardsLists,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/lists',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(boardsLists, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsCardsByIdBoardByFilter()
         * @param {string} idBoard board_id
         * @param {string} filter filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filterCardsByIdBoard: async (idBoard: string, filter: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('filterCardsByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('filterCardsByIdBoard', 'filter', filter)
            const localVarPath = `/boards/{idBoard}/cards/{filter}`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)))
                .replace(`{${"filter"}}`, encodeURIComponent(String(filter !== undefined ? filter : `-filter-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/cards/{filter}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addBoardsCalendarKeyGenerateByIdBoard()
         * @param {string} idBoard board_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCalendarKeyById: async (idBoard: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('generateCalendarKeyById', 'idBoard', idBoard)
            const localVarPath = `/boards/{idBoard}/calendarKey/generate`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/calendarKey/generate',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addBoardsEmailKeyGenerateByIdBoard()
         * @param {string} idBoard board_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateEmailKey: async (idBoard: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('generateEmailKey', 'idBoard', idBoard)
            const localVarPath = `/boards/{idBoard}/emailKey/generate`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/emailKey/generate',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsBoardStarsByIdBoard()
         * @param {string} idBoard board_id
         * @param {string} [filter] One of: mine or none
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardStarsById: async (idBoard: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getBoardStarsById', 'idBoard', idBoard)
            const localVarPath = `/boards/{idBoard}/boardStars`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/boardStars',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsByIdBoard()
         * @param {string} idBoard board_id
         * @param {string} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [actionsEntities]  true or false
         * @param {string} [actionsDisplay]  true or false
         * @param {string} [actionsFormat] One of: count, list or minimal
         * @param {string} [actionsSince] A date, null or lastView
         * @param {string} [actionsLimit] a number from 0 to 1000
         * @param {string} [actionFields] all or a comma-separated list of: data, date, idMemberCreator or type
         * @param {string} [actionMember]  true or false
         * @param {string} [actionMemberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [actionMemberCreator]  true or false
         * @param {string} [actionMemberCreatorFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [cards] One of: all, closed, none, open or visible
         * @param {string} [cardFields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {string} [cardAttachments] A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments
         * @param {string} [cardAttachmentFields] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
         * @param {string} [cardChecklists] One of: all or none
         * @param {string} [cardStickers]  true or false
         * @param {string} [boardStars] One of: mine or none
         * @param {string} [labels] One of: all or none
         * @param {string} [labelFields] all or a comma-separated list of: color, idBoard, name or uses
         * @param {string} [labelsLimit] a number from 0 to 1000
         * @param {string} [lists] One of: all, closed, none or open
         * @param {string} [listFields] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
         * @param {string} [memberships] all or a comma-separated list of: active, admin, deactivated, me or normal
         * @param {string} [membershipsMember]  true or false
         * @param {string} [membershipsMemberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [members] One of: admins, all, none, normal or owners
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [membersInvited] One of: admins, all, none, normal or owners
         * @param {string} [membersInvitedFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [checklists] One of: all or none
         * @param {string} [checklistFields] all or a comma-separated list of: idBoard, idCard, name or pos
         * @param {string} [organization]  true or false
         * @param {string} [organizationFields] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
         * @param {string} [organizationMemberships] all or a comma-separated list of: active, admin, deactivated, me or normal
         * @param {string} [myPrefs]  true or false
         * @param {string} [fields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (idBoard: string, actions?: string, actionsEntities?: string, actionsDisplay?: string, actionsFormat?: string, actionsSince?: string, actionsLimit?: string, actionFields?: string, actionMember?: string, actionMemberFields?: string, actionMemberCreator?: string, actionMemberCreatorFields?: string, cards?: string, cardFields?: string, cardAttachments?: string, cardAttachmentFields?: string, cardChecklists?: string, cardStickers?: string, boardStars?: string, labels?: string, labelFields?: string, labelsLimit?: string, lists?: string, listFields?: string, memberships?: string, membershipsMember?: string, membershipsMemberFields?: string, members?: string, memberFields?: string, membersInvited?: string, membersInvitedFields?: string, checklists?: string, checklistFields?: string, organization?: string, organizationFields?: string, organizationMemberships?: string, myPrefs?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getById', 'idBoard', idBoard)
            const localVarPath = `/boards/{idBoard}`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (actions !== undefined) {
                localVarQueryParameter['actions'] = actions;
            }

            if (actionsEntities !== undefined) {
                localVarQueryParameter['actions_entities'] = actionsEntities;
            }

            if (actionsDisplay !== undefined) {
                localVarQueryParameter['actions_display'] = actionsDisplay;
            }

            if (actionsFormat !== undefined) {
                localVarQueryParameter['actions_format'] = actionsFormat;
            }

            if (actionsSince !== undefined) {
                localVarQueryParameter['actions_since'] = actionsSince;
            }

            if (actionsLimit !== undefined) {
                localVarQueryParameter['actions_limit'] = actionsLimit;
            }

            if (actionFields !== undefined) {
                localVarQueryParameter['action_fields'] = actionFields;
            }

            if (actionMember !== undefined) {
                localVarQueryParameter['action_member'] = actionMember;
            }

            if (actionMemberFields !== undefined) {
                localVarQueryParameter['action_member_fields'] = actionMemberFields;
            }

            if (actionMemberCreator !== undefined) {
                localVarQueryParameter['action_memberCreator'] = actionMemberCreator;
            }

            if (actionMemberCreatorFields !== undefined) {
                localVarQueryParameter['action_memberCreator_fields'] = actionMemberCreatorFields;
            }

            if (cards !== undefined) {
                localVarQueryParameter['cards'] = cards;
            }

            if (cardFields !== undefined) {
                localVarQueryParameter['card_fields'] = cardFields;
            }

            if (cardAttachments !== undefined) {
                localVarQueryParameter['card_attachments'] = cardAttachments;
            }

            if (cardAttachmentFields !== undefined) {
                localVarQueryParameter['card_attachment_fields'] = cardAttachmentFields;
            }

            if (cardChecklists !== undefined) {
                localVarQueryParameter['card_checklists'] = cardChecklists;
            }

            if (cardStickers !== undefined) {
                localVarQueryParameter['card_stickers'] = cardStickers;
            }

            if (boardStars !== undefined) {
                localVarQueryParameter['boardStars'] = boardStars;
            }

            if (labels !== undefined) {
                localVarQueryParameter['labels'] = labels;
            }

            if (labelFields !== undefined) {
                localVarQueryParameter['label_fields'] = labelFields;
            }

            if (labelsLimit !== undefined) {
                localVarQueryParameter['labels_limit'] = labelsLimit;
            }

            if (lists !== undefined) {
                localVarQueryParameter['lists'] = lists;
            }

            if (listFields !== undefined) {
                localVarQueryParameter['list_fields'] = listFields;
            }

            if (memberships !== undefined) {
                localVarQueryParameter['memberships'] = memberships;
            }

            if (membershipsMember !== undefined) {
                localVarQueryParameter['memberships_member'] = membershipsMember;
            }

            if (membershipsMemberFields !== undefined) {
                localVarQueryParameter['memberships_member_fields'] = membershipsMemberFields;
            }

            if (members !== undefined) {
                localVarQueryParameter['members'] = members;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (membersInvited !== undefined) {
                localVarQueryParameter['membersInvited'] = membersInvited;
            }

            if (membersInvitedFields !== undefined) {
                localVarQueryParameter['membersInvited_fields'] = membersInvitedFields;
            }

            if (checklists !== undefined) {
                localVarQueryParameter['checklists'] = checklists;
            }

            if (checklistFields !== undefined) {
                localVarQueryParameter['checklist_fields'] = checklistFields;
            }

            if (organization !== undefined) {
                localVarQueryParameter['organization'] = organization;
            }

            if (organizationFields !== undefined) {
                localVarQueryParameter['organization_fields'] = organizationFields;
            }

            if (organizationMemberships !== undefined) {
                localVarQueryParameter['organization_memberships'] = organizationMemberships;
            }

            if (myPrefs !== undefined) {
                localVarQueryParameter['myPrefs'] = myPrefs;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsByIdBoardByField()
         * @param {string} idBoard board_id
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdField: async (idBoard: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getByIdField', 'idBoard', idBoard)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getByIdField', 'field', field)
            const localVarPath = `/boards/{idBoard}/{field}`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsCardsByIdBoard()
         * @param {string} idBoard board_id
         * @param {string} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [attachments] A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments
         * @param {string} [attachmentFields] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
         * @param {string} [stickers]  true or false
         * @param {string} [members]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [checkItemStates]  true or false
         * @param {string} [checklists] One of: all or none
         * @param {string} [limit] a number from 1 to 1000
         * @param {string} [since] A date, or null
         * @param {string} [before] A date, or null
         * @param {string} [filter] One of: all, closed, none, open or visible
         * @param {string} [fields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByIdBoard: async (idBoard: string, actions?: string, attachments?: string, attachmentFields?: string, stickers?: string, members?: string, memberFields?: string, checkItemStates?: string, checklists?: string, limit?: string, since?: string, before?: string, filter?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getCardsByIdBoard', 'idBoard', idBoard)
            const localVarPath = `/boards/{idBoard}/cards`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (actions !== undefined) {
                localVarQueryParameter['actions'] = actions;
            }

            if (attachments !== undefined) {
                localVarQueryParameter['attachments'] = attachments;
            }

            if (attachmentFields !== undefined) {
                localVarQueryParameter['attachment_fields'] = attachmentFields;
            }

            if (stickers !== undefined) {
                localVarQueryParameter['stickers'] = stickers;
            }

            if (members !== undefined) {
                localVarQueryParameter['members'] = members;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (checkItemStates !== undefined) {
                localVarQueryParameter['checkItemStates'] = checkItemStates;
            }

            if (checklists !== undefined) {
                localVarQueryParameter['checklists'] = checklists;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/cards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsCardsByIdBoardByIdCard()
         * @param {string} idBoard board_id
         * @param {string} idCard idCard
         * @param {string} [attachments] A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments
         * @param {string} [attachmentFields] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
         * @param {string} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [actionsEntities]  true or false
         * @param {string} [actionsDisplay]  true or false
         * @param {string} [actionsLimit] a number from 0 to 1000
         * @param {string} [actionFields] all or a comma-separated list of: data, date, idMemberCreator or type
         * @param {string} [actionMemberCreatorFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [members]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [checkItemStates]  true or false
         * @param {string} [checkItemStateFields] all or a comma-separated list of: idCheckItem or state
         * @param {string} [labels]  true or false
         * @param {string} [checklists] One of: all or none
         * @param {string} [checklistFields] all or a comma-separated list of: idBoard, idCard, name or pos
         * @param {string} [fields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByIdBoardByIdCard: async (idBoard: string, idCard: string, attachments?: string, attachmentFields?: string, actions?: string, actionsEntities?: string, actionsDisplay?: string, actionsLimit?: string, actionFields?: string, actionMemberCreatorFields?: string, members?: string, memberFields?: string, checkItemStates?: string, checkItemStateFields?: string, labels?: string, checklists?: string, checklistFields?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getCardsByIdBoardByIdCard', 'idBoard', idBoard)
            // verify required parameter 'idCard' is not null or undefined
            assertParamExists('getCardsByIdBoardByIdCard', 'idCard', idCard)
            const localVarPath = `/boards/{idBoard}/cards/{idCard}`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)))
                .replace(`{${"idCard"}}`, encodeURIComponent(String(idCard !== undefined ? idCard : `-idCard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (attachments !== undefined) {
                localVarQueryParameter['attachments'] = attachments;
            }

            if (attachmentFields !== undefined) {
                localVarQueryParameter['attachment_fields'] = attachmentFields;
            }

            if (actions !== undefined) {
                localVarQueryParameter['actions'] = actions;
            }

            if (actionsEntities !== undefined) {
                localVarQueryParameter['actions_entities'] = actionsEntities;
            }

            if (actionsDisplay !== undefined) {
                localVarQueryParameter['actions_display'] = actionsDisplay;
            }

            if (actionsLimit !== undefined) {
                localVarQueryParameter['actions_limit'] = actionsLimit;
            }

            if (actionFields !== undefined) {
                localVarQueryParameter['action_fields'] = actionFields;
            }

            if (actionMemberCreatorFields !== undefined) {
                localVarQueryParameter['action_memberCreator_fields'] = actionMemberCreatorFields;
            }

            if (members !== undefined) {
                localVarQueryParameter['members'] = members;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (checkItemStates !== undefined) {
                localVarQueryParameter['checkItemStates'] = checkItemStates;
            }

            if (checkItemStateFields !== undefined) {
                localVarQueryParameter['checkItemState_fields'] = checkItemStateFields;
            }

            if (labels !== undefined) {
                localVarQueryParameter['labels'] = labels;
            }

            if (checklists !== undefined) {
                localVarQueryParameter['checklists'] = checklists;
            }

            if (checklistFields !== undefined) {
                localVarQueryParameter['checklist_fields'] = checklistFields;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/cards/{idCard}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsChecklistsByIdBoard()
         * @param {string} idBoard board_id
         * @param {string} [cards] One of: all, closed, none, open or visible
         * @param {string} [cardFields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {string} [checkItems] One of: all or none
         * @param {string} [checkItemFields] all or a comma-separated list of: name, nameData, pos, state or type
         * @param {string} [filter] One of: all or none
         * @param {string} [fields] all or a comma-separated list of: idBoard, idCard, name or pos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChecklistsById: async (idBoard: string, cards?: string, cardFields?: string, checkItems?: string, checkItemFields?: string, filter?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getChecklistsById', 'idBoard', idBoard)
            const localVarPath = `/boards/{idBoard}/checklists`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (cards !== undefined) {
                localVarQueryParameter['cards'] = cards;
            }

            if (cardFields !== undefined) {
                localVarQueryParameter['card_fields'] = cardFields;
            }

            if (checkItems !== undefined) {
                localVarQueryParameter['checkItems'] = checkItems;
            }

            if (checkItemFields !== undefined) {
                localVarQueryParameter['checkItem_fields'] = checkItemFields;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/checklists',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsDeltasByIdBoard()
         * @param {string} idBoard board_id
         * @param {string} tags A valid tag for subscribing
         * @param {string} ixLastUpdate a number from -1 to Infinity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeltasByIdBoard: async (idBoard: string, tags: string, ixLastUpdate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getDeltasByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'tags' is not null or undefined
            assertParamExists('getDeltasByIdBoard', 'tags', tags)
            // verify required parameter 'ixLastUpdate' is not null or undefined
            assertParamExists('getDeltasByIdBoard', 'ixLastUpdate', ixLastUpdate)
            const localVarPath = `/boards/{idBoard}/deltas`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (ixLastUpdate !== undefined) {
                localVarQueryParameter['ixLastUpdate'] = ixLastUpdate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/deltas',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsLabelsByIdBoardByIdLabel()
         * @param {string} idBoard board_id
         * @param {string} idLabel idLabel
         * @param {string} [fields] all or a comma-separated list of: color, idBoard, name or uses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLabelsByIdBoardByIdLabel: async (idBoard: string, idLabel: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getLabelsByIdBoardByIdLabel', 'idBoard', idBoard)
            // verify required parameter 'idLabel' is not null or undefined
            assertParamExists('getLabelsByIdBoardByIdLabel', 'idLabel', idLabel)
            const localVarPath = `/boards/{idBoard}/labels/{idLabel}`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)))
                .replace(`{${"idLabel"}}`, encodeURIComponent(String(idLabel !== undefined ? idLabel : `-idLabel-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/labels/{idLabel}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsListsByIdBoardByFilter()
         * @param {string} idBoard board_id
         * @param {string} filter filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListsByFilter: async (idBoard: string, filter: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getListsByFilter', 'idBoard', idBoard)
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('getListsByFilter', 'filter', filter)
            const localVarPath = `/boards/{idBoard}/lists/{filter}`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)))
                .replace(`{${"filter"}}`, encodeURIComponent(String(filter !== undefined ? filter : `-filter-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/lists/{filter}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsListsByIdBoard()
         * @param {string} idBoard board_id
         * @param {string} [cards] One of: all, closed, none, open or visible
         * @param {string} [cardFields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {string} [filter] One of: all, closed, none or open
         * @param {string} [fields] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListsByIdBoard: async (idBoard: string, cards?: string, cardFields?: string, filter?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getListsByIdBoard', 'idBoard', idBoard)
            const localVarPath = `/boards/{idBoard}/lists`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (cards !== undefined) {
                localVarQueryParameter['cards'] = cards;
            }

            if (cardFields !== undefined) {
                localVarQueryParameter['card_fields'] = cardFields;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/lists',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsMembersByIdBoardByFilter()
         * @param {string} idBoard board_id
         * @param {string} filter filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersByFilter: async (idBoard: string, filter: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getMembersByFilter', 'idBoard', idBoard)
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('getMembersByFilter', 'filter', filter)
            const localVarPath = `/boards/{idBoard}/members/{filter}`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)))
                .replace(`{${"filter"}}`, encodeURIComponent(String(filter !== undefined ? filter : `-filter-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/members/{filter}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsMembersByIdBoard()
         * @param {string} idBoard board_id
         * @param {string} [filter] One of: admins, all, none, normal or owners
         * @param {string} [fields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [activity] true or false ; works for premium organizations only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersByIdBoard: async (idBoard: string, filter?: string, fields?: string, activity?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getMembersByIdBoard', 'idBoard', idBoard)
            const localVarPath = `/boards/{idBoard}/members`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (activity !== undefined) {
                localVarQueryParameter['activity'] = activity;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/members',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsMembersCardsByIdBoardByIdMember()
         * @param {string} idBoard board_id
         * @param {string} idMember idMember
         * @param {string} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [attachments] A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments
         * @param {string} [attachmentFields] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
         * @param {string} [members]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [checkItemStates]  true or false
         * @param {string} [checklists] One of: all or none
         * @param {string} [board]  true or false
         * @param {string} [boardFields] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
         * @param {string} [list]  true or false
         * @param {string} [listFields] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
         * @param {string} [filter] One of: all, closed, none, open or visible
         * @param {string} [fields] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersCardsByIdBoardByIdMember: async (idBoard: string, idMember: string, actions?: string, attachments?: string, attachmentFields?: string, members?: string, memberFields?: string, checkItemStates?: string, checklists?: string, board?: string, boardFields?: string, list?: string, listFields?: string, filter?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getMembersCardsByIdBoardByIdMember', 'idBoard', idBoard)
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('getMembersCardsByIdBoardByIdMember', 'idMember', idMember)
            const localVarPath = `/boards/{idBoard}/members/{idMember}/cards`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)))
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (actions !== undefined) {
                localVarQueryParameter['actions'] = actions;
            }

            if (attachments !== undefined) {
                localVarQueryParameter['attachments'] = attachments;
            }

            if (attachmentFields !== undefined) {
                localVarQueryParameter['attachment_fields'] = attachmentFields;
            }

            if (members !== undefined) {
                localVarQueryParameter['members'] = members;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (checkItemStates !== undefined) {
                localVarQueryParameter['checkItemStates'] = checkItemStates;
            }

            if (checklists !== undefined) {
                localVarQueryParameter['checklists'] = checklists;
            }

            if (board !== undefined) {
                localVarQueryParameter['board'] = board;
            }

            if (boardFields !== undefined) {
                localVarQueryParameter['board_fields'] = boardFields;
            }

            if (list !== undefined) {
                localVarQueryParameter['list'] = list;
            }

            if (listFields !== undefined) {
                localVarQueryParameter['list_fields'] = listFields;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/members/{idMember}/cards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsMembersInvitedByIdBoardByField()
         * @param {string} idBoard board_id
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersInvitedByField: async (idBoard: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getMembersInvitedByField', 'idBoard', idBoard)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getMembersInvitedByField', 'field', field)
            const localVarPath = `/boards/{idBoard}/membersInvited/{field}`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/membersInvited/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsMembersInvitedByIdBoard()
         * @param {string} idBoard board_id
         * @param {string} [fields] all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersInvitedByIdBoard: async (idBoard: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getMembersInvitedByIdBoard', 'idBoard', idBoard)
            const localVarPath = `/boards/{idBoard}/membersInvited`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/membersInvited',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsMembershipsByIdBoard()
         * @param {string} idBoard board_id
         * @param {string} [filter] all or a comma-separated list of: active, admin, deactivated, me or normal
         * @param {string} [member]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembershipsByIdBoard: async (idBoard: string, filter?: string, member?: string, memberFields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getMembershipsByIdBoard', 'idBoard', idBoard)
            const localVarPath = `/boards/{idBoard}/memberships`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (member !== undefined) {
                localVarQueryParameter['member'] = member;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/memberships',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsMembershipsByIdBoardByIdMembership()
         * @param {string} idBoard board_id
         * @param {string} idMembership idMembership
         * @param {string} [member]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembershipsByIdBoardByIdMembership: async (idBoard: string, idMembership: string, member?: string, memberFields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getMembershipsByIdBoardByIdMembership', 'idBoard', idBoard)
            // verify required parameter 'idMembership' is not null or undefined
            assertParamExists('getMembershipsByIdBoardByIdMembership', 'idMembership', idMembership)
            const localVarPath = `/boards/{idBoard}/memberships/{idMembership}`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)))
                .replace(`{${"idMembership"}}`, encodeURIComponent(String(idMembership !== undefined ? idMembership : `-idMembership-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (member !== undefined) {
                localVarQueryParameter['member'] = member;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/memberships/{idMembership}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsMyPrefsByIdBoard()
         * @param {string} idBoard board_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyPrefsById: async (idBoard: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getMyPrefsById', 'idBoard', idBoard)
            const localVarPath = `/boards/{idBoard}/myPrefs`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/myPrefs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsOrganizationByIdBoard()
         * @param {string} idBoard board_id
         * @param {string} [fields] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationById: async (idBoard: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getOrganizationById', 'idBoard', idBoard)
            const localVarPath = `/boards/{idBoard}/organization`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/organization',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsOrganizationByIdBoardByField()
         * @param {string} idBoard board_id
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationByIdBoardByField: async (idBoard: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('getOrganizationByIdBoardByField', 'idBoard', idBoard)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getOrganizationByIdBoardByField', 'field', field)
            const localVarPath = `/boards/{idBoard}/organization/{field}`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/organization/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsActionsByIdBoard()
         * @param {string} idBoard board_id
         * @param {string} [entities]  true or false
         * @param {string} [display]  true or false
         * @param {string} [filter] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
         * @param {string} [fields] all or a comma-separated list of: data, date, idMemberCreator or type
         * @param {string} [limit] a number from 0 to 1000
         * @param {string} [format] One of: count, list or minimal
         * @param {string} [since] A date, null or lastView
         * @param {string} [before] A date, or null
         * @param {string} [page] Page * limit must be less than 1000
         * @param {string} [idModels] Only return actions related to these model ids
         * @param {string} [member]  true or false
         * @param {string} [memberFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {string} [memberCreator]  true or false
         * @param {string} [memberCreatorFields] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActionsByIdBoard: async (idBoard: string, entities?: string, display?: string, filter?: string, fields?: string, limit?: string, format?: string, since?: string, before?: string, page?: string, idModels?: string, member?: string, memberFields?: string, memberCreator?: string, memberCreatorFields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('listActionsByIdBoard', 'idBoard', idBoard)
            const localVarPath = `/boards/{idBoard}/actions`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (entities !== undefined) {
                localVarQueryParameter['entities'] = entities;
            }

            if (display !== undefined) {
                localVarQueryParameter['display'] = display;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (idModels !== undefined) {
                localVarQueryParameter['idModels'] = idModels;
            }

            if (member !== undefined) {
                localVarQueryParameter['member'] = member;
            }

            if (memberFields !== undefined) {
                localVarQueryParameter['member_fields'] = memberFields;
            }

            if (memberCreator !== undefined) {
                localVarQueryParameter['memberCreator'] = memberCreator;
            }

            if (memberCreatorFields !== undefined) {
                localVarQueryParameter['memberCreator_fields'] = memberCreatorFields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/actions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getBoardsLabelsByIdBoard()
         * @param {string} idBoard board_id
         * @param {string} [fields] all or a comma-separated list of: color, idBoard, name or uses
         * @param {string} [limit] a number from 0 to 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLabelsByIdBoard: async (idBoard: string, fields?: string, limit?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('listLabelsByIdBoard', 'idBoard', idBoard)
            const localVarPath = `/boards/{idBoard}/labels`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/labels',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addBoardsMarkAsViewedByIdBoard()
         * @param {string} idBoard board_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsViewedByIdBoard: async (idBoard: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('markAsViewedByIdBoard', 'idBoard', idBoard)
            const localVarPath = `/boards/{idBoard}/markAsViewed`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/markAsViewed',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteBoardsMembersByIdBoardByIdMember()
         * @param {string} idBoard board_id
         * @param {string} idMember idMember
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMember: async (idBoard: string, idMember: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('removeMember', 'idBoard', idBoard)
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('removeMember', 'idMember', idMember)
            const localVarPath = `/boards/{idBoard}/members/{idMember}`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)))
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/members/{idMember}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteBoardsPowerUpsByIdBoardByPowerUp()
         * @param {string} idBoard board_id
         * @param {string} powerUp powerUp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePowerUp: async (idBoard: string, powerUp: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('removePowerUp', 'idBoard', idBoard)
            // verify required parameter 'powerUp' is not null or undefined
            assertParamExists('removePowerUp', 'powerUp', powerUp)
            const localVarPath = `/boards/{idBoard}/powerUps/{powerUp}`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)))
                .replace(`{${"powerUp"}}`, encodeURIComponent(String(powerUp !== undefined ? powerUp : `-powerUp-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/powerUps/{powerUp}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsByIdBoard()
         * @param {string} idBoard board_id
         * @param {Boards} boards Attributes of \&quot;Boards\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (idBoard: string, boards: Boards, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateById', 'idBoard', idBoard)
            // verify required parameter 'boards' is not null or undefined
            assertParamExists('updateById', 'boards', boards)
            const localVarPath = `/boards/{idBoard}`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: boards,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(boards, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsClosedByIdBoard()
         * @param {string} idBoard board_id
         * @param {BoardsClosed} boardsClosed Attributes of \&quot;Boards Closed\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClosedById: async (idBoard: string, boardsClosed: BoardsClosed, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateClosedById', 'idBoard', idBoard)
            // verify required parameter 'boardsClosed' is not null or undefined
            assertParamExists('updateClosedById', 'boardsClosed', boardsClosed)
            const localVarPath = `/boards/{idBoard}/closed`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: boardsClosed,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/closed',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(boardsClosed, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsDescByIdBoard()
         * @param {string} idBoard board_id
         * @param {BoardsDesc} boardsDesc Attributes of \&quot;Boards Desc\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDescriptionByIdBoard: async (idBoard: string, boardsDesc: BoardsDesc, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateDescriptionByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'boardsDesc' is not null or undefined
            assertParamExists('updateDescriptionByIdBoard', 'boardsDesc', boardsDesc)
            const localVarPath = `/boards/{idBoard}/desc`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: boardsDesc,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/desc',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(boardsDesc, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsLabelNamesBlueByIdBoard()
         * @param {string} idBoard board_id
         * @param {LabelNamesBlue} labelNamesBlue Attributes of \&quot;Label Names Blue\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabelNamesBlueById: async (idBoard: string, labelNamesBlue: LabelNamesBlue, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateLabelNamesBlueById', 'idBoard', idBoard)
            // verify required parameter 'labelNamesBlue' is not null or undefined
            assertParamExists('updateLabelNamesBlueById', 'labelNamesBlue', labelNamesBlue)
            const localVarPath = `/boards/{idBoard}/labelNames/blue`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: labelNamesBlue,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/labelNames/blue',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(labelNamesBlue, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsLabelNamesGreenByIdBoard()
         * @param {string} idBoard board_id
         * @param {LabelNamesGreen} labelNamesGreen Attributes of \&quot;Label Names Green\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabelNamesGreenByIdBoardPut: async (idBoard: string, labelNamesGreen: LabelNamesGreen, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateLabelNamesGreenByIdBoardPut', 'idBoard', idBoard)
            // verify required parameter 'labelNamesGreen' is not null or undefined
            assertParamExists('updateLabelNamesGreenByIdBoardPut', 'labelNamesGreen', labelNamesGreen)
            const localVarPath = `/boards/{idBoard}/labelNames/green`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: labelNamesGreen,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/labelNames/green',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(labelNamesGreen, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsLabelNamesOrangeByIdBoard()
         * @param {string} idBoard board_id
         * @param {LabelNamesOrange} labelNamesOrange Attributes of \&quot;Label Names Orange\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabelNamesOrangeByIdBoard: async (idBoard: string, labelNamesOrange: LabelNamesOrange, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateLabelNamesOrangeByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'labelNamesOrange' is not null or undefined
            assertParamExists('updateLabelNamesOrangeByIdBoard', 'labelNamesOrange', labelNamesOrange)
            const localVarPath = `/boards/{idBoard}/labelNames/orange`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: labelNamesOrange,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/labelNames/orange',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(labelNamesOrange, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsLabelNamesPurpleByIdBoard()
         * @param {string} idBoard board_id
         * @param {LabelNamesPurple} labelNamesPurple Attributes of \&quot;Label Names Purple\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabelNamesPurpleByIdBoard: async (idBoard: string, labelNamesPurple: LabelNamesPurple, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateLabelNamesPurpleByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'labelNamesPurple' is not null or undefined
            assertParamExists('updateLabelNamesPurpleByIdBoard', 'labelNamesPurple', labelNamesPurple)
            const localVarPath = `/boards/{idBoard}/labelNames/purple`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: labelNamesPurple,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/labelNames/purple',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(labelNamesPurple, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsLabelNamesRedByIdBoard()
         * @param {string} idBoard board_id
         * @param {LabelNamesRed} labelNamesRed Attributes of \&quot;Label Names Red\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabelNamesRed: async (idBoard: string, labelNamesRed: LabelNamesRed, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateLabelNamesRed', 'idBoard', idBoard)
            // verify required parameter 'labelNamesRed' is not null or undefined
            assertParamExists('updateLabelNamesRed', 'labelNamesRed', labelNamesRed)
            const localVarPath = `/boards/{idBoard}/labelNames/red`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: labelNamesRed,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/labelNames/red',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(labelNamesRed, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsLabelNamesYellowByIdBoard()
         * @param {string} idBoard board_id
         * @param {LabelNamesYellow} labelNamesYellow Attributes of \&quot;Label Names Yellow\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabelNamesYellowByIdBoard: async (idBoard: string, labelNamesYellow: LabelNamesYellow, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateLabelNamesYellowByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'labelNamesYellow' is not null or undefined
            assertParamExists('updateLabelNamesYellowByIdBoard', 'labelNamesYellow', labelNamesYellow)
            const localVarPath = `/boards/{idBoard}/labelNames/yellow`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: labelNamesYellow,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/labelNames/yellow',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(labelNamesYellow, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsMembersByIdBoard()
         * @param {string} idBoard board_id
         * @param {BoardsMembers} boardsMembers Attributes of \&quot;Boards Members\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembersByIdBoard: async (idBoard: string, boardsMembers: BoardsMembers, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateMembersByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'boardsMembers' is not null or undefined
            assertParamExists('updateMembersByIdBoard', 'boardsMembers', boardsMembers)
            const localVarPath = `/boards/{idBoard}/members`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: boardsMembers,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/members',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(boardsMembers, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsMembersByIdBoardByIdMember()
         * @param {string} idBoard board_id
         * @param {string} idMember idMember
         * @param {BoardsMembers} boardsMembers Attributes of \&quot;Boards Members\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembersByIdBoardByIdMember: async (idBoard: string, idMember: string, boardsMembers: BoardsMembers, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateMembersByIdBoardByIdMember', 'idBoard', idBoard)
            // verify required parameter 'idMember' is not null or undefined
            assertParamExists('updateMembersByIdBoardByIdMember', 'idMember', idMember)
            // verify required parameter 'boardsMembers' is not null or undefined
            assertParamExists('updateMembersByIdBoardByIdMember', 'boardsMembers', boardsMembers)
            const localVarPath = `/boards/{idBoard}/members/{idMember}`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)))
                .replace(`{${"idMember"}}`, encodeURIComponent(String(idMember !== undefined ? idMember : `-idMember-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: boardsMembers,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/members/{idMember}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(boardsMembers, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsMembershipsByIdBoardByIdMembership()
         * @param {string} idBoard board_id
         * @param {string} idMembership idMembership
         * @param {BoardsMemberships} boardsMemberships Attributes of \&quot;Boards Memberships\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembershipsByIdBoardByIdMembership: async (idBoard: string, idMembership: string, boardsMemberships: BoardsMemberships, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateMembershipsByIdBoardByIdMembership', 'idBoard', idBoard)
            // verify required parameter 'idMembership' is not null or undefined
            assertParamExists('updateMembershipsByIdBoardByIdMembership', 'idMembership', idMembership)
            // verify required parameter 'boardsMemberships' is not null or undefined
            assertParamExists('updateMembershipsByIdBoardByIdMembership', 'boardsMemberships', boardsMemberships)
            const localVarPath = `/boards/{idBoard}/memberships/{idMembership}`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)))
                .replace(`{${"idMembership"}}`, encodeURIComponent(String(idMembership !== undefined ? idMembership : `-idMembership-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: boardsMemberships,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/memberships/{idMembership}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(boardsMemberships, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsMyPrefsIdEmailListByIdBoard()
         * @param {string} idBoard board_id
         * @param {MyPrefsIdEmailList} myPrefsIdEmailList Attributes of \&quot;My Prefs Id Email List\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyPrefsEmailListByIdBoard: async (idBoard: string, myPrefsIdEmailList: MyPrefsIdEmailList, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateMyPrefsEmailListByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'myPrefsIdEmailList' is not null or undefined
            assertParamExists('updateMyPrefsEmailListByIdBoard', 'myPrefsIdEmailList', myPrefsIdEmailList)
            const localVarPath = `/boards/{idBoard}/myPrefs/idEmailList`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: myPrefsIdEmailList,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/myPrefs/idEmailList',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(myPrefsIdEmailList, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsMyPrefsEmailPositionByIdBoard()
         * @param {string} idBoard board_id
         * @param {MyPrefsEmailPosition} myPrefsEmailPosition Attributes of \&quot;My Prefs Email Position\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyPrefsEmailPositionByIdBoard: async (idBoard: string, myPrefsEmailPosition: MyPrefsEmailPosition, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateMyPrefsEmailPositionByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'myPrefsEmailPosition' is not null or undefined
            assertParamExists('updateMyPrefsEmailPositionByIdBoard', 'myPrefsEmailPosition', myPrefsEmailPosition)
            const localVarPath = `/boards/{idBoard}/myPrefs/emailPosition`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: myPrefsEmailPosition,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/myPrefs/emailPosition',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(myPrefsEmailPosition, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsMyPrefsShowListGuideByIdBoard()
         * @param {string} idBoard board_id
         * @param {MyPrefsShowListGuide} myPrefsShowListGuide Attributes of \&quot;My Prefs Show List Guide\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyPrefsShowListGuideByIdBoard: async (idBoard: string, myPrefsShowListGuide: MyPrefsShowListGuide, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateMyPrefsShowListGuideByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'myPrefsShowListGuide' is not null or undefined
            assertParamExists('updateMyPrefsShowListGuideByIdBoard', 'myPrefsShowListGuide', myPrefsShowListGuide)
            const localVarPath = `/boards/{idBoard}/myPrefs/showListGuide`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: myPrefsShowListGuide,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/myPrefs/showListGuide',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(myPrefsShowListGuide, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsMyPrefsShowSidebarByIdBoard()
         * @param {string} idBoard board_id
         * @param {MyPrefsShowSidebar} myPrefsShowSidebar Attributes of \&quot;My Prefs Show Sidebar\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyPrefsShowSidebar: async (idBoard: string, myPrefsShowSidebar: MyPrefsShowSidebar, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateMyPrefsShowSidebar', 'idBoard', idBoard)
            // verify required parameter 'myPrefsShowSidebar' is not null or undefined
            assertParamExists('updateMyPrefsShowSidebar', 'myPrefsShowSidebar', myPrefsShowSidebar)
            const localVarPath = `/boards/{idBoard}/myPrefs/showSidebar`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: myPrefsShowSidebar,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/myPrefs/showSidebar',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(myPrefsShowSidebar, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard()
         * @param {string} idBoard board_id
         * @param {MyPrefsShowSidebarBoardActions} myPrefsShowSidebarBoardActions Attributes of \&quot;My Prefs Show Sidebar Board Actions\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyPrefsShowSidebarActionsByIdBoard: async (idBoard: string, myPrefsShowSidebarBoardActions: MyPrefsShowSidebarBoardActions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateMyPrefsShowSidebarActionsByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'myPrefsShowSidebarBoardActions' is not null or undefined
            assertParamExists('updateMyPrefsShowSidebarActionsByIdBoard', 'myPrefsShowSidebarBoardActions', myPrefsShowSidebarBoardActions)
            const localVarPath = `/boards/{idBoard}/myPrefs/showSidebarBoardActions`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: myPrefsShowSidebarBoardActions,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/myPrefs/showSidebarBoardActions',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(myPrefsShowSidebarBoardActions, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsMyPrefsShowSidebarActivityByIdBoard()
         * @param {string} idBoard board_id
         * @param {MyPrefsShowSidebarActivity} myPrefsShowSidebarActivity Attributes of \&quot;My Prefs Show Sidebar Activity\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyPrefsShowSidebarActivityByIdBoard: async (idBoard: string, myPrefsShowSidebarActivity: MyPrefsShowSidebarActivity, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateMyPrefsShowSidebarActivityByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'myPrefsShowSidebarActivity' is not null or undefined
            assertParamExists('updateMyPrefsShowSidebarActivityByIdBoard', 'myPrefsShowSidebarActivity', myPrefsShowSidebarActivity)
            const localVarPath = `/boards/{idBoard}/myPrefs/showSidebarActivity`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: myPrefsShowSidebarActivity,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/myPrefs/showSidebarActivity',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(myPrefsShowSidebarActivity, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsNameByIdBoard()
         * @param {string} idBoard board_id
         * @param {BoardsName} boardsName Attributes of \&quot;Boards Name\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNameById: async (idBoard: string, boardsName: BoardsName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateNameById', 'idBoard', idBoard)
            // verify required parameter 'boardsName' is not null or undefined
            assertParamExists('updateNameById', 'boardsName', boardsName)
            const localVarPath = `/boards/{idBoard}/name`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: boardsName,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/name',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(boardsName, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsIdOrganizationByIdBoard()
         * @param {string} idBoard board_id
         * @param {BoardsIdOrganization} boardsIdOrganization Attributes of \&quot;Boards Id Organization\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationByIdBoard: async (idBoard: string, boardsIdOrganization: BoardsIdOrganization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateOrganizationByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'boardsIdOrganization' is not null or undefined
            assertParamExists('updateOrganizationByIdBoard', 'boardsIdOrganization', boardsIdOrganization)
            const localVarPath = `/boards/{idBoard}/idOrganization`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: boardsIdOrganization,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/idOrganization',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(boardsIdOrganization, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsPrefsBackgroundByIdBoard()
         * @param {string} idBoard board_id
         * @param {PrefsBackground} prefsBackground Attributes of \&quot;Prefs Background\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsBackgroundByIdBoard: async (idBoard: string, prefsBackground: PrefsBackground, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updatePrefsBackgroundByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'prefsBackground' is not null or undefined
            assertParamExists('updatePrefsBackgroundByIdBoard', 'prefsBackground', prefsBackground)
            const localVarPath = `/boards/{idBoard}/prefs/background`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsBackground,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/prefs/background',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsBackground, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsPrefsCalendarFeedEnabledByIdBoard()
         * @param {string} idBoard board_id
         * @param {PrefsCalendarFeedEnabled} prefsCalendarFeedEnabled Attributes of \&quot;Prefs Calendar Feed Enabled\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsCalendarFeedEnabledById: async (idBoard: string, prefsCalendarFeedEnabled: PrefsCalendarFeedEnabled, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updatePrefsCalendarFeedEnabledById', 'idBoard', idBoard)
            // verify required parameter 'prefsCalendarFeedEnabled' is not null or undefined
            assertParamExists('updatePrefsCalendarFeedEnabledById', 'prefsCalendarFeedEnabled', prefsCalendarFeedEnabled)
            const localVarPath = `/boards/{idBoard}/prefs/calendarFeedEnabled`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsCalendarFeedEnabled,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/prefs/calendarFeedEnabled',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsCalendarFeedEnabled, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsPrefsCardAgingByIdBoard()
         * @param {string} idBoard board_id
         * @param {PrefsCardAging} prefsCardAging Attributes of \&quot;Prefs Card Aging\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsCardAgingByIdBoard: async (idBoard: string, prefsCardAging: PrefsCardAging, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updatePrefsCardAgingByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'prefsCardAging' is not null or undefined
            assertParamExists('updatePrefsCardAgingByIdBoard', 'prefsCardAging', prefsCardAging)
            const localVarPath = `/boards/{idBoard}/prefs/cardAging`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsCardAging,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/prefs/cardAging',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsCardAging, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsPrefsCardCoversByIdBoard()
         * @param {string} idBoard board_id
         * @param {PrefsCardCovers} prefsCardCovers Attributes of \&quot;Prefs Card Covers\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsCardCoversByIdBoard: async (idBoard: string, prefsCardCovers: PrefsCardCovers, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updatePrefsCardCoversByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'prefsCardCovers' is not null or undefined
            assertParamExists('updatePrefsCardCoversByIdBoard', 'prefsCardCovers', prefsCardCovers)
            const localVarPath = `/boards/{idBoard}/prefs/cardCovers`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsCardCovers,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/prefs/cardCovers',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsCardCovers, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsPrefsCommentsByIdBoard()
         * @param {string} idBoard board_id
         * @param {PrefsComments} prefsComments Attributes of \&quot;Prefs Comments\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsCommentsByIdBoard: async (idBoard: string, prefsComments: PrefsComments, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updatePrefsCommentsByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'prefsComments' is not null or undefined
            assertParamExists('updatePrefsCommentsByIdBoard', 'prefsComments', prefsComments)
            const localVarPath = `/boards/{idBoard}/prefs/comments`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsComments,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/prefs/comments',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsComments, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsPrefsInvitationsByIdBoard()
         * @param {string} idBoard board_id
         * @param {PrefsInvitations} prefsInvitations Attributes of \&quot;Prefs Invitations\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsInvitationsByIdBoard: async (idBoard: string, prefsInvitations: PrefsInvitations, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updatePrefsInvitationsByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'prefsInvitations' is not null or undefined
            assertParamExists('updatePrefsInvitationsByIdBoard', 'prefsInvitations', prefsInvitations)
            const localVarPath = `/boards/{idBoard}/prefs/invitations`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsInvitations,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/prefs/invitations',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsInvitations, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsPrefsPermissionLevelByIdBoard()
         * @param {string} idBoard board_id
         * @param {PrefsPermissionLevel} prefsPermissionLevel Attributes of \&quot;Prefs Permission Level\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsPermissionLevelById: async (idBoard: string, prefsPermissionLevel: PrefsPermissionLevel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updatePrefsPermissionLevelById', 'idBoard', idBoard)
            // verify required parameter 'prefsPermissionLevel' is not null or undefined
            assertParamExists('updatePrefsPermissionLevelById', 'prefsPermissionLevel', prefsPermissionLevel)
            const localVarPath = `/boards/{idBoard}/prefs/permissionLevel`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsPermissionLevel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/prefs/permissionLevel',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsPermissionLevel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsPrefsSelfJoinByIdBoard()
         * @param {string} idBoard board_id
         * @param {PrefsSelfJoin} prefsSelfJoin Attributes of \&quot;Prefs Self Join\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsSelfJoinByIdBoard: async (idBoard: string, prefsSelfJoin: PrefsSelfJoin, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updatePrefsSelfJoinByIdBoard', 'idBoard', idBoard)
            // verify required parameter 'prefsSelfJoin' is not null or undefined
            assertParamExists('updatePrefsSelfJoinByIdBoard', 'prefsSelfJoin', prefsSelfJoin)
            const localVarPath = `/boards/{idBoard}/prefs/selfJoin`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsSelfJoin,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/prefs/selfJoin',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsSelfJoin, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsMyPrefsShowSidebarMembersByIdBoard()
         * @param {string} idBoard board_id
         * @param {MyPrefsShowSidebarMembers} myPrefsShowSidebarMembers Attributes of \&quot;My Prefs Show Sidebar Members\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsShowSidebarMembersById: async (idBoard: string, myPrefsShowSidebarMembers: MyPrefsShowSidebarMembers, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updatePrefsShowSidebarMembersById', 'idBoard', idBoard)
            // verify required parameter 'myPrefsShowSidebarMembers' is not null or undefined
            assertParamExists('updatePrefsShowSidebarMembersById', 'myPrefsShowSidebarMembers', myPrefsShowSidebarMembers)
            const localVarPath = `/boards/{idBoard}/myPrefs/showSidebarMembers`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: myPrefsShowSidebarMembers,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/myPrefs/showSidebarMembers',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(myPrefsShowSidebarMembers, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsSubscribedByIdBoard()
         * @param {string} idBoard board_id
         * @param {BoardsSubscribed} boardsSubscribed Attributes of \&quot;Boards Subscribed\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscribedById: async (idBoard: string, boardsSubscribed: BoardsSubscribed, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateSubscribedById', 'idBoard', idBoard)
            // verify required parameter 'boardsSubscribed' is not null or undefined
            assertParamExists('updateSubscribedById', 'boardsSubscribed', boardsSubscribed)
            const localVarPath = `/boards/{idBoard}/subscribed`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: boardsSubscribed,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/subscribed',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(boardsSubscribed, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBoardsPrefsVotingByIdBoard()
         * @param {string} idBoard board_id
         * @param {PrefsVoting} prefsVoting Attributes of \&quot;Prefs Voting\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVotingPrefsById: async (idBoard: string, prefsVoting: PrefsVoting, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idBoard' is not null or undefined
            assertParamExists('updateVotingPrefsById', 'idBoard', idBoard)
            // verify required parameter 'prefsVoting' is not null or undefined
            assertParamExists('updateVotingPrefsById', 'prefsVoting', prefsVoting)
            const localVarPath = `/boards/{idBoard}/prefs/voting`
                .replace(`{${"idBoard"}}`, encodeURIComponent(String(idBoard !== undefined ? idBoard : `-idBoard-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prefsVoting,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/boards/{idBoard}/prefs/voting',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prefsVoting, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoardApi - functional programming interface
 * @export
 */
export const BoardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary addBoardsChecklistsByIdBoard()
         * @param {BoardApiAddChecklistsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addChecklists(requestParameters: BoardApiAddChecklistsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const boardsChecklists: BoardsChecklists = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addChecklists(requestParameters.idBoard, boardsChecklists, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addBoardsLabelsByIdBoard()
         * @param {BoardApiAddLabelsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addLabelsByIdBoard(requestParameters: BoardApiAddLabelsByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const boardsLabels: BoardsLabels = {
                color: requestParameters.color,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addLabelsByIdBoard(requestParameters.idBoard, boardsLabels, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addBoardsPowerUpsByIdBoard()
         * @param {BoardApiAddPowerUpsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPowerUpsByIdBoard(requestParameters: BoardApiAddPowerUpsByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const boardsPowerUps: BoardsPowerUps = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPowerUpsByIdBoard(requestParameters.idBoard, boardsPowerUps, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addBoards()
         * @param {BoardApiCreateBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBoard(requestParameters: BoardApiCreateBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const boards: Boards = {
                closed: requestParameters.closed,
                desc: requestParameters.desc,
                idBoardSource: requestParameters.idBoardSource,
                idOrganization: requestParameters.idOrganization,
                keepFromSource: requestParameters.keepFromSource,
                labelNames/blue: requestParameters.labelNames/blue,
                labelNames/green: requestParameters.labelNames/green,
                labelNames/orange: requestParameters.labelNames/orange,
                labelNames/purple: requestParameters.labelNames/purple,
                labelNames/red: requestParameters.labelNames/red,
                labelNames/yellow: requestParameters.labelNames/yellow,
                name: requestParameters.name,
                powerUps: requestParameters.powerUps,
                prefs/background: requestParameters.prefs/background,
                prefs/calendarFeedEnabled: requestParameters.prefs/calendarFeedEnabled,
                prefs/cardAging: requestParameters.prefs/cardAging,
                prefs/cardCovers: requestParameters.prefs/cardCovers,
                prefs/comments: requestParameters.prefs/comments,
                prefs/invitations: requestParameters.prefs/invitations,
                prefs/permissionLevel: requestParameters.prefs/permissionLevel,
                prefs/selfJoin: requestParameters.prefs/selfJoin,
                prefs/voting: requestParameters.prefs/voting,
                prefs_background: requestParameters.prefs_background,
                prefs_cardAging: requestParameters.prefs_cardAging,
                prefs_cardCovers: requestParameters.prefs_cardCovers,
                prefs_comments: requestParameters.prefs_comments,
                prefs_invitations: requestParameters.prefs_invitations,
                prefs_permissionLevel: requestParameters.prefs_permissionLevel,
                prefs_selfJoin: requestParameters.prefs_selfJoin,
                prefs_voting: requestParameters.prefs_voting,
                subscribed: requestParameters.subscribed
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBoard(boards, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addBoardsListsByIdBoard()
         * @param {BoardApiCreateListsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createListsByIdBoard(requestParameters: BoardApiCreateListsByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const boardsLists: BoardsLists = {
                name: requestParameters.name,
                pos: requestParameters.pos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createListsByIdBoard(requestParameters.idBoard, boardsLists, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsCardsByIdBoardByFilter()
         * @param {BoardApiFilterCardsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filterCardsByIdBoard(requestParameters: BoardApiFilterCardsByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filterCardsByIdBoard(requestParameters.idBoard, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addBoardsCalendarKeyGenerateByIdBoard()
         * @param {BoardApiGenerateCalendarKeyByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateCalendarKeyById(requestParameters: BoardApiGenerateCalendarKeyByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateCalendarKeyById(requestParameters.idBoard, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addBoardsEmailKeyGenerateByIdBoard()
         * @param {BoardApiGenerateEmailKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateEmailKey(requestParameters: BoardApiGenerateEmailKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateEmailKey(requestParameters.idBoard, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsBoardStarsByIdBoard()
         * @param {BoardApiGetBoardStarsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBoardStarsById(requestParameters: BoardApiGetBoardStarsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBoardStarsById(requestParameters.idBoard, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsByIdBoard()
         * @param {BoardApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: BoardApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.idBoard, requestParameters.actions, requestParameters.actionsEntities, requestParameters.actionsDisplay, requestParameters.actionsFormat, requestParameters.actionsSince, requestParameters.actionsLimit, requestParameters.actionFields, requestParameters.actionMember, requestParameters.actionMemberFields, requestParameters.actionMemberCreator, requestParameters.actionMemberCreatorFields, requestParameters.cards, requestParameters.cardFields, requestParameters.cardAttachments, requestParameters.cardAttachmentFields, requestParameters.cardChecklists, requestParameters.cardStickers, requestParameters.boardStars, requestParameters.labels, requestParameters.labelFields, requestParameters.labelsLimit, requestParameters.lists, requestParameters.listFields, requestParameters.memberships, requestParameters.membershipsMember, requestParameters.membershipsMemberFields, requestParameters.members, requestParameters.memberFields, requestParameters.membersInvited, requestParameters.membersInvitedFields, requestParameters.checklists, requestParameters.checklistFields, requestParameters.organization, requestParameters.organizationFields, requestParameters.organizationMemberships, requestParameters.myPrefs, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsByIdBoardByField()
         * @param {BoardApiGetByIdFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdField(requestParameters: BoardApiGetByIdFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdField(requestParameters.idBoard, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsCardsByIdBoard()
         * @param {BoardApiGetCardsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardsByIdBoard(requestParameters: BoardApiGetCardsByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardsByIdBoard(requestParameters.idBoard, requestParameters.actions, requestParameters.attachments, requestParameters.attachmentFields, requestParameters.stickers, requestParameters.members, requestParameters.memberFields, requestParameters.checkItemStates, requestParameters.checklists, requestParameters.limit, requestParameters.since, requestParameters.before, requestParameters.filter, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsCardsByIdBoardByIdCard()
         * @param {BoardApiGetCardsByIdBoardByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardsByIdBoardByIdCard(requestParameters: BoardApiGetCardsByIdBoardByIdCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardsByIdBoardByIdCard(requestParameters.idBoard, requestParameters.idCard, requestParameters.attachments, requestParameters.attachmentFields, requestParameters.actions, requestParameters.actionsEntities, requestParameters.actionsDisplay, requestParameters.actionsLimit, requestParameters.actionFields, requestParameters.actionMemberCreatorFields, requestParameters.members, requestParameters.memberFields, requestParameters.checkItemStates, requestParameters.checkItemStateFields, requestParameters.labels, requestParameters.checklists, requestParameters.checklistFields, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsChecklistsByIdBoard()
         * @param {BoardApiGetChecklistsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChecklistsById(requestParameters: BoardApiGetChecklistsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChecklistsById(requestParameters.idBoard, requestParameters.cards, requestParameters.cardFields, requestParameters.checkItems, requestParameters.checkItemFields, requestParameters.filter, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsDeltasByIdBoard()
         * @param {BoardApiGetDeltasByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeltasByIdBoard(requestParameters: BoardApiGetDeltasByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeltasByIdBoard(requestParameters.idBoard, requestParameters.tags, requestParameters.ixLastUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsLabelsByIdBoardByIdLabel()
         * @param {BoardApiGetLabelsByIdBoardByIdLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLabelsByIdBoardByIdLabel(requestParameters: BoardApiGetLabelsByIdBoardByIdLabelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLabelsByIdBoardByIdLabel(requestParameters.idBoard, requestParameters.idLabel, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsListsByIdBoardByFilter()
         * @param {BoardApiGetListsByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListsByFilter(requestParameters: BoardApiGetListsByFilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListsByFilter(requestParameters.idBoard, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsListsByIdBoard()
         * @param {BoardApiGetListsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListsByIdBoard(requestParameters: BoardApiGetListsByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListsByIdBoard(requestParameters.idBoard, requestParameters.cards, requestParameters.cardFields, requestParameters.filter, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsMembersByIdBoardByFilter()
         * @param {BoardApiGetMembersByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembersByFilter(requestParameters: BoardApiGetMembersByFilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembersByFilter(requestParameters.idBoard, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsMembersByIdBoard()
         * @param {BoardApiGetMembersByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembersByIdBoard(requestParameters: BoardApiGetMembersByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembersByIdBoard(requestParameters.idBoard, requestParameters.filter, requestParameters.fields, requestParameters.activity, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsMembersCardsByIdBoardByIdMember()
         * @param {BoardApiGetMembersCardsByIdBoardByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembersCardsByIdBoardByIdMember(requestParameters: BoardApiGetMembersCardsByIdBoardByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembersCardsByIdBoardByIdMember(requestParameters.idBoard, requestParameters.idMember, requestParameters.actions, requestParameters.attachments, requestParameters.attachmentFields, requestParameters.members, requestParameters.memberFields, requestParameters.checkItemStates, requestParameters.checklists, requestParameters.board, requestParameters.boardFields, requestParameters.list, requestParameters.listFields, requestParameters.filter, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsMembersInvitedByIdBoardByField()
         * @param {BoardApiGetMembersInvitedByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembersInvitedByField(requestParameters: BoardApiGetMembersInvitedByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembersInvitedByField(requestParameters.idBoard, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsMembersInvitedByIdBoard()
         * @param {BoardApiGetMembersInvitedByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembersInvitedByIdBoard(requestParameters: BoardApiGetMembersInvitedByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembersInvitedByIdBoard(requestParameters.idBoard, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsMembershipsByIdBoard()
         * @param {BoardApiGetMembershipsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembershipsByIdBoard(requestParameters: BoardApiGetMembershipsByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembershipsByIdBoard(requestParameters.idBoard, requestParameters.filter, requestParameters.member, requestParameters.memberFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsMembershipsByIdBoardByIdMembership()
         * @param {BoardApiGetMembershipsByIdBoardByIdMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembershipsByIdBoardByIdMembership(requestParameters: BoardApiGetMembershipsByIdBoardByIdMembershipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembershipsByIdBoardByIdMembership(requestParameters.idBoard, requestParameters.idMembership, requestParameters.member, requestParameters.memberFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsMyPrefsByIdBoard()
         * @param {BoardApiGetMyPrefsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyPrefsById(requestParameters: BoardApiGetMyPrefsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyPrefsById(requestParameters.idBoard, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsOrganizationByIdBoard()
         * @param {BoardApiGetOrganizationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationById(requestParameters: BoardApiGetOrganizationByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationById(requestParameters.idBoard, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsOrganizationByIdBoardByField()
         * @param {BoardApiGetOrganizationByIdBoardByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationByIdBoardByField(requestParameters: BoardApiGetOrganizationByIdBoardByFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationByIdBoardByField(requestParameters.idBoard, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsActionsByIdBoard()
         * @param {BoardApiListActionsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listActionsByIdBoard(requestParameters: BoardApiListActionsByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listActionsByIdBoard(requestParameters.idBoard, requestParameters.entities, requestParameters.display, requestParameters.filter, requestParameters.fields, requestParameters.limit, requestParameters.format, requestParameters.since, requestParameters.before, requestParameters.page, requestParameters.idModels, requestParameters.member, requestParameters.memberFields, requestParameters.memberCreator, requestParameters.memberCreatorFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getBoardsLabelsByIdBoard()
         * @param {BoardApiListLabelsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLabelsByIdBoard(requestParameters: BoardApiListLabelsByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLabelsByIdBoard(requestParameters.idBoard, requestParameters.fields, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary addBoardsMarkAsViewedByIdBoard()
         * @param {BoardApiMarkAsViewedByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAsViewedByIdBoard(requestParameters: BoardApiMarkAsViewedByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markAsViewedByIdBoard(requestParameters.idBoard, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteBoardsMembersByIdBoardByIdMember()
         * @param {BoardApiRemoveMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMember(requestParameters: BoardApiRemoveMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMember(requestParameters.idBoard, requestParameters.idMember, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteBoardsPowerUpsByIdBoardByPowerUp()
         * @param {BoardApiRemovePowerUpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePowerUp(requestParameters: BoardApiRemovePowerUpRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePowerUp(requestParameters.idBoard, requestParameters.powerUp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsByIdBoard()
         * @param {BoardApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: BoardApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const boards: Boards = {
                closed: requestParameters.closed,
                desc: requestParameters.desc,
                idBoardSource: requestParameters.idBoardSource,
                idOrganization: requestParameters.idOrganization,
                keepFromSource: requestParameters.keepFromSource,
                labelNames/blue: requestParameters.labelNames/blue,
                labelNames/green: requestParameters.labelNames/green,
                labelNames/orange: requestParameters.labelNames/orange,
                labelNames/purple: requestParameters.labelNames/purple,
                labelNames/red: requestParameters.labelNames/red,
                labelNames/yellow: requestParameters.labelNames/yellow,
                name: requestParameters.name,
                powerUps: requestParameters.powerUps,
                prefs/background: requestParameters.prefs/background,
                prefs/calendarFeedEnabled: requestParameters.prefs/calendarFeedEnabled,
                prefs/cardAging: requestParameters.prefs/cardAging,
                prefs/cardCovers: requestParameters.prefs/cardCovers,
                prefs/comments: requestParameters.prefs/comments,
                prefs/invitations: requestParameters.prefs/invitations,
                prefs/permissionLevel: requestParameters.prefs/permissionLevel,
                prefs/selfJoin: requestParameters.prefs/selfJoin,
                prefs/voting: requestParameters.prefs/voting,
                prefs_background: requestParameters.prefs_background,
                prefs_cardAging: requestParameters.prefs_cardAging,
                prefs_cardCovers: requestParameters.prefs_cardCovers,
                prefs_comments: requestParameters.prefs_comments,
                prefs_invitations: requestParameters.prefs_invitations,
                prefs_permissionLevel: requestParameters.prefs_permissionLevel,
                prefs_selfJoin: requestParameters.prefs_selfJoin,
                prefs_voting: requestParameters.prefs_voting,
                subscribed: requestParameters.subscribed
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.idBoard, boards, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsClosedByIdBoard()
         * @param {BoardApiUpdateClosedByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClosedById(requestParameters: BoardApiUpdateClosedByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const boardsClosed: BoardsClosed = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClosedById(requestParameters.idBoard, boardsClosed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsDescByIdBoard()
         * @param {BoardApiUpdateDescriptionByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDescriptionByIdBoard(requestParameters: BoardApiUpdateDescriptionByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const boardsDesc: BoardsDesc = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDescriptionByIdBoard(requestParameters.idBoard, boardsDesc, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsLabelNamesBlueByIdBoard()
         * @param {BoardApiUpdateLabelNamesBlueByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLabelNamesBlueById(requestParameters: BoardApiUpdateLabelNamesBlueByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const labelNamesBlue: LabelNamesBlue = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLabelNamesBlueById(requestParameters.idBoard, labelNamesBlue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsLabelNamesGreenByIdBoard()
         * @param {BoardApiUpdateLabelNamesGreenByIdBoardPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLabelNamesGreenByIdBoardPut(requestParameters: BoardApiUpdateLabelNamesGreenByIdBoardPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const labelNamesGreen: LabelNamesGreen = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLabelNamesGreenByIdBoardPut(requestParameters.idBoard, labelNamesGreen, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsLabelNamesOrangeByIdBoard()
         * @param {BoardApiUpdateLabelNamesOrangeByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLabelNamesOrangeByIdBoard(requestParameters: BoardApiUpdateLabelNamesOrangeByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const labelNamesOrange: LabelNamesOrange = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLabelNamesOrangeByIdBoard(requestParameters.idBoard, labelNamesOrange, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsLabelNamesPurpleByIdBoard()
         * @param {BoardApiUpdateLabelNamesPurpleByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLabelNamesPurpleByIdBoard(requestParameters: BoardApiUpdateLabelNamesPurpleByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const labelNamesPurple: LabelNamesPurple = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLabelNamesPurpleByIdBoard(requestParameters.idBoard, labelNamesPurple, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsLabelNamesRedByIdBoard()
         * @param {BoardApiUpdateLabelNamesRedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLabelNamesRed(requestParameters: BoardApiUpdateLabelNamesRedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const labelNamesRed: LabelNamesRed = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLabelNamesRed(requestParameters.idBoard, labelNamesRed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsLabelNamesYellowByIdBoard()
         * @param {BoardApiUpdateLabelNamesYellowByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLabelNamesYellowByIdBoard(requestParameters: BoardApiUpdateLabelNamesYellowByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const labelNamesYellow: LabelNamesYellow = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLabelNamesYellowByIdBoard(requestParameters.idBoard, labelNamesYellow, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsMembersByIdBoard()
         * @param {BoardApiUpdateMembersByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMembersByIdBoard(requestParameters: BoardApiUpdateMembersByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const boardsMembers: BoardsMembers = {
                email: requestParameters.email,
                fullName: requestParameters.fullName,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMembersByIdBoard(requestParameters.idBoard, boardsMembers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsMembersByIdBoardByIdMember()
         * @param {BoardApiUpdateMembersByIdBoardByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMembersByIdBoardByIdMember(requestParameters: BoardApiUpdateMembersByIdBoardByIdMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const boardsMembers: BoardsMembers = {
                email: requestParameters.email,
                fullName: requestParameters.fullName,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMembersByIdBoardByIdMember(requestParameters.idBoard, requestParameters.idMember, boardsMembers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsMembershipsByIdBoardByIdMembership()
         * @param {BoardApiUpdateMembershipsByIdBoardByIdMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMembershipsByIdBoardByIdMembership(requestParameters: BoardApiUpdateMembershipsByIdBoardByIdMembershipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const boardsMemberships: BoardsMemberships = {
                member_fields: requestParameters.member_fields,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMembershipsByIdBoardByIdMembership(requestParameters.idBoard, requestParameters.idMembership, boardsMemberships, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsMyPrefsIdEmailListByIdBoard()
         * @param {BoardApiUpdateMyPrefsEmailListByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMyPrefsEmailListByIdBoard(requestParameters: BoardApiUpdateMyPrefsEmailListByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const myPrefsIdEmailList: MyPrefsIdEmailList = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMyPrefsEmailListByIdBoard(requestParameters.idBoard, myPrefsIdEmailList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsMyPrefsEmailPositionByIdBoard()
         * @param {BoardApiUpdateMyPrefsEmailPositionByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMyPrefsEmailPositionByIdBoard(requestParameters: BoardApiUpdateMyPrefsEmailPositionByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const myPrefsEmailPosition: MyPrefsEmailPosition = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMyPrefsEmailPositionByIdBoard(requestParameters.idBoard, myPrefsEmailPosition, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsMyPrefsShowListGuideByIdBoard()
         * @param {BoardApiUpdateMyPrefsShowListGuideByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMyPrefsShowListGuideByIdBoard(requestParameters: BoardApiUpdateMyPrefsShowListGuideByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const myPrefsShowListGuide: MyPrefsShowListGuide = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMyPrefsShowListGuideByIdBoard(requestParameters.idBoard, myPrefsShowListGuide, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsMyPrefsShowSidebarByIdBoard()
         * @param {BoardApiUpdateMyPrefsShowSidebarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMyPrefsShowSidebar(requestParameters: BoardApiUpdateMyPrefsShowSidebarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const myPrefsShowSidebar: MyPrefsShowSidebar = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMyPrefsShowSidebar(requestParameters.idBoard, myPrefsShowSidebar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard()
         * @param {BoardApiUpdateMyPrefsShowSidebarActionsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMyPrefsShowSidebarActionsByIdBoard(requestParameters: BoardApiUpdateMyPrefsShowSidebarActionsByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const myPrefsShowSidebarBoardActions: MyPrefsShowSidebarBoardActions = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMyPrefsShowSidebarActionsByIdBoard(requestParameters.idBoard, myPrefsShowSidebarBoardActions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsMyPrefsShowSidebarActivityByIdBoard()
         * @param {BoardApiUpdateMyPrefsShowSidebarActivityByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMyPrefsShowSidebarActivityByIdBoard(requestParameters: BoardApiUpdateMyPrefsShowSidebarActivityByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const myPrefsShowSidebarActivity: MyPrefsShowSidebarActivity = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMyPrefsShowSidebarActivityByIdBoard(requestParameters.idBoard, myPrefsShowSidebarActivity, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsNameByIdBoard()
         * @param {BoardApiUpdateNameByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNameById(requestParameters: BoardApiUpdateNameByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const boardsName: BoardsName = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNameById(requestParameters.idBoard, boardsName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsIdOrganizationByIdBoard()
         * @param {BoardApiUpdateOrganizationByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganizationByIdBoard(requestParameters: BoardApiUpdateOrganizationByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const boardsIdOrganization: BoardsIdOrganization = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganizationByIdBoard(requestParameters.idBoard, boardsIdOrganization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsPrefsBackgroundByIdBoard()
         * @param {BoardApiUpdatePrefsBackgroundByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsBackgroundByIdBoard(requestParameters: BoardApiUpdatePrefsBackgroundByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsBackground: PrefsBackground = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsBackgroundByIdBoard(requestParameters.idBoard, prefsBackground, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsPrefsCalendarFeedEnabledByIdBoard()
         * @param {BoardApiUpdatePrefsCalendarFeedEnabledByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsCalendarFeedEnabledById(requestParameters: BoardApiUpdatePrefsCalendarFeedEnabledByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsCalendarFeedEnabled: PrefsCalendarFeedEnabled = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsCalendarFeedEnabledById(requestParameters.idBoard, prefsCalendarFeedEnabled, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsPrefsCardAgingByIdBoard()
         * @param {BoardApiUpdatePrefsCardAgingByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsCardAgingByIdBoard(requestParameters: BoardApiUpdatePrefsCardAgingByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsCardAging: PrefsCardAging = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsCardAgingByIdBoard(requestParameters.idBoard, prefsCardAging, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsPrefsCardCoversByIdBoard()
         * @param {BoardApiUpdatePrefsCardCoversByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsCardCoversByIdBoard(requestParameters: BoardApiUpdatePrefsCardCoversByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsCardCovers: PrefsCardCovers = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsCardCoversByIdBoard(requestParameters.idBoard, prefsCardCovers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsPrefsCommentsByIdBoard()
         * @param {BoardApiUpdatePrefsCommentsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsCommentsByIdBoard(requestParameters: BoardApiUpdatePrefsCommentsByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsComments: PrefsComments = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsCommentsByIdBoard(requestParameters.idBoard, prefsComments, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsPrefsInvitationsByIdBoard()
         * @param {BoardApiUpdatePrefsInvitationsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsInvitationsByIdBoard(requestParameters: BoardApiUpdatePrefsInvitationsByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsInvitations: PrefsInvitations = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsInvitationsByIdBoard(requestParameters.idBoard, prefsInvitations, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsPrefsPermissionLevelByIdBoard()
         * @param {BoardApiUpdatePrefsPermissionLevelByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsPermissionLevelById(requestParameters: BoardApiUpdatePrefsPermissionLevelByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsPermissionLevel: PrefsPermissionLevel = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsPermissionLevelById(requestParameters.idBoard, prefsPermissionLevel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsPrefsSelfJoinByIdBoard()
         * @param {BoardApiUpdatePrefsSelfJoinByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsSelfJoinByIdBoard(requestParameters: BoardApiUpdatePrefsSelfJoinByIdBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsSelfJoin: PrefsSelfJoin = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsSelfJoinByIdBoard(requestParameters.idBoard, prefsSelfJoin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsMyPrefsShowSidebarMembersByIdBoard()
         * @param {BoardApiUpdatePrefsShowSidebarMembersByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrefsShowSidebarMembersById(requestParameters: BoardApiUpdatePrefsShowSidebarMembersByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const myPrefsShowSidebarMembers: MyPrefsShowSidebarMembers = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrefsShowSidebarMembersById(requestParameters.idBoard, myPrefsShowSidebarMembers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsSubscribedByIdBoard()
         * @param {BoardApiUpdateSubscribedByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscribedById(requestParameters: BoardApiUpdateSubscribedByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const boardsSubscribed: BoardsSubscribed = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscribedById(requestParameters.idBoard, boardsSubscribed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateBoardsPrefsVotingByIdBoard()
         * @param {BoardApiUpdateVotingPrefsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVotingPrefsById(requestParameters: BoardApiUpdateVotingPrefsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const prefsVoting: PrefsVoting = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVotingPrefsById(requestParameters.idBoard, prefsVoting, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BoardApi - factory interface
 * @export
 */
export const BoardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoardApiFp(configuration)
    return {
        /**
         * 
         * @summary addBoardsChecklistsByIdBoard()
         * @param {BoardApiAddChecklistsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addChecklists(requestParameters: BoardApiAddChecklistsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addChecklists(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addBoardsLabelsByIdBoard()
         * @param {BoardApiAddLabelsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLabelsByIdBoard(requestParameters: BoardApiAddLabelsByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addLabelsByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addBoardsPowerUpsByIdBoard()
         * @param {BoardApiAddPowerUpsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPowerUpsByIdBoard(requestParameters: BoardApiAddPowerUpsByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addPowerUpsByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addBoards()
         * @param {BoardApiCreateBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBoard(requestParameters: BoardApiCreateBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addBoardsListsByIdBoard()
         * @param {BoardApiCreateListsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createListsByIdBoard(requestParameters: BoardApiCreateListsByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createListsByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsCardsByIdBoardByFilter()
         * @param {BoardApiFilterCardsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filterCardsByIdBoard(requestParameters: BoardApiFilterCardsByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.filterCardsByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addBoardsCalendarKeyGenerateByIdBoard()
         * @param {BoardApiGenerateCalendarKeyByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCalendarKeyById(requestParameters: BoardApiGenerateCalendarKeyByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.generateCalendarKeyById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addBoardsEmailKeyGenerateByIdBoard()
         * @param {BoardApiGenerateEmailKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateEmailKey(requestParameters: BoardApiGenerateEmailKeyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.generateEmailKey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsBoardStarsByIdBoard()
         * @param {BoardApiGetBoardStarsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardStarsById(requestParameters: BoardApiGetBoardStarsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBoardStarsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsByIdBoard()
         * @param {BoardApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: BoardApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsByIdBoardByField()
         * @param {BoardApiGetByIdFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdField(requestParameters: BoardApiGetByIdFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getByIdField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsCardsByIdBoard()
         * @param {BoardApiGetCardsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByIdBoard(requestParameters: BoardApiGetCardsByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCardsByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsCardsByIdBoardByIdCard()
         * @param {BoardApiGetCardsByIdBoardByIdCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsByIdBoardByIdCard(requestParameters: BoardApiGetCardsByIdBoardByIdCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCardsByIdBoardByIdCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsChecklistsByIdBoard()
         * @param {BoardApiGetChecklistsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChecklistsById(requestParameters: BoardApiGetChecklistsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getChecklistsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsDeltasByIdBoard()
         * @param {BoardApiGetDeltasByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeltasByIdBoard(requestParameters: BoardApiGetDeltasByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDeltasByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsLabelsByIdBoardByIdLabel()
         * @param {BoardApiGetLabelsByIdBoardByIdLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLabelsByIdBoardByIdLabel(requestParameters: BoardApiGetLabelsByIdBoardByIdLabelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getLabelsByIdBoardByIdLabel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsListsByIdBoardByFilter()
         * @param {BoardApiGetListsByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListsByFilter(requestParameters: BoardApiGetListsByFilterRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getListsByFilter(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsListsByIdBoard()
         * @param {BoardApiGetListsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListsByIdBoard(requestParameters: BoardApiGetListsByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getListsByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsMembersByIdBoardByFilter()
         * @param {BoardApiGetMembersByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersByFilter(requestParameters: BoardApiGetMembersByFilterRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMembersByFilter(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsMembersByIdBoard()
         * @param {BoardApiGetMembersByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersByIdBoard(requestParameters: BoardApiGetMembersByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMembersByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsMembersCardsByIdBoardByIdMember()
         * @param {BoardApiGetMembersCardsByIdBoardByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersCardsByIdBoardByIdMember(requestParameters: BoardApiGetMembersCardsByIdBoardByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMembersCardsByIdBoardByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsMembersInvitedByIdBoardByField()
         * @param {BoardApiGetMembersInvitedByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersInvitedByField(requestParameters: BoardApiGetMembersInvitedByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMembersInvitedByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsMembersInvitedByIdBoard()
         * @param {BoardApiGetMembersInvitedByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersInvitedByIdBoard(requestParameters: BoardApiGetMembersInvitedByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMembersInvitedByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsMembershipsByIdBoard()
         * @param {BoardApiGetMembershipsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembershipsByIdBoard(requestParameters: BoardApiGetMembershipsByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMembershipsByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsMembershipsByIdBoardByIdMembership()
         * @param {BoardApiGetMembershipsByIdBoardByIdMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembershipsByIdBoardByIdMembership(requestParameters: BoardApiGetMembershipsByIdBoardByIdMembershipRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMembershipsByIdBoardByIdMembership(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsMyPrefsByIdBoard()
         * @param {BoardApiGetMyPrefsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyPrefsById(requestParameters: BoardApiGetMyPrefsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMyPrefsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsOrganizationByIdBoard()
         * @param {BoardApiGetOrganizationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationById(requestParameters: BoardApiGetOrganizationByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getOrganizationById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsOrganizationByIdBoardByField()
         * @param {BoardApiGetOrganizationByIdBoardByFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationByIdBoardByField(requestParameters: BoardApiGetOrganizationByIdBoardByFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getOrganizationByIdBoardByField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsActionsByIdBoard()
         * @param {BoardApiListActionsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActionsByIdBoard(requestParameters: BoardApiListActionsByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listActionsByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getBoardsLabelsByIdBoard()
         * @param {BoardApiListLabelsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLabelsByIdBoard(requestParameters: BoardApiListLabelsByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listLabelsByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addBoardsMarkAsViewedByIdBoard()
         * @param {BoardApiMarkAsViewedByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsViewedByIdBoard(requestParameters: BoardApiMarkAsViewedByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.markAsViewedByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteBoardsMembersByIdBoardByIdMember()
         * @param {BoardApiRemoveMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMember(requestParameters: BoardApiRemoveMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteBoardsPowerUpsByIdBoardByPowerUp()
         * @param {BoardApiRemovePowerUpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePowerUp(requestParameters: BoardApiRemovePowerUpRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removePowerUp(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsByIdBoard()
         * @param {BoardApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: BoardApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsClosedByIdBoard()
         * @param {BoardApiUpdateClosedByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClosedById(requestParameters: BoardApiUpdateClosedByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateClosedById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsDescByIdBoard()
         * @param {BoardApiUpdateDescriptionByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDescriptionByIdBoard(requestParameters: BoardApiUpdateDescriptionByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateDescriptionByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsLabelNamesBlueByIdBoard()
         * @param {BoardApiUpdateLabelNamesBlueByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabelNamesBlueById(requestParameters: BoardApiUpdateLabelNamesBlueByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateLabelNamesBlueById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsLabelNamesGreenByIdBoard()
         * @param {BoardApiUpdateLabelNamesGreenByIdBoardPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabelNamesGreenByIdBoardPut(requestParameters: BoardApiUpdateLabelNamesGreenByIdBoardPutRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateLabelNamesGreenByIdBoardPut(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsLabelNamesOrangeByIdBoard()
         * @param {BoardApiUpdateLabelNamesOrangeByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabelNamesOrangeByIdBoard(requestParameters: BoardApiUpdateLabelNamesOrangeByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateLabelNamesOrangeByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsLabelNamesPurpleByIdBoard()
         * @param {BoardApiUpdateLabelNamesPurpleByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabelNamesPurpleByIdBoard(requestParameters: BoardApiUpdateLabelNamesPurpleByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateLabelNamesPurpleByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsLabelNamesRedByIdBoard()
         * @param {BoardApiUpdateLabelNamesRedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabelNamesRed(requestParameters: BoardApiUpdateLabelNamesRedRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateLabelNamesRed(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsLabelNamesYellowByIdBoard()
         * @param {BoardApiUpdateLabelNamesYellowByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabelNamesYellowByIdBoard(requestParameters: BoardApiUpdateLabelNamesYellowByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateLabelNamesYellowByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsMembersByIdBoard()
         * @param {BoardApiUpdateMembersByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembersByIdBoard(requestParameters: BoardApiUpdateMembersByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMembersByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsMembersByIdBoardByIdMember()
         * @param {BoardApiUpdateMembersByIdBoardByIdMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembersByIdBoardByIdMember(requestParameters: BoardApiUpdateMembersByIdBoardByIdMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMembersByIdBoardByIdMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsMembershipsByIdBoardByIdMembership()
         * @param {BoardApiUpdateMembershipsByIdBoardByIdMembershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembershipsByIdBoardByIdMembership(requestParameters: BoardApiUpdateMembershipsByIdBoardByIdMembershipRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMembershipsByIdBoardByIdMembership(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsMyPrefsIdEmailListByIdBoard()
         * @param {BoardApiUpdateMyPrefsEmailListByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyPrefsEmailListByIdBoard(requestParameters: BoardApiUpdateMyPrefsEmailListByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMyPrefsEmailListByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsMyPrefsEmailPositionByIdBoard()
         * @param {BoardApiUpdateMyPrefsEmailPositionByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyPrefsEmailPositionByIdBoard(requestParameters: BoardApiUpdateMyPrefsEmailPositionByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMyPrefsEmailPositionByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsMyPrefsShowListGuideByIdBoard()
         * @param {BoardApiUpdateMyPrefsShowListGuideByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyPrefsShowListGuideByIdBoard(requestParameters: BoardApiUpdateMyPrefsShowListGuideByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMyPrefsShowListGuideByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsMyPrefsShowSidebarByIdBoard()
         * @param {BoardApiUpdateMyPrefsShowSidebarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyPrefsShowSidebar(requestParameters: BoardApiUpdateMyPrefsShowSidebarRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMyPrefsShowSidebar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard()
         * @param {BoardApiUpdateMyPrefsShowSidebarActionsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyPrefsShowSidebarActionsByIdBoard(requestParameters: BoardApiUpdateMyPrefsShowSidebarActionsByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMyPrefsShowSidebarActionsByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsMyPrefsShowSidebarActivityByIdBoard()
         * @param {BoardApiUpdateMyPrefsShowSidebarActivityByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyPrefsShowSidebarActivityByIdBoard(requestParameters: BoardApiUpdateMyPrefsShowSidebarActivityByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMyPrefsShowSidebarActivityByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsNameByIdBoard()
         * @param {BoardApiUpdateNameByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNameById(requestParameters: BoardApiUpdateNameByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateNameById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsIdOrganizationByIdBoard()
         * @param {BoardApiUpdateOrganizationByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationByIdBoard(requestParameters: BoardApiUpdateOrganizationByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateOrganizationByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsPrefsBackgroundByIdBoard()
         * @param {BoardApiUpdatePrefsBackgroundByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsBackgroundByIdBoard(requestParameters: BoardApiUpdatePrefsBackgroundByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsBackgroundByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsPrefsCalendarFeedEnabledByIdBoard()
         * @param {BoardApiUpdatePrefsCalendarFeedEnabledByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsCalendarFeedEnabledById(requestParameters: BoardApiUpdatePrefsCalendarFeedEnabledByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsCalendarFeedEnabledById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsPrefsCardAgingByIdBoard()
         * @param {BoardApiUpdatePrefsCardAgingByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsCardAgingByIdBoard(requestParameters: BoardApiUpdatePrefsCardAgingByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsCardAgingByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsPrefsCardCoversByIdBoard()
         * @param {BoardApiUpdatePrefsCardCoversByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsCardCoversByIdBoard(requestParameters: BoardApiUpdatePrefsCardCoversByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsCardCoversByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsPrefsCommentsByIdBoard()
         * @param {BoardApiUpdatePrefsCommentsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsCommentsByIdBoard(requestParameters: BoardApiUpdatePrefsCommentsByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsCommentsByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsPrefsInvitationsByIdBoard()
         * @param {BoardApiUpdatePrefsInvitationsByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsInvitationsByIdBoard(requestParameters: BoardApiUpdatePrefsInvitationsByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsInvitationsByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsPrefsPermissionLevelByIdBoard()
         * @param {BoardApiUpdatePrefsPermissionLevelByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsPermissionLevelById(requestParameters: BoardApiUpdatePrefsPermissionLevelByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsPermissionLevelById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsPrefsSelfJoinByIdBoard()
         * @param {BoardApiUpdatePrefsSelfJoinByIdBoardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsSelfJoinByIdBoard(requestParameters: BoardApiUpdatePrefsSelfJoinByIdBoardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsSelfJoinByIdBoard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsMyPrefsShowSidebarMembersByIdBoard()
         * @param {BoardApiUpdatePrefsShowSidebarMembersByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrefsShowSidebarMembersById(requestParameters: BoardApiUpdatePrefsShowSidebarMembersByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePrefsShowSidebarMembersById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsSubscribedByIdBoard()
         * @param {BoardApiUpdateSubscribedByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscribedById(requestParameters: BoardApiUpdateSubscribedByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSubscribedById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBoardsPrefsVotingByIdBoard()
         * @param {BoardApiUpdateVotingPrefsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVotingPrefsById(requestParameters: BoardApiUpdateVotingPrefsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateVotingPrefsById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addChecklists operation in BoardApi.
 * @export
 * @interface BoardApiAddChecklistsRequest
 */
export type BoardApiAddChecklistsRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiAddChecklists
    */
    readonly idBoard: string
    
} & BoardsChecklists

/**
 * Request parameters for addLabelsByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiAddLabelsByIdBoardRequest
 */
export type BoardApiAddLabelsByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiAddLabelsByIdBoard
    */
    readonly idBoard: string
    
} & BoardsLabels

/**
 * Request parameters for addPowerUpsByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiAddPowerUpsByIdBoardRequest
 */
export type BoardApiAddPowerUpsByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiAddPowerUpsByIdBoard
    */
    readonly idBoard: string
    
} & BoardsPowerUps

/**
 * Request parameters for createBoard operation in BoardApi.
 * @export
 * @interface BoardApiCreateBoardRequest
 */
export type BoardApiCreateBoardRequest = {
    
} & Boards

/**
 * Request parameters for createListsByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiCreateListsByIdBoardRequest
 */
export type BoardApiCreateListsByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiCreateListsByIdBoard
    */
    readonly idBoard: string
    
} & BoardsLists

/**
 * Request parameters for filterCardsByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiFilterCardsByIdBoardRequest
 */
export type BoardApiFilterCardsByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiFilterCardsByIdBoard
    */
    readonly idBoard: string
    
    /**
    * filter
    * @type {string}
    * @memberof BoardApiFilterCardsByIdBoard
    */
    readonly filter: string
    
}

/**
 * Request parameters for generateCalendarKeyById operation in BoardApi.
 * @export
 * @interface BoardApiGenerateCalendarKeyByIdRequest
 */
export type BoardApiGenerateCalendarKeyByIdRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGenerateCalendarKeyById
    */
    readonly idBoard: string
    
}

/**
 * Request parameters for generateEmailKey operation in BoardApi.
 * @export
 * @interface BoardApiGenerateEmailKeyRequest
 */
export type BoardApiGenerateEmailKeyRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGenerateEmailKey
    */
    readonly idBoard: string
    
}

/**
 * Request parameters for getBoardStarsById operation in BoardApi.
 * @export
 * @interface BoardApiGetBoardStarsByIdRequest
 */
export type BoardApiGetBoardStarsByIdRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetBoardStarsById
    */
    readonly idBoard: string
    
    /**
    * One of: mine or none
    * @type {string}
    * @memberof BoardApiGetBoardStarsById
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getById operation in BoardApi.
 * @export
 * @interface BoardApiGetByIdRequest
 */
export type BoardApiGetByIdRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly idBoard: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly actions?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly actionsEntities?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly actionsDisplay?: string
    
    /**
    * One of: count, list or minimal
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly actionsFormat?: string
    
    /**
    * A date, null or lastView
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly actionsSince?: string
    
    /**
    * a number from 0 to 1000
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly actionsLimit?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator or type
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly actionFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly actionMember?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly actionMemberFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly actionMemberCreator?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly actionMemberCreatorFields?: string
    
    /**
    * One of: all, closed, none, open or visible
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly cards?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly cardFields?: string
    
    /**
    * A boolean value or &quot;cover&quot; for only card cover attachments
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly cardAttachments?: string
    
    /**
    * all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly cardAttachmentFields?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly cardChecklists?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly cardStickers?: string
    
    /**
    * One of: mine or none
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly boardStars?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly labels?: string
    
    /**
    * all or a comma-separated list of: color, idBoard, name or uses
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly labelFields?: string
    
    /**
    * a number from 0 to 1000
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly labelsLimit?: string
    
    /**
    * One of: all, closed, none or open
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly lists?: string
    
    /**
    * all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly listFields?: string
    
    /**
    * all or a comma-separated list of: active, admin, deactivated, me or normal
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly memberships?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly membershipsMember?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly membershipsMemberFields?: string
    
    /**
    * One of: admins, all, none, normal or owners
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly members?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly memberFields?: string
    
    /**
    * One of: admins, all, none, normal or owners
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly membersInvited?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly membersInvitedFields?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly checklists?: string
    
    /**
    * all or a comma-separated list of: idBoard, idCard, name or pos
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly checklistFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly organization?: string
    
    /**
    * all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly organizationFields?: string
    
    /**
    * all or a comma-separated list of: active, admin, deactivated, me or normal
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly organizationMemberships?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly myPrefs?: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof BoardApiGetById
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getByIdField operation in BoardApi.
 * @export
 * @interface BoardApiGetByIdFieldRequest
 */
export type BoardApiGetByIdFieldRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetByIdField
    */
    readonly idBoard: string
    
    /**
    * field
    * @type {string}
    * @memberof BoardApiGetByIdField
    */
    readonly field: string
    
}

/**
 * Request parameters for getCardsByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiGetCardsByIdBoardRequest
 */
export type BoardApiGetCardsByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoard
    */
    readonly idBoard: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoard
    */
    readonly actions?: string
    
    /**
    * A boolean value or &quot;cover&quot; for only card cover attachments
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoard
    */
    readonly attachments?: string
    
    /**
    * all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoard
    */
    readonly attachmentFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoard
    */
    readonly stickers?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoard
    */
    readonly members?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoard
    */
    readonly memberFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoard
    */
    readonly checkItemStates?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoard
    */
    readonly checklists?: string
    
    /**
    * a number from 1 to 1000
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoard
    */
    readonly limit?: string
    
    /**
    * A date, or null
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoard
    */
    readonly since?: string
    
    /**
    * A date, or null
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoard
    */
    readonly before?: string
    
    /**
    * One of: all, closed, none, open or visible
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoard
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoard
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getCardsByIdBoardByIdCard operation in BoardApi.
 * @export
 * @interface BoardApiGetCardsByIdBoardByIdCardRequest
 */
export type BoardApiGetCardsByIdBoardByIdCardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly idBoard: string
    
    /**
    * idCard
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly idCard: string
    
    /**
    * A boolean value or &quot;cover&quot; for only card cover attachments
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly attachments?: string
    
    /**
    * all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly attachmentFields?: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly actions?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly actionsEntities?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly actionsDisplay?: string
    
    /**
    * a number from 0 to 1000
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly actionsLimit?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator or type
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly actionFields?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly actionMemberCreatorFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly members?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly memberFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly checkItemStates?: string
    
    /**
    * all or a comma-separated list of: idCheckItem or state
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly checkItemStateFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly labels?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly checklists?: string
    
    /**
    * all or a comma-separated list of: idBoard, idCard, name or pos
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly checklistFields?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof BoardApiGetCardsByIdBoardByIdCard
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getChecklistsById operation in BoardApi.
 * @export
 * @interface BoardApiGetChecklistsByIdRequest
 */
export type BoardApiGetChecklistsByIdRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetChecklistsById
    */
    readonly idBoard: string
    
    /**
    * One of: all, closed, none, open or visible
    * @type {string}
    * @memberof BoardApiGetChecklistsById
    */
    readonly cards?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof BoardApiGetChecklistsById
    */
    readonly cardFields?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof BoardApiGetChecklistsById
    */
    readonly checkItems?: string
    
    /**
    * all or a comma-separated list of: name, nameData, pos, state or type
    * @type {string}
    * @memberof BoardApiGetChecklistsById
    */
    readonly checkItemFields?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof BoardApiGetChecklistsById
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: idBoard, idCard, name or pos
    * @type {string}
    * @memberof BoardApiGetChecklistsById
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getDeltasByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiGetDeltasByIdBoardRequest
 */
export type BoardApiGetDeltasByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetDeltasByIdBoard
    */
    readonly idBoard: string
    
    /**
    * A valid tag for subscribing
    * @type {string}
    * @memberof BoardApiGetDeltasByIdBoard
    */
    readonly tags: string
    
    /**
    * a number from -1 to Infinity
    * @type {string}
    * @memberof BoardApiGetDeltasByIdBoard
    */
    readonly ixLastUpdate: string
    
}

/**
 * Request parameters for getLabelsByIdBoardByIdLabel operation in BoardApi.
 * @export
 * @interface BoardApiGetLabelsByIdBoardByIdLabelRequest
 */
export type BoardApiGetLabelsByIdBoardByIdLabelRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetLabelsByIdBoardByIdLabel
    */
    readonly idBoard: string
    
    /**
    * idLabel
    * @type {string}
    * @memberof BoardApiGetLabelsByIdBoardByIdLabel
    */
    readonly idLabel: string
    
    /**
    * all or a comma-separated list of: color, idBoard, name or uses
    * @type {string}
    * @memberof BoardApiGetLabelsByIdBoardByIdLabel
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getListsByFilter operation in BoardApi.
 * @export
 * @interface BoardApiGetListsByFilterRequest
 */
export type BoardApiGetListsByFilterRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetListsByFilter
    */
    readonly idBoard: string
    
    /**
    * filter
    * @type {string}
    * @memberof BoardApiGetListsByFilter
    */
    readonly filter: string
    
}

/**
 * Request parameters for getListsByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiGetListsByIdBoardRequest
 */
export type BoardApiGetListsByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetListsByIdBoard
    */
    readonly idBoard: string
    
    /**
    * One of: all, closed, none, open or visible
    * @type {string}
    * @memberof BoardApiGetListsByIdBoard
    */
    readonly cards?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof BoardApiGetListsByIdBoard
    */
    readonly cardFields?: string
    
    /**
    * One of: all, closed, none or open
    * @type {string}
    * @memberof BoardApiGetListsByIdBoard
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    * @type {string}
    * @memberof BoardApiGetListsByIdBoard
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getMembersByFilter operation in BoardApi.
 * @export
 * @interface BoardApiGetMembersByFilterRequest
 */
export type BoardApiGetMembersByFilterRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetMembersByFilter
    */
    readonly idBoard: string
    
    /**
    * filter
    * @type {string}
    * @memberof BoardApiGetMembersByFilter
    */
    readonly filter: string
    
}

/**
 * Request parameters for getMembersByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiGetMembersByIdBoardRequest
 */
export type BoardApiGetMembersByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetMembersByIdBoard
    */
    readonly idBoard: string
    
    /**
    * One of: admins, all, none, normal or owners
    * @type {string}
    * @memberof BoardApiGetMembersByIdBoard
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof BoardApiGetMembersByIdBoard
    */
    readonly fields?: string
    
    /**
    * true or false ; works for premium organizations only.
    * @type {string}
    * @memberof BoardApiGetMembersByIdBoard
    */
    readonly activity?: string
    
}

/**
 * Request parameters for getMembersCardsByIdBoardByIdMember operation in BoardApi.
 * @export
 * @interface BoardApiGetMembersCardsByIdBoardByIdMemberRequest
 */
export type BoardApiGetMembersCardsByIdBoardByIdMemberRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetMembersCardsByIdBoardByIdMember
    */
    readonly idBoard: string
    
    /**
    * idMember
    * @type {string}
    * @memberof BoardApiGetMembersCardsByIdBoardByIdMember
    */
    readonly idMember: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof BoardApiGetMembersCardsByIdBoardByIdMember
    */
    readonly actions?: string
    
    /**
    * A boolean value or &quot;cover&quot; for only card cover attachments
    * @type {string}
    * @memberof BoardApiGetMembersCardsByIdBoardByIdMember
    */
    readonly attachments?: string
    
    /**
    * all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
    * @type {string}
    * @memberof BoardApiGetMembersCardsByIdBoardByIdMember
    */
    readonly attachmentFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetMembersCardsByIdBoardByIdMember
    */
    readonly members?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof BoardApiGetMembersCardsByIdBoardByIdMember
    */
    readonly memberFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetMembersCardsByIdBoardByIdMember
    */
    readonly checkItemStates?: string
    
    /**
    * One of: all or none
    * @type {string}
    * @memberof BoardApiGetMembersCardsByIdBoardByIdMember
    */
    readonly checklists?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetMembersCardsByIdBoardByIdMember
    */
    readonly board?: string
    
    /**
    * all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
    * @type {string}
    * @memberof BoardApiGetMembersCardsByIdBoardByIdMember
    */
    readonly boardFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetMembersCardsByIdBoardByIdMember
    */
    readonly list?: string
    
    /**
    * all or a comma-separated list of: closed, idBoard, name, pos or subscribed
    * @type {string}
    * @memberof BoardApiGetMembersCardsByIdBoardByIdMember
    */
    readonly listFields?: string
    
    /**
    * One of: all, closed, none, open or visible
    * @type {string}
    * @memberof BoardApiGetMembersCardsByIdBoardByIdMember
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
    * @type {string}
    * @memberof BoardApiGetMembersCardsByIdBoardByIdMember
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getMembersInvitedByField operation in BoardApi.
 * @export
 * @interface BoardApiGetMembersInvitedByFieldRequest
 */
export type BoardApiGetMembersInvitedByFieldRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetMembersInvitedByField
    */
    readonly idBoard: string
    
    /**
    * field
    * @type {string}
    * @memberof BoardApiGetMembersInvitedByField
    */
    readonly field: string
    
}

/**
 * Request parameters for getMembersInvitedByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiGetMembersInvitedByIdBoardRequest
 */
export type BoardApiGetMembersInvitedByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetMembersInvitedByIdBoard
    */
    readonly idBoard: string
    
    /**
    * all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
    * @type {string}
    * @memberof BoardApiGetMembersInvitedByIdBoard
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getMembershipsByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiGetMembershipsByIdBoardRequest
 */
export type BoardApiGetMembershipsByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetMembershipsByIdBoard
    */
    readonly idBoard: string
    
    /**
    * all or a comma-separated list of: active, admin, deactivated, me or normal
    * @type {string}
    * @memberof BoardApiGetMembershipsByIdBoard
    */
    readonly filter?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetMembershipsByIdBoard
    */
    readonly member?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof BoardApiGetMembershipsByIdBoard
    */
    readonly memberFields?: string
    
}

/**
 * Request parameters for getMembershipsByIdBoardByIdMembership operation in BoardApi.
 * @export
 * @interface BoardApiGetMembershipsByIdBoardByIdMembershipRequest
 */
export type BoardApiGetMembershipsByIdBoardByIdMembershipRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetMembershipsByIdBoardByIdMembership
    */
    readonly idBoard: string
    
    /**
    * idMembership
    * @type {string}
    * @memberof BoardApiGetMembershipsByIdBoardByIdMembership
    */
    readonly idMembership: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiGetMembershipsByIdBoardByIdMembership
    */
    readonly member?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof BoardApiGetMembershipsByIdBoardByIdMembership
    */
    readonly memberFields?: string
    
}

/**
 * Request parameters for getMyPrefsById operation in BoardApi.
 * @export
 * @interface BoardApiGetMyPrefsByIdRequest
 */
export type BoardApiGetMyPrefsByIdRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetMyPrefsById
    */
    readonly idBoard: string
    
}

/**
 * Request parameters for getOrganizationById operation in BoardApi.
 * @export
 * @interface BoardApiGetOrganizationByIdRequest
 */
export type BoardApiGetOrganizationByIdRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetOrganizationById
    */
    readonly idBoard: string
    
    /**
    * all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
    * @type {string}
    * @memberof BoardApiGetOrganizationById
    */
    readonly fields?: string
    
}

/**
 * Request parameters for getOrganizationByIdBoardByField operation in BoardApi.
 * @export
 * @interface BoardApiGetOrganizationByIdBoardByFieldRequest
 */
export type BoardApiGetOrganizationByIdBoardByFieldRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiGetOrganizationByIdBoardByField
    */
    readonly idBoard: string
    
    /**
    * field
    * @type {string}
    * @memberof BoardApiGetOrganizationByIdBoardByField
    */
    readonly field: string
    
}

/**
 * Request parameters for listActionsByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiListActionsByIdBoardRequest
 */
export type BoardApiListActionsByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiListActionsByIdBoard
    */
    readonly idBoard: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiListActionsByIdBoard
    */
    readonly entities?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiListActionsByIdBoard
    */
    readonly display?: string
    
    /**
    * all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
    * @type {string}
    * @memberof BoardApiListActionsByIdBoard
    */
    readonly filter?: string
    
    /**
    * all or a comma-separated list of: data, date, idMemberCreator or type
    * @type {string}
    * @memberof BoardApiListActionsByIdBoard
    */
    readonly fields?: string
    
    /**
    * a number from 0 to 1000
    * @type {string}
    * @memberof BoardApiListActionsByIdBoard
    */
    readonly limit?: string
    
    /**
    * One of: count, list or minimal
    * @type {string}
    * @memberof BoardApiListActionsByIdBoard
    */
    readonly format?: string
    
    /**
    * A date, null or lastView
    * @type {string}
    * @memberof BoardApiListActionsByIdBoard
    */
    readonly since?: string
    
    /**
    * A date, or null
    * @type {string}
    * @memberof BoardApiListActionsByIdBoard
    */
    readonly before?: string
    
    /**
    * Page * limit must be less than 1000
    * @type {string}
    * @memberof BoardApiListActionsByIdBoard
    */
    readonly page?: string
    
    /**
    * Only return actions related to these model ids
    * @type {string}
    * @memberof BoardApiListActionsByIdBoard
    */
    readonly idModels?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiListActionsByIdBoard
    */
    readonly member?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof BoardApiListActionsByIdBoard
    */
    readonly memberFields?: string
    
    /**
    *  true or false
    * @type {string}
    * @memberof BoardApiListActionsByIdBoard
    */
    readonly memberCreator?: string
    
    /**
    * all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    * @type {string}
    * @memberof BoardApiListActionsByIdBoard
    */
    readonly memberCreatorFields?: string
    
}

/**
 * Request parameters for listLabelsByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiListLabelsByIdBoardRequest
 */
export type BoardApiListLabelsByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiListLabelsByIdBoard
    */
    readonly idBoard: string
    
    /**
    * all or a comma-separated list of: color, idBoard, name or uses
    * @type {string}
    * @memberof BoardApiListLabelsByIdBoard
    */
    readonly fields?: string
    
    /**
    * a number from 0 to 1000
    * @type {string}
    * @memberof BoardApiListLabelsByIdBoard
    */
    readonly limit?: string
    
}

/**
 * Request parameters for markAsViewedByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiMarkAsViewedByIdBoardRequest
 */
export type BoardApiMarkAsViewedByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiMarkAsViewedByIdBoard
    */
    readonly idBoard: string
    
}

/**
 * Request parameters for removeMember operation in BoardApi.
 * @export
 * @interface BoardApiRemoveMemberRequest
 */
export type BoardApiRemoveMemberRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiRemoveMember
    */
    readonly idBoard: string
    
    /**
    * idMember
    * @type {string}
    * @memberof BoardApiRemoveMember
    */
    readonly idMember: string
    
}

/**
 * Request parameters for removePowerUp operation in BoardApi.
 * @export
 * @interface BoardApiRemovePowerUpRequest
 */
export type BoardApiRemovePowerUpRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiRemovePowerUp
    */
    readonly idBoard: string
    
    /**
    * powerUp
    * @type {string}
    * @memberof BoardApiRemovePowerUp
    */
    readonly powerUp: string
    
}

/**
 * Request parameters for updateById operation in BoardApi.
 * @export
 * @interface BoardApiUpdateByIdRequest
 */
export type BoardApiUpdateByIdRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateById
    */
    readonly idBoard: string
    
} & Boards

/**
 * Request parameters for updateClosedById operation in BoardApi.
 * @export
 * @interface BoardApiUpdateClosedByIdRequest
 */
export type BoardApiUpdateClosedByIdRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateClosedById
    */
    readonly idBoard: string
    
} & BoardsClosed

/**
 * Request parameters for updateDescriptionByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdateDescriptionByIdBoardRequest
 */
export type BoardApiUpdateDescriptionByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateDescriptionByIdBoard
    */
    readonly idBoard: string
    
} & BoardsDesc

/**
 * Request parameters for updateLabelNamesBlueById operation in BoardApi.
 * @export
 * @interface BoardApiUpdateLabelNamesBlueByIdRequest
 */
export type BoardApiUpdateLabelNamesBlueByIdRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateLabelNamesBlueById
    */
    readonly idBoard: string
    
} & LabelNamesBlue

/**
 * Request parameters for updateLabelNamesGreenByIdBoardPut operation in BoardApi.
 * @export
 * @interface BoardApiUpdateLabelNamesGreenByIdBoardPutRequest
 */
export type BoardApiUpdateLabelNamesGreenByIdBoardPutRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateLabelNamesGreenByIdBoardPut
    */
    readonly idBoard: string
    
} & LabelNamesGreen

/**
 * Request parameters for updateLabelNamesOrangeByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdateLabelNamesOrangeByIdBoardRequest
 */
export type BoardApiUpdateLabelNamesOrangeByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateLabelNamesOrangeByIdBoard
    */
    readonly idBoard: string
    
} & LabelNamesOrange

/**
 * Request parameters for updateLabelNamesPurpleByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdateLabelNamesPurpleByIdBoardRequest
 */
export type BoardApiUpdateLabelNamesPurpleByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateLabelNamesPurpleByIdBoard
    */
    readonly idBoard: string
    
} & LabelNamesPurple

/**
 * Request parameters for updateLabelNamesRed operation in BoardApi.
 * @export
 * @interface BoardApiUpdateLabelNamesRedRequest
 */
export type BoardApiUpdateLabelNamesRedRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateLabelNamesRed
    */
    readonly idBoard: string
    
} & LabelNamesRed

/**
 * Request parameters for updateLabelNamesYellowByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdateLabelNamesYellowByIdBoardRequest
 */
export type BoardApiUpdateLabelNamesYellowByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateLabelNamesYellowByIdBoard
    */
    readonly idBoard: string
    
} & LabelNamesYellow

/**
 * Request parameters for updateMembersByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdateMembersByIdBoardRequest
 */
export type BoardApiUpdateMembersByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateMembersByIdBoard
    */
    readonly idBoard: string
    
} & BoardsMembers

/**
 * Request parameters for updateMembersByIdBoardByIdMember operation in BoardApi.
 * @export
 * @interface BoardApiUpdateMembersByIdBoardByIdMemberRequest
 */
export type BoardApiUpdateMembersByIdBoardByIdMemberRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateMembersByIdBoardByIdMember
    */
    readonly idBoard: string
    
    /**
    * idMember
    * @type {string}
    * @memberof BoardApiUpdateMembersByIdBoardByIdMember
    */
    readonly idMember: string
    
} & BoardsMembers

/**
 * Request parameters for updateMembershipsByIdBoardByIdMembership operation in BoardApi.
 * @export
 * @interface BoardApiUpdateMembershipsByIdBoardByIdMembershipRequest
 */
export type BoardApiUpdateMembershipsByIdBoardByIdMembershipRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateMembershipsByIdBoardByIdMembership
    */
    readonly idBoard: string
    
    /**
    * idMembership
    * @type {string}
    * @memberof BoardApiUpdateMembershipsByIdBoardByIdMembership
    */
    readonly idMembership: string
    
} & BoardsMemberships

/**
 * Request parameters for updateMyPrefsEmailListByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdateMyPrefsEmailListByIdBoardRequest
 */
export type BoardApiUpdateMyPrefsEmailListByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateMyPrefsEmailListByIdBoard
    */
    readonly idBoard: string
    
} & MyPrefsIdEmailList

/**
 * Request parameters for updateMyPrefsEmailPositionByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdateMyPrefsEmailPositionByIdBoardRequest
 */
export type BoardApiUpdateMyPrefsEmailPositionByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateMyPrefsEmailPositionByIdBoard
    */
    readonly idBoard: string
    
} & MyPrefsEmailPosition

/**
 * Request parameters for updateMyPrefsShowListGuideByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdateMyPrefsShowListGuideByIdBoardRequest
 */
export type BoardApiUpdateMyPrefsShowListGuideByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateMyPrefsShowListGuideByIdBoard
    */
    readonly idBoard: string
    
} & MyPrefsShowListGuide

/**
 * Request parameters for updateMyPrefsShowSidebar operation in BoardApi.
 * @export
 * @interface BoardApiUpdateMyPrefsShowSidebarRequest
 */
export type BoardApiUpdateMyPrefsShowSidebarRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateMyPrefsShowSidebar
    */
    readonly idBoard: string
    
} & MyPrefsShowSidebar

/**
 * Request parameters for updateMyPrefsShowSidebarActionsByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdateMyPrefsShowSidebarActionsByIdBoardRequest
 */
export type BoardApiUpdateMyPrefsShowSidebarActionsByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateMyPrefsShowSidebarActionsByIdBoard
    */
    readonly idBoard: string
    
} & MyPrefsShowSidebarBoardActions

/**
 * Request parameters for updateMyPrefsShowSidebarActivityByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdateMyPrefsShowSidebarActivityByIdBoardRequest
 */
export type BoardApiUpdateMyPrefsShowSidebarActivityByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateMyPrefsShowSidebarActivityByIdBoard
    */
    readonly idBoard: string
    
} & MyPrefsShowSidebarActivity

/**
 * Request parameters for updateNameById operation in BoardApi.
 * @export
 * @interface BoardApiUpdateNameByIdRequest
 */
export type BoardApiUpdateNameByIdRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateNameById
    */
    readonly idBoard: string
    
} & BoardsName

/**
 * Request parameters for updateOrganizationByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdateOrganizationByIdBoardRequest
 */
export type BoardApiUpdateOrganizationByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateOrganizationByIdBoard
    */
    readonly idBoard: string
    
} & BoardsIdOrganization

/**
 * Request parameters for updatePrefsBackgroundByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdatePrefsBackgroundByIdBoardRequest
 */
export type BoardApiUpdatePrefsBackgroundByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdatePrefsBackgroundByIdBoard
    */
    readonly idBoard: string
    
} & PrefsBackground

/**
 * Request parameters for updatePrefsCalendarFeedEnabledById operation in BoardApi.
 * @export
 * @interface BoardApiUpdatePrefsCalendarFeedEnabledByIdRequest
 */
export type BoardApiUpdatePrefsCalendarFeedEnabledByIdRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdatePrefsCalendarFeedEnabledById
    */
    readonly idBoard: string
    
} & PrefsCalendarFeedEnabled

/**
 * Request parameters for updatePrefsCardAgingByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdatePrefsCardAgingByIdBoardRequest
 */
export type BoardApiUpdatePrefsCardAgingByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdatePrefsCardAgingByIdBoard
    */
    readonly idBoard: string
    
} & PrefsCardAging

/**
 * Request parameters for updatePrefsCardCoversByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdatePrefsCardCoversByIdBoardRequest
 */
export type BoardApiUpdatePrefsCardCoversByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdatePrefsCardCoversByIdBoard
    */
    readonly idBoard: string
    
} & PrefsCardCovers

/**
 * Request parameters for updatePrefsCommentsByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdatePrefsCommentsByIdBoardRequest
 */
export type BoardApiUpdatePrefsCommentsByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdatePrefsCommentsByIdBoard
    */
    readonly idBoard: string
    
} & PrefsComments

/**
 * Request parameters for updatePrefsInvitationsByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdatePrefsInvitationsByIdBoardRequest
 */
export type BoardApiUpdatePrefsInvitationsByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdatePrefsInvitationsByIdBoard
    */
    readonly idBoard: string
    
} & PrefsInvitations

/**
 * Request parameters for updatePrefsPermissionLevelById operation in BoardApi.
 * @export
 * @interface BoardApiUpdatePrefsPermissionLevelByIdRequest
 */
export type BoardApiUpdatePrefsPermissionLevelByIdRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdatePrefsPermissionLevelById
    */
    readonly idBoard: string
    
} & PrefsPermissionLevel

/**
 * Request parameters for updatePrefsSelfJoinByIdBoard operation in BoardApi.
 * @export
 * @interface BoardApiUpdatePrefsSelfJoinByIdBoardRequest
 */
export type BoardApiUpdatePrefsSelfJoinByIdBoardRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdatePrefsSelfJoinByIdBoard
    */
    readonly idBoard: string
    
} & PrefsSelfJoin

/**
 * Request parameters for updatePrefsShowSidebarMembersById operation in BoardApi.
 * @export
 * @interface BoardApiUpdatePrefsShowSidebarMembersByIdRequest
 */
export type BoardApiUpdatePrefsShowSidebarMembersByIdRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdatePrefsShowSidebarMembersById
    */
    readonly idBoard: string
    
} & MyPrefsShowSidebarMembers

/**
 * Request parameters for updateSubscribedById operation in BoardApi.
 * @export
 * @interface BoardApiUpdateSubscribedByIdRequest
 */
export type BoardApiUpdateSubscribedByIdRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateSubscribedById
    */
    readonly idBoard: string
    
} & BoardsSubscribed

/**
 * Request parameters for updateVotingPrefsById operation in BoardApi.
 * @export
 * @interface BoardApiUpdateVotingPrefsByIdRequest
 */
export type BoardApiUpdateVotingPrefsByIdRequest = {
    
    /**
    * board_id
    * @type {string}
    * @memberof BoardApiUpdateVotingPrefsById
    */
    readonly idBoard: string
    
} & PrefsVoting

/**
 * BoardApiGenerated - object-oriented interface
 * @export
 * @class BoardApiGenerated
 * @extends {BaseAPI}
 */
export class BoardApiGenerated extends BaseAPI {
    /**
     * 
     * @summary addBoardsChecklistsByIdBoard()
     * @param {BoardApiAddChecklistsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public addChecklists(requestParameters: BoardApiAddChecklistsRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).addChecklists(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addBoardsLabelsByIdBoard()
     * @param {BoardApiAddLabelsByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public addLabelsByIdBoard(requestParameters: BoardApiAddLabelsByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).addLabelsByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addBoardsPowerUpsByIdBoard()
     * @param {BoardApiAddPowerUpsByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public addPowerUpsByIdBoard(requestParameters: BoardApiAddPowerUpsByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).addPowerUpsByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addBoards()
     * @param {BoardApiCreateBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public createBoard(requestParameters: BoardApiCreateBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).createBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addBoardsListsByIdBoard()
     * @param {BoardApiCreateListsByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public createListsByIdBoard(requestParameters: BoardApiCreateListsByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).createListsByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsCardsByIdBoardByFilter()
     * @param {BoardApiFilterCardsByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public filterCardsByIdBoard(requestParameters: BoardApiFilterCardsByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).filterCardsByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addBoardsCalendarKeyGenerateByIdBoard()
     * @param {BoardApiGenerateCalendarKeyByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public generateCalendarKeyById(requestParameters: BoardApiGenerateCalendarKeyByIdRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).generateCalendarKeyById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addBoardsEmailKeyGenerateByIdBoard()
     * @param {BoardApiGenerateEmailKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public generateEmailKey(requestParameters: BoardApiGenerateEmailKeyRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).generateEmailKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsBoardStarsByIdBoard()
     * @param {BoardApiGetBoardStarsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getBoardStarsById(requestParameters: BoardApiGetBoardStarsByIdRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getBoardStarsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsByIdBoard()
     * @param {BoardApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getById(requestParameters: BoardApiGetByIdRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsByIdBoardByField()
     * @param {BoardApiGetByIdFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getByIdField(requestParameters: BoardApiGetByIdFieldRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getByIdField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsCardsByIdBoard()
     * @param {BoardApiGetCardsByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getCardsByIdBoard(requestParameters: BoardApiGetCardsByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getCardsByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsCardsByIdBoardByIdCard()
     * @param {BoardApiGetCardsByIdBoardByIdCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getCardsByIdBoardByIdCard(requestParameters: BoardApiGetCardsByIdBoardByIdCardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getCardsByIdBoardByIdCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsChecklistsByIdBoard()
     * @param {BoardApiGetChecklistsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getChecklistsById(requestParameters: BoardApiGetChecklistsByIdRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getChecklistsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsDeltasByIdBoard()
     * @param {BoardApiGetDeltasByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getDeltasByIdBoard(requestParameters: BoardApiGetDeltasByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getDeltasByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsLabelsByIdBoardByIdLabel()
     * @param {BoardApiGetLabelsByIdBoardByIdLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getLabelsByIdBoardByIdLabel(requestParameters: BoardApiGetLabelsByIdBoardByIdLabelRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getLabelsByIdBoardByIdLabel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsListsByIdBoardByFilter()
     * @param {BoardApiGetListsByFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getListsByFilter(requestParameters: BoardApiGetListsByFilterRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getListsByFilter(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsListsByIdBoard()
     * @param {BoardApiGetListsByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getListsByIdBoard(requestParameters: BoardApiGetListsByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getListsByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsMembersByIdBoardByFilter()
     * @param {BoardApiGetMembersByFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getMembersByFilter(requestParameters: BoardApiGetMembersByFilterRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getMembersByFilter(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsMembersByIdBoard()
     * @param {BoardApiGetMembersByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getMembersByIdBoard(requestParameters: BoardApiGetMembersByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getMembersByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsMembersCardsByIdBoardByIdMember()
     * @param {BoardApiGetMembersCardsByIdBoardByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getMembersCardsByIdBoardByIdMember(requestParameters: BoardApiGetMembersCardsByIdBoardByIdMemberRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getMembersCardsByIdBoardByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsMembersInvitedByIdBoardByField()
     * @param {BoardApiGetMembersInvitedByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getMembersInvitedByField(requestParameters: BoardApiGetMembersInvitedByFieldRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getMembersInvitedByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsMembersInvitedByIdBoard()
     * @param {BoardApiGetMembersInvitedByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getMembersInvitedByIdBoard(requestParameters: BoardApiGetMembersInvitedByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getMembersInvitedByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsMembershipsByIdBoard()
     * @param {BoardApiGetMembershipsByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getMembershipsByIdBoard(requestParameters: BoardApiGetMembershipsByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getMembershipsByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsMembershipsByIdBoardByIdMembership()
     * @param {BoardApiGetMembershipsByIdBoardByIdMembershipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getMembershipsByIdBoardByIdMembership(requestParameters: BoardApiGetMembershipsByIdBoardByIdMembershipRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getMembershipsByIdBoardByIdMembership(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsMyPrefsByIdBoard()
     * @param {BoardApiGetMyPrefsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getMyPrefsById(requestParameters: BoardApiGetMyPrefsByIdRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getMyPrefsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsOrganizationByIdBoard()
     * @param {BoardApiGetOrganizationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getOrganizationById(requestParameters: BoardApiGetOrganizationByIdRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getOrganizationById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsOrganizationByIdBoardByField()
     * @param {BoardApiGetOrganizationByIdBoardByFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public getOrganizationByIdBoardByField(requestParameters: BoardApiGetOrganizationByIdBoardByFieldRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).getOrganizationByIdBoardByField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsActionsByIdBoard()
     * @param {BoardApiListActionsByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public listActionsByIdBoard(requestParameters: BoardApiListActionsByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).listActionsByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getBoardsLabelsByIdBoard()
     * @param {BoardApiListLabelsByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public listLabelsByIdBoard(requestParameters: BoardApiListLabelsByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).listLabelsByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addBoardsMarkAsViewedByIdBoard()
     * @param {BoardApiMarkAsViewedByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public markAsViewedByIdBoard(requestParameters: BoardApiMarkAsViewedByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).markAsViewedByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteBoardsMembersByIdBoardByIdMember()
     * @param {BoardApiRemoveMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public removeMember(requestParameters: BoardApiRemoveMemberRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).removeMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteBoardsPowerUpsByIdBoardByPowerUp()
     * @param {BoardApiRemovePowerUpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public removePowerUp(requestParameters: BoardApiRemovePowerUpRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).removePowerUp(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsByIdBoard()
     * @param {BoardApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateById(requestParameters: BoardApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsClosedByIdBoard()
     * @param {BoardApiUpdateClosedByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateClosedById(requestParameters: BoardApiUpdateClosedByIdRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateClosedById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsDescByIdBoard()
     * @param {BoardApiUpdateDescriptionByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateDescriptionByIdBoard(requestParameters: BoardApiUpdateDescriptionByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateDescriptionByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsLabelNamesBlueByIdBoard()
     * @param {BoardApiUpdateLabelNamesBlueByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateLabelNamesBlueById(requestParameters: BoardApiUpdateLabelNamesBlueByIdRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateLabelNamesBlueById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsLabelNamesGreenByIdBoard()
     * @param {BoardApiUpdateLabelNamesGreenByIdBoardPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateLabelNamesGreenByIdBoardPut(requestParameters: BoardApiUpdateLabelNamesGreenByIdBoardPutRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateLabelNamesGreenByIdBoardPut(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsLabelNamesOrangeByIdBoard()
     * @param {BoardApiUpdateLabelNamesOrangeByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateLabelNamesOrangeByIdBoard(requestParameters: BoardApiUpdateLabelNamesOrangeByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateLabelNamesOrangeByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsLabelNamesPurpleByIdBoard()
     * @param {BoardApiUpdateLabelNamesPurpleByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateLabelNamesPurpleByIdBoard(requestParameters: BoardApiUpdateLabelNamesPurpleByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateLabelNamesPurpleByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsLabelNamesRedByIdBoard()
     * @param {BoardApiUpdateLabelNamesRedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateLabelNamesRed(requestParameters: BoardApiUpdateLabelNamesRedRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateLabelNamesRed(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsLabelNamesYellowByIdBoard()
     * @param {BoardApiUpdateLabelNamesYellowByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateLabelNamesYellowByIdBoard(requestParameters: BoardApiUpdateLabelNamesYellowByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateLabelNamesYellowByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsMembersByIdBoard()
     * @param {BoardApiUpdateMembersByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateMembersByIdBoard(requestParameters: BoardApiUpdateMembersByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateMembersByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsMembersByIdBoardByIdMember()
     * @param {BoardApiUpdateMembersByIdBoardByIdMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateMembersByIdBoardByIdMember(requestParameters: BoardApiUpdateMembersByIdBoardByIdMemberRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateMembersByIdBoardByIdMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsMembershipsByIdBoardByIdMembership()
     * @param {BoardApiUpdateMembershipsByIdBoardByIdMembershipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateMembershipsByIdBoardByIdMembership(requestParameters: BoardApiUpdateMembershipsByIdBoardByIdMembershipRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateMembershipsByIdBoardByIdMembership(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsMyPrefsIdEmailListByIdBoard()
     * @param {BoardApiUpdateMyPrefsEmailListByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateMyPrefsEmailListByIdBoard(requestParameters: BoardApiUpdateMyPrefsEmailListByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateMyPrefsEmailListByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsMyPrefsEmailPositionByIdBoard()
     * @param {BoardApiUpdateMyPrefsEmailPositionByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateMyPrefsEmailPositionByIdBoard(requestParameters: BoardApiUpdateMyPrefsEmailPositionByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateMyPrefsEmailPositionByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsMyPrefsShowListGuideByIdBoard()
     * @param {BoardApiUpdateMyPrefsShowListGuideByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateMyPrefsShowListGuideByIdBoard(requestParameters: BoardApiUpdateMyPrefsShowListGuideByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateMyPrefsShowListGuideByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsMyPrefsShowSidebarByIdBoard()
     * @param {BoardApiUpdateMyPrefsShowSidebarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateMyPrefsShowSidebar(requestParameters: BoardApiUpdateMyPrefsShowSidebarRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateMyPrefsShowSidebar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard()
     * @param {BoardApiUpdateMyPrefsShowSidebarActionsByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateMyPrefsShowSidebarActionsByIdBoard(requestParameters: BoardApiUpdateMyPrefsShowSidebarActionsByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateMyPrefsShowSidebarActionsByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsMyPrefsShowSidebarActivityByIdBoard()
     * @param {BoardApiUpdateMyPrefsShowSidebarActivityByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateMyPrefsShowSidebarActivityByIdBoard(requestParameters: BoardApiUpdateMyPrefsShowSidebarActivityByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateMyPrefsShowSidebarActivityByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsNameByIdBoard()
     * @param {BoardApiUpdateNameByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateNameById(requestParameters: BoardApiUpdateNameByIdRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateNameById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsIdOrganizationByIdBoard()
     * @param {BoardApiUpdateOrganizationByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateOrganizationByIdBoard(requestParameters: BoardApiUpdateOrganizationByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateOrganizationByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsPrefsBackgroundByIdBoard()
     * @param {BoardApiUpdatePrefsBackgroundByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updatePrefsBackgroundByIdBoard(requestParameters: BoardApiUpdatePrefsBackgroundByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updatePrefsBackgroundByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsPrefsCalendarFeedEnabledByIdBoard()
     * @param {BoardApiUpdatePrefsCalendarFeedEnabledByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updatePrefsCalendarFeedEnabledById(requestParameters: BoardApiUpdatePrefsCalendarFeedEnabledByIdRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updatePrefsCalendarFeedEnabledById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsPrefsCardAgingByIdBoard()
     * @param {BoardApiUpdatePrefsCardAgingByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updatePrefsCardAgingByIdBoard(requestParameters: BoardApiUpdatePrefsCardAgingByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updatePrefsCardAgingByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsPrefsCardCoversByIdBoard()
     * @param {BoardApiUpdatePrefsCardCoversByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updatePrefsCardCoversByIdBoard(requestParameters: BoardApiUpdatePrefsCardCoversByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updatePrefsCardCoversByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsPrefsCommentsByIdBoard()
     * @param {BoardApiUpdatePrefsCommentsByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updatePrefsCommentsByIdBoard(requestParameters: BoardApiUpdatePrefsCommentsByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updatePrefsCommentsByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsPrefsInvitationsByIdBoard()
     * @param {BoardApiUpdatePrefsInvitationsByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updatePrefsInvitationsByIdBoard(requestParameters: BoardApiUpdatePrefsInvitationsByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updatePrefsInvitationsByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsPrefsPermissionLevelByIdBoard()
     * @param {BoardApiUpdatePrefsPermissionLevelByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updatePrefsPermissionLevelById(requestParameters: BoardApiUpdatePrefsPermissionLevelByIdRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updatePrefsPermissionLevelById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsPrefsSelfJoinByIdBoard()
     * @param {BoardApiUpdatePrefsSelfJoinByIdBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updatePrefsSelfJoinByIdBoard(requestParameters: BoardApiUpdatePrefsSelfJoinByIdBoardRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updatePrefsSelfJoinByIdBoard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsMyPrefsShowSidebarMembersByIdBoard()
     * @param {BoardApiUpdatePrefsShowSidebarMembersByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updatePrefsShowSidebarMembersById(requestParameters: BoardApiUpdatePrefsShowSidebarMembersByIdRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updatePrefsShowSidebarMembersById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsSubscribedByIdBoard()
     * @param {BoardApiUpdateSubscribedByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateSubscribedById(requestParameters: BoardApiUpdateSubscribedByIdRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateSubscribedById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBoardsPrefsVotingByIdBoard()
     * @param {BoardApiUpdateVotingPrefsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardApiGenerated
     */
    public updateVotingPrefsById(requestParameters: BoardApiUpdateVotingPrefsByIdRequest, options?: AxiosRequestConfig) {
        return BoardApiFp(this.configuration).updateVotingPrefsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
