/* tslint:disable */
/* eslint-disable */
/*
Trello

This document describes the REST API of Trello as published by Trello.com.
 - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>
 - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Webhooks } from '../models';
// @ts-ignore
import { WebhooksActive } from '../models';
// @ts-ignore
import { WebhooksCallbackURL } from '../models';
// @ts-ignore
import { WebhooksDescription } from '../models';
// @ts-ignore
import { WebhooksIdModel } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WebhookApi - axios parameter creator
 * @export
 */
export const WebhookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getWebhooksByIdWebhook()
         * @param {string} idWebhook idWebhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (idWebhook: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idWebhook' is not null or undefined
            assertParamExists('getById', 'idWebhook', idWebhook)
            const localVarPath = `/webhooks/{idWebhook}`
                .replace(`{${"idWebhook"}}`, encodeURIComponent(String(idWebhook !== undefined ? idWebhook : `-idWebhook-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks/{idWebhook}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getWebhooksByIdWebhookByField()
         * @param {string} idWebhook idWebhook
         * @param {string} field field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdField: async (idWebhook: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idWebhook' is not null or undefined
            assertParamExists('getByIdField', 'idWebhook', idWebhook)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getByIdField', 'field', field)
            const localVarPath = `/webhooks/{idWebhook}/{field}`
                .replace(`{${"idWebhook"}}`, encodeURIComponent(String(idWebhook !== undefined ? idWebhook : `-idWebhook-`)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field !== undefined ? field : `-field-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks/{idWebhook}/{field}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteWebhooksByIdWebhook()
         * @param {string} idWebhook idWebhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (idWebhook: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idWebhook' is not null or undefined
            assertParamExists('removeById', 'idWebhook', idWebhook)
            const localVarPath = `/webhooks/{idWebhook}`
                .replace(`{${"idWebhook"}}`, encodeURIComponent(String(idWebhook !== undefined ? idWebhook : `-idWebhook-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks/{idWebhook}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateWebhooks()
         * @param {Webhooks} webhooks Attributes of \&quot;Webhooks\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (webhooks: Webhooks, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhooks' is not null or undefined
            assertParamExists('update', 'webhooks', webhooks)
            const localVarPath = `/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhooks,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhooks, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateWebhooksActiveByIdWebhook()
         * @param {string} idWebhook idWebhook
         * @param {WebhooksActive} webhooksActive Attributes of \&quot;Webhooks Active\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateActiveById: async (idWebhook: string, webhooksActive: WebhooksActive, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idWebhook' is not null or undefined
            assertParamExists('updateActiveById', 'idWebhook', idWebhook)
            // verify required parameter 'webhooksActive' is not null or undefined
            assertParamExists('updateActiveById', 'webhooksActive', webhooksActive)
            const localVarPath = `/webhooks/{idWebhook}/active`
                .replace(`{${"idWebhook"}}`, encodeURIComponent(String(idWebhook !== undefined ? idWebhook : `-idWebhook-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhooksActive,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks/{idWebhook}/active',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhooksActive, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateWebhooksByIdWebhook()
         * @param {string} idWebhook idWebhook
         * @param {Webhooks} webhooks Attributes of \&quot;Webhooks\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdWebhook: async (idWebhook: string, webhooks: Webhooks, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idWebhook' is not null or undefined
            assertParamExists('updateByIdWebhook', 'idWebhook', idWebhook)
            // verify required parameter 'webhooks' is not null or undefined
            assertParamExists('updateByIdWebhook', 'webhooks', webhooks)
            const localVarPath = `/webhooks/{idWebhook}`
                .replace(`{${"idWebhook"}}`, encodeURIComponent(String(idWebhook !== undefined ? idWebhook : `-idWebhook-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhooks,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks/{idWebhook}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhooks, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateWebhooksCallbackURLByIdWebhook()
         * @param {string} idWebhook idWebhook
         * @param {WebhooksCallbackURL} webhooksCallbackURL Attributes of \&quot;Webhooks Callback Url\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCallbackUrlById: async (idWebhook: string, webhooksCallbackURL: WebhooksCallbackURL, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idWebhook' is not null or undefined
            assertParamExists('updateCallbackUrlById', 'idWebhook', idWebhook)
            // verify required parameter 'webhooksCallbackURL' is not null or undefined
            assertParamExists('updateCallbackUrlById', 'webhooksCallbackURL', webhooksCallbackURL)
            const localVarPath = `/webhooks/{idWebhook}/callbackURL`
                .replace(`{${"idWebhook"}}`, encodeURIComponent(String(idWebhook !== undefined ? idWebhook : `-idWebhook-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhooksCallbackURL,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks/{idWebhook}/callbackURL',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhooksCallbackURL, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateWebhooksDescriptionByIdWebhook()
         * @param {string} idWebhook idWebhook
         * @param {WebhooksDescription} webhooksDescription Attributes of \&quot;Webhooks Description\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDescriptionByIdWebhook: async (idWebhook: string, webhooksDescription: WebhooksDescription, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idWebhook' is not null or undefined
            assertParamExists('updateDescriptionByIdWebhook', 'idWebhook', idWebhook)
            // verify required parameter 'webhooksDescription' is not null or undefined
            assertParamExists('updateDescriptionByIdWebhook', 'webhooksDescription', webhooksDescription)
            const localVarPath = `/webhooks/{idWebhook}/description`
                .replace(`{${"idWebhook"}}`, encodeURIComponent(String(idWebhook !== undefined ? idWebhook : `-idWebhook-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhooksDescription,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks/{idWebhook}/description',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhooksDescription, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateWebhooksIdModelByIdWebhook()
         * @param {string} idWebhook idWebhook
         * @param {WebhooksIdModel} webhooksIdModel Attributes of \&quot;Webhooks Id Model\&quot; to be updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModelById: async (idWebhook: string, webhooksIdModel: WebhooksIdModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idWebhook' is not null or undefined
            assertParamExists('updateModelById', 'idWebhook', idWebhook)
            // verify required parameter 'webhooksIdModel' is not null or undefined
            assertParamExists('updateModelById', 'webhooksIdModel', webhooksIdModel)
            const localVarPath = `/webhooks/{idWebhook}/idModel`
                .replace(`{${"idWebhook"}}`, encodeURIComponent(String(idWebhook !== undefined ? idWebhook : `-idWebhook-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "key", keyParamName: "apiKey", configuration})
            // authentication api_token required
            await setApiKeyToObject({object: localVarQueryParameter, key: "token", keyParamName: "apiToken", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhooksIdModel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks/{idWebhook}/idModel',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhooksIdModel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhookApi - functional programming interface
 * @export
 */
export const WebhookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhookApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary getWebhooksByIdWebhook()
         * @param {WebhookApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: WebhookApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.idWebhook, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getWebhooksByIdWebhookByField()
         * @param {WebhookApiGetByIdFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdField(requestParameters: WebhookApiGetByIdFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdField(requestParameters.idWebhook, requestParameters.field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteWebhooksByIdWebhook()
         * @param {WebhookApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: WebhookApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.idWebhook, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateWebhooks()
         * @param {WebhookApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(requestParameters: WebhookApiUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const webhooks: Webhooks = {
                description: requestParameters.description,
                active: requestParameters.active,
                callbackURL: requestParameters.callbackURL,
                idModel: requestParameters.idModel
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(webhooks, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateWebhooksActiveByIdWebhook()
         * @param {WebhookApiUpdateActiveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateActiveById(requestParameters: WebhookApiUpdateActiveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const webhooksActive: WebhooksActive = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateActiveById(requestParameters.idWebhook, webhooksActive, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateWebhooksByIdWebhook()
         * @param {WebhookApiUpdateByIdWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateByIdWebhook(requestParameters: WebhookApiUpdateByIdWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const webhooks: Webhooks = {
                description: requestParameters.description,
                active: requestParameters.active,
                callbackURL: requestParameters.callbackURL,
                idModel: requestParameters.idModel
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateByIdWebhook(requestParameters.idWebhook, webhooks, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateWebhooksCallbackURLByIdWebhook()
         * @param {WebhookApiUpdateCallbackUrlByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCallbackUrlById(requestParameters: WebhookApiUpdateCallbackUrlByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const webhooksCallbackURL: WebhooksCallbackURL = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCallbackUrlById(requestParameters.idWebhook, webhooksCallbackURL, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateWebhooksDescriptionByIdWebhook()
         * @param {WebhookApiUpdateDescriptionByIdWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDescriptionByIdWebhook(requestParameters: WebhookApiUpdateDescriptionByIdWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const webhooksDescription: WebhooksDescription = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDescriptionByIdWebhook(requestParameters.idWebhook, webhooksDescription, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateWebhooksIdModelByIdWebhook()
         * @param {WebhookApiUpdateModelByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateModelById(requestParameters: WebhookApiUpdateModelByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const webhooksIdModel: WebhooksIdModel = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateModelById(requestParameters.idWebhook, webhooksIdModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhookApi - factory interface
 * @export
 */
export const WebhookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhookApiFp(configuration)
    return {
        /**
         * 
         * @summary getWebhooksByIdWebhook()
         * @param {WebhookApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: WebhookApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getWebhooksByIdWebhookByField()
         * @param {WebhookApiGetByIdFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdField(requestParameters: WebhookApiGetByIdFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getByIdField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteWebhooksByIdWebhook()
         * @param {WebhookApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: WebhookApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateWebhooks()
         * @param {WebhookApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: WebhookApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.update(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateWebhooksActiveByIdWebhook()
         * @param {WebhookApiUpdateActiveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateActiveById(requestParameters: WebhookApiUpdateActiveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateActiveById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateWebhooksByIdWebhook()
         * @param {WebhookApiUpdateByIdWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateByIdWebhook(requestParameters: WebhookApiUpdateByIdWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateByIdWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateWebhooksCallbackURLByIdWebhook()
         * @param {WebhookApiUpdateCallbackUrlByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCallbackUrlById(requestParameters: WebhookApiUpdateCallbackUrlByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateCallbackUrlById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateWebhooksDescriptionByIdWebhook()
         * @param {WebhookApiUpdateDescriptionByIdWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDescriptionByIdWebhook(requestParameters: WebhookApiUpdateDescriptionByIdWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateDescriptionByIdWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateWebhooksIdModelByIdWebhook()
         * @param {WebhookApiUpdateModelByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModelById(requestParameters: WebhookApiUpdateModelByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateModelById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getById operation in WebhookApi.
 * @export
 * @interface WebhookApiGetByIdRequest
 */
export type WebhookApiGetByIdRequest = {
    
    /**
    * idWebhook
    * @type {string}
    * @memberof WebhookApiGetById
    */
    readonly idWebhook: string
    
}

/**
 * Request parameters for getByIdField operation in WebhookApi.
 * @export
 * @interface WebhookApiGetByIdFieldRequest
 */
export type WebhookApiGetByIdFieldRequest = {
    
    /**
    * idWebhook
    * @type {string}
    * @memberof WebhookApiGetByIdField
    */
    readonly idWebhook: string
    
    /**
    * field
    * @type {string}
    * @memberof WebhookApiGetByIdField
    */
    readonly field: string
    
}

/**
 * Request parameters for removeById operation in WebhookApi.
 * @export
 * @interface WebhookApiRemoveByIdRequest
 */
export type WebhookApiRemoveByIdRequest = {
    
    /**
    * idWebhook
    * @type {string}
    * @memberof WebhookApiRemoveById
    */
    readonly idWebhook: string
    
}

/**
 * Request parameters for update operation in WebhookApi.
 * @export
 * @interface WebhookApiUpdateRequest
 */
export type WebhookApiUpdateRequest = {
    
} & Webhooks

/**
 * Request parameters for updateActiveById operation in WebhookApi.
 * @export
 * @interface WebhookApiUpdateActiveByIdRequest
 */
export type WebhookApiUpdateActiveByIdRequest = {
    
    /**
    * idWebhook
    * @type {string}
    * @memberof WebhookApiUpdateActiveById
    */
    readonly idWebhook: string
    
} & WebhooksActive

/**
 * Request parameters for updateByIdWebhook operation in WebhookApi.
 * @export
 * @interface WebhookApiUpdateByIdWebhookRequest
 */
export type WebhookApiUpdateByIdWebhookRequest = {
    
    /**
    * idWebhook
    * @type {string}
    * @memberof WebhookApiUpdateByIdWebhook
    */
    readonly idWebhook: string
    
} & Webhooks

/**
 * Request parameters for updateCallbackUrlById operation in WebhookApi.
 * @export
 * @interface WebhookApiUpdateCallbackUrlByIdRequest
 */
export type WebhookApiUpdateCallbackUrlByIdRequest = {
    
    /**
    * idWebhook
    * @type {string}
    * @memberof WebhookApiUpdateCallbackUrlById
    */
    readonly idWebhook: string
    
} & WebhooksCallbackURL

/**
 * Request parameters for updateDescriptionByIdWebhook operation in WebhookApi.
 * @export
 * @interface WebhookApiUpdateDescriptionByIdWebhookRequest
 */
export type WebhookApiUpdateDescriptionByIdWebhookRequest = {
    
    /**
    * idWebhook
    * @type {string}
    * @memberof WebhookApiUpdateDescriptionByIdWebhook
    */
    readonly idWebhook: string
    
} & WebhooksDescription

/**
 * Request parameters for updateModelById operation in WebhookApi.
 * @export
 * @interface WebhookApiUpdateModelByIdRequest
 */
export type WebhookApiUpdateModelByIdRequest = {
    
    /**
    * idWebhook
    * @type {string}
    * @memberof WebhookApiUpdateModelById
    */
    readonly idWebhook: string
    
} & WebhooksIdModel

/**
 * WebhookApiGenerated - object-oriented interface
 * @export
 * @class WebhookApiGenerated
 * @extends {BaseAPI}
 */
export class WebhookApiGenerated extends BaseAPI {
    /**
     * 
     * @summary getWebhooksByIdWebhook()
     * @param {WebhookApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiGenerated
     */
    public getById(requestParameters: WebhookApiGetByIdRequest, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getWebhooksByIdWebhookByField()
     * @param {WebhookApiGetByIdFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiGenerated
     */
    public getByIdField(requestParameters: WebhookApiGetByIdFieldRequest, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).getByIdField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteWebhooksByIdWebhook()
     * @param {WebhookApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiGenerated
     */
    public removeById(requestParameters: WebhookApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateWebhooks()
     * @param {WebhookApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiGenerated
     */
    public update(requestParameters: WebhookApiUpdateRequest, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).update(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateWebhooksActiveByIdWebhook()
     * @param {WebhookApiUpdateActiveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiGenerated
     */
    public updateActiveById(requestParameters: WebhookApiUpdateActiveByIdRequest, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).updateActiveById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateWebhooksByIdWebhook()
     * @param {WebhookApiUpdateByIdWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiGenerated
     */
    public updateByIdWebhook(requestParameters: WebhookApiUpdateByIdWebhookRequest, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).updateByIdWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateWebhooksCallbackURLByIdWebhook()
     * @param {WebhookApiUpdateCallbackUrlByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiGenerated
     */
    public updateCallbackUrlById(requestParameters: WebhookApiUpdateCallbackUrlByIdRequest, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).updateCallbackUrlById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateWebhooksDescriptionByIdWebhook()
     * @param {WebhookApiUpdateDescriptionByIdWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiGenerated
     */
    public updateDescriptionByIdWebhook(requestParameters: WebhookApiUpdateDescriptionByIdWebhookRequest, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).updateDescriptionByIdWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateWebhooksIdModelByIdWebhook()
     * @param {WebhookApiUpdateModelByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiGenerated
     */
    public updateModelById(requestParameters: WebhookApiUpdateModelByIdRequest, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).updateModelById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
